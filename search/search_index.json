{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Thumby, a Tiny Playable Keychain by TinyCircuits   <p>Thumby was funded by 4,502 Kickstarter backers in 2021, reaching more than 13 times its funding goal.</p> <p>Thumby\u2122 is an itty-bitty game system at the tips of your thumbs, a best friend for your keys, and an easy learning tool all-in-one. Start playing right away with preloaded games. Download more games and learn to program your own using the Thumby Code Editor Website!</p> Order Now  Join us on Discord    Play &amp; program using MicroPython <p>MicroPython is an implementation of Python 3 optimized to run on microcontrollers, like the Raspberry Pi RP2040 in Thumby! MicroPython is a great way to get started with learning how to program, or to quickly make a new game. </p> <p>We created a Thumby MicroPython API (application programming interface), to make programming even easier! Using our all-in-one Thumby Code Editor, you are just a few tutorials away from creating your own Thumby program or game! The Code Editor also contains the Thumby Arcade where users publish their games for anyone to play and download to their own Thumby. </p> <p>Navigate to the Code Editor documentation to learn more.</p>   Play &amp; program using Blockly  <p> If you are new to programming and want to get started without touching a line of code, the Code Editor comes with Blockly mode, which lets you program visually with interlocking blocks! It couldn't be easier to get started programming games on the Thumby using the same kind of programming interface from Hour of Code and Scratch! You can even publish the games you make to the Thumby Arcade, just like with MicroPython!  </p>   <p>Navigate to the Thumby Blockly tutorials to learn more.</p>"},{"location":"#play-program-using-arduino-cc","title":"Play &amp; program using Arduino C/C++","text":"<p>Check out our documentation for the Arduino C/C++ library created for use with Thumby. </p>"},{"location":"#thumby-tech-specs","title":"Thumby Tech Specs","text":"<ul> <li>Processor: Raspberry Pi Pico RP2040 Processor</li> <li>Memory 2MB total storage</li> <li>Connectivity micro USB for programming &amp; multiplayer using Thumby Link cable</li> <li>Outputs 72\u00d740 px Monochrome OLED Display, Piezo Speaker</li> <li>Inputs 6 tactile buttons (4-way d-pad, 2 action buttons)</li> <li>Power Power switch, 40mAh Rechargeable LiPo Battery, ~2 hours of gameplay</li> <li>Dimensions 1.2 \u00d7 0.7 \u00d7 0.3\" (29.5 \u00d7 18 \u00d7 8.5mm) - Sturdy polycarbonate plastic case with a built-in rechargeable battery and buzzer</li> <li>Programming MicroPython using the Thumby Code Editor or Arduino Code Editor - create your own games! </li> <li>Multiplayer support via Thumby Link cable</li> </ul>"},{"location":"#reviews-from-users","title":"Reviews From Users","text":"#rcorners1 {   border-radius: 25px;   padding: 15px;   background: #373e4e;   /* display: flex;  */   /* justify-content: space-between; */ }  #no-padding {   padding: 0;    margin: 5px;   color: white;   display: inline;   /* align-content: stretch; */ }  /* #p2 {   align: right; }  .p{   display: flex;   align-items: stretch; } */   <p>\"Even photos of it can\u2019t prepare you for just how small the Thumby is when you first pick it up\"</p> <p>-Gizmodo</p>    <p>\"A fully operational handheld that you could very easily swallow if you're not careful.\" \"That's even cooler than I was expecting it to be.\" </p> <p> -Mrwhosetheboss (YouTuber)</p>    <p>\"Probably the World's Smallest Game Console\" </p> <p>-Nintendo Life</p>    <p>\"I am squealing at how adorable this is!!\" </p> -janedstv (TikToker)    <p>\"How small is this... roughly the size of the d-pad!\" </p> <p>-Nintendo Wire</p>    <p>   \"Bzzz, Bzzz, Bzzz\" - Fred, the Carpenter Bee at The University of Akron Blackledge Lab</p>"},{"location":"#youtube-reviews","title":"YouTube Reviews","text":".row {   display: -ms-flexbox; /* IE 10 */   display: flex;   -ms-flex-wrap: wrap; /* IE 10 */   flex-wrap: wrap;   padding: 0 4px; }  /* Create two equal columns that sits next to each other */ .column {   -ms-flex: 50%; /* IE 10 */   flex: 50%;   padding: 0 4px; }  .column img {   margin-top: 8px;   vertical-align: middle; }  .image {   opacity: 1;   display: block;   width: 100%;   height: auto;   transition: .5s ease;   backface-visibility: hidden; }  .container:hover .image {   /* opacity: 0.2; */   box-shadow: 0 0 2px 8px #f68d28; }"},{"location":"About/","title":"About Us","text":"<p>We are TinyCircuits, and we specialize in making small electronics for makers and hobbyists. </p> <p>    TinyCircuits' tiny &amp; mighty team </p> <p>We house our own manufacturing operation in Akron, OH, where we assemble, test, and ship all of our products. </p> <p>TinyCircuits is a supporter of open-source hardware and software and believes collaboration leads to faster innovation. Our products are all open-source and released under the Creative Commons Share-Alike 3.0 License. We are a proud supporter of the Open Source Hardware Association and have helped sponsor the Open Hardware Summit since 2013.</p> <p>Our mission is to make cool stuff!</p> <p>Learn more about our company and space with this short video tour of our office by the YouTube channel HackMakeMod.</p>"},{"location":"About/#contact-us","title":"Contact Us","text":"<p>You can post on the TinyCircuits Forum, or get in touch with TinyCircuits Customer Support for product, order, or technical questions.</p> <p>If you want to chat about making new games or ask some new pals to test your game, the TinyCircuits Discord is a great place for real time conversations about Thumby and other TinyCircuits products! TinyCircuits Admins are available on the Discord, but please ask individual questions through our customer support portal so we can best assist you. \ud83d\ude0a</p>"},{"location":"FAQ/","title":"Frequently Asked Questions","text":"<p>If one of the below options doesn't answer your question(s), you can post on the Thumby section of our forum, or get in touch with customer support.</p>"},{"location":"FAQ/#grayscale-on-thumby","title":"Grayscale on Thumby","text":"<p>Why are/is the grayscale games/library malfunctioning on my Thumby?</p>  <p>Disclaimer: This library is not currently maintained nor guaranteed by the TinyCircuits team, use it as an external resource at your own discretion.</p>  <p>The Thumby Grayscale library uses a timing hack with the SSD1306 chip to create a grayscale effect, but this displayability is not guaranteed on all Thumby OLED screens. Some screens may need further individual calibration to work with the grayscale library and games, but this is still undergoing inspection and testing by community members with no guarantee of a full solution in the future. </p> <p>To report issues, or report findings or fixes, please use the GitHub repository Issues and Pull Requests. For more information on current status or updates, refer to previous Discord discussions before asking questions that may have already been addressed previously in the server.</p> <p>This is an ongoing community effort so we appreciate your continued patience and the dedication of the Grayscale Brain Titans working on bringing grayscale functionality to all Thumbys!</p>"},{"location":"FAQ/#code-editor-connection","title":"Code Editor Connection","text":"<p>Why is my Thumby not connecting to the Web Code Editor?</p> <ul> <li>Make sure you only have one Code Editor tab open - sometimes an older tab can be connected to Thumby and interfere with your current attempt to connect</li> <li>Make sure the Thumby device is ON - power switch should be to the right when looking at the screen</li> <li>Try a different cable - Since no port is coming up at all when the Thumby is turned on - it's possible that the cable you are using does not have the necessary data lines for communicating with the Thumby. Many Micro USB cables have just the power and ground wires to charge or power electronics. Try another cable, or test that you are able to transfer data with that cable in a different way - possibly by transferring files or pictures from a different device.</li> <li>Unplug the device completely and open your 'Device Manager' (windows) -&gt; click on 'Ports' -&gt; plug the device back in to see if anything shows up. For Thumby you should see \"USB Serial Device (COM##)\" where ## can be any number</li> <li>Try a Code Editor Hard Reset: Save any unsaved files that are open in any Code Editor tabs, (as they will be lost after the hard reset) then choose Utilities Tab &gt; Hard Reset.</li> <li>Try a 'full reboot' on your PC. It's possible you have some serial device interfering with your ability to communicate with Thumby, such as a USB hub or other peripheral devices, like a mouse. <ul> <li>If you are on a Windows OS, Save any open documents, then click on the Windows Start Button, select the power icon, and then choose the Restart option. (not Shut Down).   </li> <li>If Linux or Mac, Save any open documents, then hold the computers' power button down for +3 seconds to turn off, then again to turn it back on.  </li> </ul> </li> <li> <p>Lastly, you can try reloading the most recent firmware version: </p> <ol> <li>Plug Thumby into a computer</li> <li>Turn Thumby off</li> <li>Turn Thumby on while holding the down d-pad button (Note: Earlier revisions of Thumby may require pressing one of the red action buttons instead of the down d-pad button)</li> <li>Wait for a file explorer to pop up or for the 'RPI-RP2' device to mount </li> <li>Download the ThumbyFirmware.uf2 file</li> <li>Drag and drop the ThumbyFirmware.uf2 file to the 'RPI-RP2' device (WARNING: this will delete all Thumby files)</li> <li>Turn the Thumby off and on</li> </ol> </li> </ul> <p>The Thumby hardware freezes when it connects to the Code Editor, is it broken?</p> <p>Not at all! This is natural behavior. The Thumby hardware appears to stop working when you connect it since you can no longer access the game menu, but everything is fine! The screen should display \"Thumby Code Editor\" when connected as of March 9th, 2022.</p> <p>To test games or changes you upload to the Thumby, you will need to disconnect the unit and power cycle it (turn it off and back on). Otherwise, you can use \"Fast Execute\" to upload just the game you are currently reviewing or working on. </p>"},{"location":"FAQ/#thumby-settings-menu","title":"Thumby Settings menu","text":"<p>Can I change the audio and brightness?</p> <p>Yes! Turn on the Thumby, scroll down once to the 'GAMES' menu and right once to view the 'SETTINGS'. Here you can press the d-pad down button to the setting you want to alter and press either red action button to change the setting mode:</p> <ul> <li>Audio: On/Off</li> <li>Brightness: Mid/Hi/Low     -- Note: we couldn't fit the whole word Brightness on the screen, so it reads as just Brite</li> </ul> <p>The changes automatically save after being changed. </p>"},{"location":"FAQ/#thumby-credits","title":"Thumby Credits","text":"<p>Where is the credits menu and whose names are on it?</p> <p>To view the credits menu on the Thumby, turn Thumby on, scroll down once to the 'GAMES' menu and press the d-pad button right twice to scroll past the 'SETTINGS' menu to see the credits roll 4 names at a time.</p> <p>Kickstarter backers that selected a Special Edition Thumby were able to submit one 16 character name (or something) on the credits list per Special Edition Thumby purchased. To view the full credits list, you can connect Thumby to the Thumby Code Editor and view the credits.txt file from the 'filesystem' directory.</p>"},{"location":"FAQ/#playing-and-adding-more-games","title":"Playing and Adding More Games","text":"<p>How do I play the games on the Thumby?</p> <p>Turn on the Thumby and once the \"Start\" text displays below the Thumby logo, you can scroll down to see the list of games downloaded to the Thumby. There are 5+ games preloaded onto the Thumby.</p> <p>Select any game with a red action button to start playing. When you want to stop playing or play a different game, turn the Thumby off and back on with the power switch. Thumby will remember the last game you played. When the Thumby is first powered on and the 'Start' text is selected, you can press a red action button to start playing the last game played.</p> <p>How do I add more games?</p> <p>There are plenty of free games made by the community that you can play on your Thumby. Check out this tutorial to learn how to add games to Thumby. </p>"},{"location":"FAQ/#multiplayer-link-cable","title":"Multiplayer Link Cable","text":"<p>Is the Thumby Link cable the same as an OTG cable, or is it different?</p> <p>The pin wiring of the OTG cable would need to be verified. </p> <p>    Micro USB Pinout diagram </p> <p>The Thumby Link cable is a custom cable that connects GND to GND (pin 5), and ID pin to ID pin (pin 4) for data transfer.</p>"},{"location":"FAQ/#audio","title":"Audio","text":"<p>How can I test that the audio is working?</p> <p>Check that the Audio is turned on in the settings menu: Turn Thumby on -&gt; scroll down once -&gt; scroll to the right once -&gt; check that the 'Audio' setting is 'ON'.</p> <p>Not every game has sound effects, but some of the preloaded games do. You can test audio with the game SaurRun - try playing this game and holding the Thumby closer to your ear to hear the tiny piezo sounds while jumping the running Dinosaur. Or play the TinyBlocks game to hear tiny ticking sounds as the play blocks fall down the screen.</p>"},{"location":"FAQ/#charging-battery-life","title":"Charging &amp; Battery Life","text":"<p>How long does Thumby take to charge? Is there an indicator when it is charged?</p> <p>Thumby takes around 1 hour to completely charge. An indicator LED will turn on from inside the Thumby case to show that the battery is being charged. The LED will turn off when the battery is fully charged. The LED is located to the left of the micro USB connector.</p> <p>Note: The charging LED may be difficult to see through opaque plastic cases. Try turning off the lights in the room you are in if you are having difficulty seeing the LED while charging.</p> <p>How long can I play Thumby on a full charge?</p> <p>You can play Thumby for up to two hours on a full charge. Games that display more white pixels will use more power than games that are darker.</p>"},{"location":"FAQ/#software-updates","title":"Software Updates","text":"<p>How do I know if my Thumby has the latest firmware/software?</p> <p>You can update the Thumby firmware after connecting your Thumby to the Web Code Editor - the files system panel has an 'Update' button that will turn red when it detects your software is not up-to-date. Press the 'Update' button to load the newest software. The update will only overwrite a few core Thumby files.</p>"},{"location":"FAQ/#linux-with-thumby","title":"Linux with Thumby","text":"<p>How do I connect Thumby to a Linux system?</p> <p>If you have already tried to connect Thumby to your Linux machine and failed, it's likely you have encountered an error message like: \"Could not open serial port /dev/ttyUSB0\"</p> <p>You will need to add your user to the <code>dialout</code> group to have access to the USB device. Use the command: </p> <p><code>sudo adduser $USER dialout</code></p> <p>The $USER keyword will fetch your username, so there is no need to alter the command. Then, log out of your user account or restart your machine for the changes to take effect.</p>"},{"location":"FAQ/#distributing-thumby","title":"Distributing Thumby","text":"<p>Can I distribute Thumby?</p> <p>Yes! Check out the different levels of our distribution program on our main page.</p>"},{"location":"API/Audio/","title":"Audio","text":""},{"location":"API/Audio/#functions","title":"Functions","text":"<p><code>thumby.audio.play(freq, duration)</code> | plays audio at sound frequency <code>freq</code> for <code>duration</code> in milliseconds without blocking code execution. For now, try searching 'music notes to frequency chart' to relate these parameters to musical notes. <code>freq</code> can technically range from 7Hz-125MHz, but human hearing is in the 20-20000Hz range. Returns None</p>  <ul> <li><code>freq</code><ul> <li>type: int</li> <li>values: 20 ~ 20000 (Hz)</li> </ul> </li> <li><code>duration</code><ul> <li>type: int</li> <li>values: 0 ~ 2147483647 (ms)</li> </ul> </li> </ul>  <p><code>thumby.audio.playBlocking(freq, duration)</code> | plays audio at sound frequency <code>freq</code> for <code>duration</code> in milliseconds while blocking code execution. For now, try searching 'music notes to frequency chart' to relate these parameters to musical notes. <code>freq</code> can technically range from 7Hz-125MHz, but human hearing is in the 20-20000Hz range. Returns None</p> <ul> <li><code>freq</code><ul> <li>type: int</li> <li>values: 20 ~ 20000 (Hz)</li> </ul> </li> <li><code>duration</code><ul> <li>type: int</li> <li>values: 0 ~ 2147483647 (ms)</li> </ul> </li> </ul>  <p><code>thumby.audio.stop()</code> | stops playing any running audio started by <code>thumby.audio.play(...)</code>. Returns None</p>  <p><code>thumby.audio.set_enabled(setting)</code> | stops buzzer from outputting sound when <code>thumby.audio.play()</code> or <code>thumby.audio.playBlocking()</code> are called using <code>setting</code> flag. <code>thumby.audio.playBlocking(...)</code> will still block subsequent code execution for the duration provided to it. Returns None</p> <ul> <li><code>setting</code><ul> <li>type: bool</li> <li>values: 1/True (audio enabled) or 0/False (audio disabled)</li> </ul> </li> </ul>"},{"location":"API/Audio/#advanced-community-fueled-usage","title":"Advanced Community-fueled Usage","text":"<p>It's possible to make more complicated sound effects and music with Thumby using software. Check out the arcade game Melody Maker made by SuperRiley64 (@FestyWalrus on GitHub) to make your own tunes that save to Thumby, or use an audio library to take your Thumby music to the next level. </p> <p> Bad Apple on Thumby using PWM at 80 kHz - showcasing what's possible with the tiny piezo!</p> <p>Background: Thumby Rev 6 utilizes a piezo disc connected through a buffer to a GPIO pin to create audio effects. Anything other than a square wave on one channel requires more software.</p> <p>An impressive community developed audio library, Thumby Polysynth, made by @transistortester allows for more complicated audio configurations, please take a look at their README on their GitHub Repository for more information.</p>  <p>Disclaimer: This library is not maintained nor guaranteed by the TinyCircuits team, use it as an external resource at your own discretion.</p>"},{"location":"API/Blit-Draw/","title":"Blit, Draw, and Sprites","text":"<p><code>thumby.display.blit(bitmapData, x, y, width, height, key, mirrorX, mirrorY)</code> | draws pixels defined in <code>bitmapData</code> (VLSB) array at <code>x</code> and <code>y</code> provided the bitmap's <code>width</code> and <code>height</code> with transparent pixels defined by <code>key</code> (e.g. <code>key = 0</code> means black pixels are not drawn/are transparent) with possibility of mirroring using <code>mirrorX</code> (across x-axis) and <code>mirrorY</code> (across y-axis). Returns None, all parameters required.</p> <ul> <li><code>bitmapData</code><ul> <li>type: bytearray</li> <li>values: each byte consisting of VLSB aligned data where each bit being 1 (white) or 0 (black)</li> </ul> </li> <li><code>x</code><ul> <li>type: int</li> <li>values: 0 (left) ~ 71 (right)</li> </ul> </li> <li><code>y</code><ul> <li>type: int</li> <li>values: 0 (top) ~ 39 (bottom)</li> </ul> </li> <li><code>width</code><ul> <li>type: int</li> <li>values: 0 ~ 71</li> </ul> </li> <li><code>height</code><ul> <li>type: int</li> <li>values: 0 ~ 39</li> </ul> </li> <li><code>key</code><ul> <li>type: int</li> <li>values: 0 or 1 (default: -1, both black and white pixels drawn)</li> </ul> </li> <li><code>mirrorX</code><ul> <li>type: int</li> <li>values: 0 (do not mirror) or 1 (do mirror)</li> </ul> </li> <li><code>mirrorY</code><ul> <li>type: int</li> <li>values: 0 (do not mirror) or 1 (do mirror)</li> </ul> </li> </ul>  <p><code>thumby.display.blitWithMask(bitmapData, x, y, width, height, key, mirrorX, mirrorY, maskBitmapData)</code> | draws pixels defined in <code>bitmapData</code> array at <code>x</code> and <code>y</code> provided the bitmap's <code>width</code> and <code>height</code> with transparent pixels defined by <code>key</code> (e.g. <code>key = 0</code> means black pixels are not drawn/are transparent) with possibility of mirroring using <code>mirrorX</code> (across x-axis) and <code>mirrorY</code> (across y-axis). On conjunction with <code>key</code>, use <code>maskBitmapData</code> to specify pixels to be transparent (provides per-pixel transparency). Returns None, all parameters required.</p> <ul> <li><code>bitmapData</code><ul> <li>type: bytearray</li> <li>values: each byte consisting of VLSB aligned data where each bit being 1 (white) or 0 (black)</li> </ul> </li> <li><code>x</code><ul> <li>type: int</li> <li>values: 0 (left) ~ 71 (right)</li> </ul> </li> <li><code>y</code><ul> <li>type: int</li> <li>values: 0 (top) ~ 39 (bottom)</li> </ul> </li> <li><code>width</code><ul> <li>type: int</li> <li>values: 0 ~ 71</li> </ul> </li> <li><code>height</code><ul> <li>type: int</li> <li>values: 0 ~ 39</li> </ul> </li> <li><code>key</code><ul> <li>type: int</li> <li>values: 0 or 1 (default: -1, both black and white pixels drawn)</li> </ul> </li> <li><code>mirrorX</code><ul> <li>type: int</li> <li>values: 0 (do not mirror) or 1 (do mirror)</li> </ul> </li> <li><code>mirrorY</code><ul> <li>type: int</li> <li>values: 0 (do not mirror) or 1 (do mirror)</li> </ul> </li> <li><code>maskBitmapData</code><ul> <li>type: bytearray</li> <li>values: each byte consisting of VLSB aligned data where each bit being 1 (transparent) or 0 (not-drawn)</li> </ul> </li> </ul>  <p><code>thumby.display.drawSprite(sprite)</code> | draw <code>sprite</code> to screen using its internal properties (position, dimensions, etc). Returns none, all parameters required.</p> <ul> <li><code>sprite</code><ul> <li>type: Sprite (<code>thumby.Sprite</code>)</li> </ul> </li> </ul>  <p><code>thumby.display.drawSpriteWithMask(sprite, maskSprite)</code> | draws <code>sprite</code> to screen using internal properties for position and size with per-pixel transparency provided by <code>maskSprite</code>. Returns none, all parameters required.</p> <ul> <li><code>sprite</code><ul> <li>type: Sprite (<code>thumby.Sprite</code>)</li> </ul> </li> <li><code>maskSprite</code><ul> <li>type: Sprite (<code>thumby.Sprite</code>) (pixels set to 1 are transparent, while 0 pixels are not drawn)</li> </ul> </li> </ul>"},{"location":"API/Buttons/","title":"Button Input","text":"<p>There are 6 total individual buttons available to use as input for Thumby. 4 directional buttons for up, down, left, and right, and there are two action buttons. Multiple buttons can be combined to add more button actions to gameplay.</p> <p>Use the <code>.pressed()</code> functions to detect if a button is actively being pressed - this function will detect the button press continuously. Use the <code>.justPressed()</code> functions for a single button press and not continuously - for example, when navigating a menu you want the menu to move once per button click.</p>"},{"location":"API/Buttons/#objects","title":"Objects","text":"<ul> <li><code>thumby.buttonA</code> | for accessing A button (right red button)</li> <li><code>thumby.buttonB</code> | for accessing B button (left red button)</li> <li><code>thumby.buttonU</code> | for accessing Up direction on d-pad</li> <li><code>thumby.buttonD</code> | for accessing Down direction on d-pad</li> <li><code>thumby.buttonL</code> | for accessing Left direction on d-pad</li> <li><code>thumby.buttonR</code> | for accessing Right direction on d-pad</li> </ul>"},{"location":"API/Buttons/#methods","title":"Methods","text":"<ul> <li><code>thumby.buttonX.pressed()</code> <ul> <li>Returns True if <code>thumby.buttonX</code> is currently pressed</li> <li>Returns False otherwise (replace <code>buttonX</code> by any of the above button objects)</li> </ul> </li> <li><code>thumby.buttonX.justPressed()</code><ul> <li>Returns True if the last button pressed was <code>thumby.buttonX</code></li> <li>Returns False otherwise (replace <code>buttonX</code> by any of the above button objects)</li> </ul> </li> <li><code>inputPressed()</code><ul> <li>Returns true if any buttons are currently pressed on the thumby.</li> </ul> </li> <li><code>inputJustPressed()</code><ul> <li>Returns true if any buttons were just pressed on the thumby.</li> </ul> </li> <li><code>dpadPressed()</code><ul> <li>Returns true if any d-pad buttons are currently pressed on the thumby.</li> </ul> </li> <li><code>dpadJustPressed()</code><ul> <li>Returns true if any d-pad buttons were just pressed on the thumby.</li> </ul> </li> <li><code>actionPressed()</code><ul> <li>Returns true if either action button is pressed on the thumby.</li> </ul> </li> <li><code>actionJustPressed()</code><ul> <li>Returns true if either action button was just pressed on the thumby.</li> </ul> </li> </ul>"},{"location":"API/Buttons/#example-with-graphics","title":"Example with Graphics","text":"<p>This example uses an instance of a Sprite object and some rectangles to create the outline of the direction-pad button, and the two action button outlines, respectively. When each button is pressed, the corresponding letter of the button is printed inside the button outlines to show a nice visual display triggered by buttons being pressed. You can press each button individually, or all of the buttons at once for this example. </p> <p>    Background, and small Sprite examples! </p> <pre><code># Written by: Laver\u00e9na Wienclaw, Feb 2022\nimport thumby\n\n# BITMAP: width: 21, height: 21\ndpadMap = bytearray([224,32,32,32,32,63,1,1,1,1,1,1,1,1,1,63,32,32,32,32,224,\n            255,128,128,128,128,128,0,0,0,0,0,0,0,0,0,128,128,128,128,128,255,\n            0,0,0,0,0,31,16,16,16,16,16,16,16,16,16,31,0,0,0,0,0])\n\n# Make a sprite object using bytearray (a path to binary file from 'IMPORT SPRITE' is also valid)\ndpadSpr = thumby.Sprite(21, 21, dpadMap, 10, 10)\n\n# Begin main game loop that runs for the course of the game\nwhile(True):\n    thumby.display.fill(0) # Fill canvas to black\n\n    # draw the d-pad sprite first so the text is placed over it\n    thumby.display.drawSprite(dpadSpr) \n\n    # Up, down, left, right, and action a, and b button movement logic\n    if thumby.buttonU.pressed():\n        thumby.display.drawText(\"U\", 18, 12, 1)\n    if thumby.buttonD.pressed():\n        thumby.display.drawText(\"D\", 18, 22, 1)\n\n    if thumby.buttonL.pressed():\n        thumby.display.drawText(\"L\", 12, 17, 1)\n    if thumby.buttonR.pressed():\n        thumby.display.drawText(\"R\", 24, 17, 1)\n\n    if thumby.buttonA.pressed():\n        thumby.display.drawText(\"A\", 52, 12, 1)\n    if thumby.buttonB.pressed():\n        thumby.display.drawText(\"B\", 42, 22, 1)\n\n    # Display the bitmap using bitmap data, position, and bitmap dimensions\n    thumby.display.drawRectangle(50, 10, 9, 11, 1)  # a\n    thumby.display.drawRectangle(40, 20, 9, 11, 1)  # b\n    thumby.display.update()\n</code></pre>"},{"location":"API/Get-Started/","title":"Thumby API Documentation","text":"<p>To get started using the entire Thumby API, import the module at the top of your MicroPython program:</p> <pre><code>import thumby\n</code></pre>"},{"location":"API/Get-Started/#constants","title":"Constants","text":"<ul> <li><code>__version__</code><ul> <li>type: string</li> <li>values: 1.0 ~ limitless (increased for changes to library)</li> </ul> </li> </ul>  <p>Note: where <code>color</code> is mentioned in the Thumby API docs, <code>color</code> refers to 0 being a black (unlit) pixel, and the value 1 refers to a white (lit) pixel.</p>"},{"location":"API/Get-Started/#methods","title":"Methods","text":"<p>What are Thumby Submodules? </p>     Thumby Submodule Documentation Page &amp; Methods     thumbyHardware Hardware:  <code>.reset()</code>   thumbyButton Button  <code>.buttonX.pressed()</code><code>.buttonX.justPressed()</code>  <code>.inputPressed()</code>  <code>.inputJustPressed()</code>  <code>.dpadPressed()</code>  <code>.dpadJustPressed()</code>  <code>.actionPressed()</code>  <code>.actionJustPressed()</code>   thumbyGraphics Text: <code>.display.drawText(string, x, y, color)</code><code>.display.setFont(fontFilePath, width, height, space)</code>  General:  Constants: <code>.display.width</code> and <code>.display.height</code>  <code>.display.update()</code><code>.display.setFPS(FPS)</code><code>.display.fill(color)</code><code>.display.brightness(brightness)</code>  Pixels:  <code>.display.setPixel(x, y, color)</code><code>.display.getPixel(x, y)</code>  Lines:  <code>.display.drawLine(x1, y1, x2, y2, color)</code>  Rectangles:  <code>.display.drawFilledRectangle(x, y, w, h, color)</code><code>.display.drawRectangle(x, y, w, h, color)</code>  Blit:  <code>.display.blit(bitmapData, x, y, width, height, key, mirrorX, mirrorY)</code><code>.display.blitWithMask(bitmapData, x, y, width, height, key, mirrorX, mirrorY, maskBitmapData)</code><code>.display.drawSprite(sprite)</code><code>.display.drawSpriteWithMask(sprite, maskSprite)</code>   thumbySprite Sprite  <code>.Sprite(width, height, bitmapData, x, y, key, mirrorX, mirrorY)</code><code>.Sprite.getFrame()</code><code>.Sprite.setFrame(frame)</code>   thumbyAudio Audio  <code>.audio.play(freq, duration, duty)</code><code>.audio.playBlocking(freq, duration, duty)</code><code>.audio.stop()</code><code>.audio.setEnabled(setting)</code> <code>audio.set(freq)</code>   thumbyLink Link  <code>.link.send(data)</code><code>.link.receive()</code>   thumbySaves Saves  <code>.saveData.setName(subdirectoryName)</code>  <code>.saveData.setItem(key, value)</code>  <code>.saveData.getItem(key)</code>  <code>.saveData.hasItem(key)</code>  <code>.saveData.delItem(key)</code>  <code>.saveData.save()</code>  <code>.saveData.getName()</code>"},{"location":"API/Get-Started/#submodules","title":"Submodules","text":"<p>In Thumby API version 1.7, the Thumby API was divided into submodules for those not using the entire API. Using Thumby submodules increases the speed of program load times. You can always import all thumby constants and methods using <code>import thumby</code>. To import submodules and to use their methods in your code, you would import the submodule name instead, and when using methods you would type the submodule name instead of \"thumby\". </p> <p>Let's look at the differences in two small examples that show how to import and use methods with the entire Thumby API and with a submodule. </p> <p>Using the full API: <pre><code>import thumby\n\nthumby.display.fill(0)\nthumby.display.drawText(\"Hello world\", 0, 0, 1)\nthumby.display.update()\n</code></pre></p> <p>Using a submodule of the API: <pre><code>import thumbyGraphics\n\nthumbyGraphics.display.fill(0)\nthumbyGraphics.display.drawText(\"Hello world\", 0, 0, 1)\nthumbyGraphics.display.update()\n</code></pre></p> <p>These code snippets work the same, but the second runs faster! Check out what methods are available in which submodule in the table below!</p>"},{"location":"API/Graphics/","title":"General Graphics","text":""},{"location":"API/Graphics/#constants","title":"Constants","text":"<p>Use these screen dimension constants in place of the actual pixel dimensions of the screen to remove magic numbers from your code:</p> <p><code>thumby.display.width</code> | number of pixels that define the screen width</p> <ul> <li>type: int</li> <li>value: 72</li> </ul> <p><code>thumby.display.height</code> | number of pixels that define the screen height</p> <ul> <li>type: int</li> <li>value: 40</li> </ul>"},{"location":"API/Graphics/#update-display","title":"Update Display","text":"<p><code>thumby.display.update()</code> | updates screen at frames-per-second (FPS) specified by </p> <p><code>thumby.display.setFPS(...)</code>. This function will block updates to maintain the set FPS setting. Default frame rate 0 (non-limited). Returns <code>None</code></p>"},{"location":"API/Graphics/#frame-per-second-fps","title":"Frame Per Second (FPS)","text":"<p><code>thumby.display.setFPS(FPS)</code> | sets the max <code>FPS</code> used by <code>thumby.display.update()</code>. Returns None, all parameters required.</p> <ul> <li><code>FPS</code><ul> <li>type: float</li> <li>values: 0 ~ integer max</li> </ul> </li> </ul> <p>Games are considered playable at above 20 fps, but 30 fps is generally accepted as a standard minimum with 60 fps as the ideal frame rate for responsiveness and fluidity of animation. </p> <p>Keep in mind - depending on how many Sprites or animations you build into your game and how efficiently you program these components - your frame rate may suffer and be less than what you set as the FPS. </p> <pre><code>import thumby\n\nthumby.display.setFPS(60)\n\nwhile(True):\n    # Rest of program....\n</code></pre>"},{"location":"API/Graphics/#fill-screen-color","title":"Fill Screen Color","text":"<p><code>thumby.display.fill(color)</code> | fills entire screen with <code>color</code>. Returns None</p> <ul> <li><code>color</code><ul> <li>type: int</li> <li>values: 0 or 1 -- where 0 is black or an unlit pixel, and 1 is white or a lit pixel</li> </ul> </li> </ul> <p>Note: where <code>color</code> is mentioned in the Thumby API docs, <code>color</code> refers to 0 being a black (unlit) pixel, and the value 1 refers to a white (lit) pixel.</p>"},{"location":"API/Graphics/#fill-screen-example","title":"Fill Screen Example","text":"<p>Using this example, the hardware or emulator display will alternate between a white or black screen every second.</p> <pre><code>import thumby\n\nthumby.display.setFPS(1) # 1 frame per second\n\nwhile(True):\n    thumby.display.fill(1) # fill screen with white pixels\n    thumby.display.update()\n\n    thumby.display.fill(0) # fill screen with empty (black) pixels\n    thumby.display.update()\n</code></pre>"},{"location":"API/Graphics/#screen-brightness","title":"Screen Brightness","text":"<p><code>thumby.display.brightness(brightness)</code> | sets screen to <code>brightness</code> value. Returns None, all parameters required.</p> <ul> <li><code>brightness</code><ul> <li>type: int</li> <li>values: 0 (off) ~ 127 (max brightness)</li> </ul> </li> </ul>"},{"location":"API/Graphics/#brightness-example","title":"Brightness Example","text":"<p>When uploaded on the Thumby hardware, this example will cycle through the full range of the brightness variable values, 0-127. </p> <pre><code>import thumby\n\nbrightness = 0\nthumby.display.setFPS(30)\nthumby.display.fill(1) # fill screen with white pixels\n\nwhile(True):\n    thumby.display.brightness(brightness)\n    thumby.display.update()\n    brightness += 1\n    if brightness &gt;= 127:\n        brightness = 0\n</code></pre>"},{"location":"API/Hardware/","title":"Hardware Reset","text":"<p>A great way to close your game when the player has finished playing is to offer a menu along the lines of \"Play Again: B, Quit: A\" To communicate to the player which button should be pressed to quit the game and return to the main menu, or to give them a chance to replay the game without restarting from the main menu. </p> <p>Since Thumby games are written in MicroPython, the main game files have a .py extension and function like any normal script written in regular Python. A script is a sequence of instructions that is carried out and then ends, so it's possible that your game script is already ending and returning to the main menu by itself when the player is done playing your game. You can write and test your game in this way, or you can add the <code>.reset()</code> command to take out the possibility of any logic errors. </p> <p>This short example shows how it might be used to tell the player how to exit the game: </p> <pre><code>import thumby\nimport time\n\nwhile(True):\n    thumby.display.fill(0)\n    thumby.display.drawText(\"Press A to\", 0, 0, 1)\n    thumby.display.drawText(\"Exit.\", 0, 10, 1)\n    if(thumby.buttonA.justPressed()):\n        thumby.display.fill(0)\n        thumby.display.drawText(\"Exiting...\", 0, 0, 1)\n        thumby.display.update()\n        time.sleep(2) # delay game for a few seconds so player can read closing message\n        thumby.reset() # exit game to main menu\n\n    thumby.display.update()\n</code></pre> <p>You can use the reset method by either importing the entire Thumby API using <code>import thumby</code> and then type <code>thumby.reset()</code> in your code where you want to return to the main menu, or you can import a submodule of the Thumby API <code>import thumbyHardware</code> and <code>thumbyHardware.reset()</code>. Submodule are available in Thumby API version 1.7 and later.</p>"},{"location":"API/Lines/","title":"Draw Line Function","text":"<p><code>thumby.display.drawLine(x1, y1, x2, y2, color)</code> | draws 1px thick line in <code>color</code> from <code>x1</code> and <code>y1</code> to <code>x2</code> and <code>y2</code> (thickness not variable). Returns None, all parameters required.</p> <ul> <li><code>x1</code><ul> <li>type: int</li> <li>values: 0 (left) ~ 71 (right)</li> </ul> </li> <li><code>y1</code><ul> <li>type: int</li> <li>values: 0 (top) ~ 39 (bottom)</li> </ul> </li> <li><code>x2</code><ul> <li>type: int</li> <li>values: 0 (left) ~ 71 (right)</li> </ul> </li> <li><code>y2</code><ul> <li>type: int</li> <li>values: 0 (top) ~ 39 (bottom)</li> </ul> </li> <li><code>color</code><ul> <li>type: int</li> <li>values: 0 or 1 -- where 0 is black or an unlit pixel, and 1 is white or a lit pixel</li> </ul> </li> </ul>"},{"location":"API/Lines/#line-example","title":"Line Example","text":"<p>When drawing lines, it may be helpful to use the <code>thumby.display.width</code> and <code>thumby.display.height</code> member variables for the screen width (72), and the height (40). Otherwise, you can do the math yourself. This example uses both methods to draw three different lines:</p> <p>    Three lines across the screen horizontally, vertically, and diagonally </p> <pre><code># Written by: Laver\u00e9na Wienclaw, Feb 2022\nimport thumby\n\nthumby.display.fill(0) # Fill canvas to black\n\n# Draw a diagonal line from the top left to the bottom right corner\nthumby.display.drawLine(0, 0, thumby.display.width, thumby.display.height, 1) # (x1, y1, x2, y2, color)\n# Draw another line in the middle, top to bottom\nthumby.display.drawLine(36, 0, 36, 40, 1)\n# Draw a last line in the middle of the screen from left to right\nthumby.display.drawLine(0, 20, 72, 20, 1)\n\n# Update display\nthumby.display.update()\n</code></pre>"},{"location":"API/Link/","title":"Multiplayer Link","text":"<p>Thumby communication is half-duplex serial, meaning only one Thumby can talk at a time. The <code>.send(...)</code> function only succeeds on the first time calling it, if data is received when calling <code>.receive()</code>, or if a timeout occurred.</p> <p><code>thumby.link.send(data)</code> | tries to send <code>data</code> over link cable. Returns False if data was not received before timeout, or True if data transmission succeeds. All parameters required.</p> <ul> <li><code>data</code><ul> <li>type: bytes or bytearray</li> <li>value: bytes or bytearray filled with integers scaled 0 to 255 (max array length is 512)</li> </ul> </li> </ul> <p><code>thumby.link.receive()</code> | retrieves data sent over link cable. Returns bytearray containing integers scaled 0 to 255 (max array length is 512), returns None otherwise</p>"},{"location":"API/Link/#thumby-link-api-examples","title":"Thumby Link API Examples","text":"<p>The Thumby link API takes care of the half-duplex communication for you! Half-duplex communication works similarly to walkie-talkies - only one device can communicate to the other at a time.</p>"},{"location":"API/Link/#encoding-sending-receiving-and-decoding-data","title":"Encoding, sending, receiving, and decoding data","text":"<p>Data must be encoded to bytes before sending, and decoded from bytes after it is received. MicroPython offers built-in utilities to help prepare data.</p> <ul> <li>List of bytes (each element is a value from 0 to 255). Wrap the list with <code>bytearray()</code> and use it like a normal array</li> </ul> <pre><code># Allow both Thumbys to move their own square\n\nimport thumby\n\n# Set the FPS to something high. The other player's\n# movement will be at half the refresh rate!\nthumby.display.setFPS(90)\n\n# Convert the list to a bytearray and use the first \n# element as an x position and the second as a y\nmyPlayerPos = bytearray([0, 0])\ntheirPlayerPos = bytearray([0, 0])\n\nwhile True:\n    # No screen bounds checking done\n    if thumby.buttonU.pressed():\n        myPlayerPos[1] -= 1\n    elif thumby.buttonD.pressed():\n        myPlayerPos[1] += 1\n    elif thumby.buttonL.pressed():\n        myPlayerPos[0] -= 1\n    elif thumby.buttonR.pressed():\n        myPlayerPos[0] += 1\n\n    # Draw the squares\n    thumby.display.fill(0)\n    thumby.display.drawFilledRectangle(myPlayerPos[0], myPlayerPos[1], 2, 2, 1)\n    thumby.display.drawFilledRectangle(theirPlayerPos[0], theirPlayerPos[1], 2, 2, 1)\n    thumby.display.update()\n\n    # .send(...) and .receive() should be called in the same\n    # loop to ensure fastest back and forth communication!\n    # The other Thumby won't send data until it gets something\n    # back!\n    thumby.link.send(myPlayerPos)\n    received = thumby.link.receive()\n\n    # Check that data was received and then\n    # assign it to the other player's square\n    if received != None:\n        theirPlayerPos = received\n</code></pre> <ul> <li>Strings. Use <code>.encode()</code> and <code>.decode()</code> on strings!</li> </ul> <pre><code># Send random texts to the other Thumby\n\nimport thumby\nimport random\n\n# Set a low FPS since just texting back and forth\nthumby.display.setFPS(15)\n\n# Define alphabet get getting random characters from\nalphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\n# Store last received message in this\nlastReceivedMessage = \"\"\n\nwhile True:\n    # Unless a button is pressed later, a blank message will be sent\n    message = \"\"\n\n    # Make a random message on button press\n    if thumby.buttonA.pressed():\n        for i in range(0, 6, 1):\n            message += alphabet[random.randint(0, 25)]\n\n    # Send message after encoding even if \"\" or random\n    thumby.link.send(message.encode())\n\n    # Always try to receive data\n    received = thumby.link.receive()\n    if received != None:\n        # Decode the string!\n        received = received.decode()\n        if received != \"\":\n            lastReceivedMessage = received\n\n    # Display the last message received\n    thumby.display.fill(0)\n    thumby.display.drawText(\"Received:\", 0, 0, 1)\n    thumby.display.drawText(lastReceivedMessage, 16, 14, 1)\n    thumby.display.update()\n</code></pre> <ul> <li>Objects (lists, tuples, dictionaries, and sets). Use the <code>ujson</code> module to serialize and deserialize the object. The below example uses lists with different type elements, but <code>ujson</code> works with other objects. WARNING: Serialization and deserialization can be slow!</li> </ul> <pre><code># Allow each thumby to move their own named square\n\nimport thumby\nimport ujson\nimport random\n\n# Set the FPS to something high. The other player's\n# movement will be at half the refresh rate!\nthumby.display.setFPS(90)\n\n# Make a list for each player containing an x position,\n# y position, and a name. This is a list with different\n# type elements - bytearray cannot be used directly\nmyPlayerInfo = [0, 0, \"Thumby\" + str(random.randint(0, 1000))]\ntheirPlayerInfo = [0, 0, \"\"]\n\nwhile True:\n    # No screen bounds checking done\n    if thumby.buttonU.pressed():\n        myPlayerInfo[1] -= 1\n    elif thumby.buttonD.pressed():\n        myPlayerInfo[1] += 1\n    elif thumby.buttonL.pressed():\n        myPlayerInfo[0] -= 1\n    elif thumby.buttonR.pressed():\n        myPlayerInfo[0] += 1\n\n    # Draw the squares and their names\n    thumby.display.fill(0)\n    thumby.display.drawText(myPlayerInfo[2], myPlayerInfo[0] - 25, myPlayerInfo[1] - 8, 1)\n    thumby.display.drawFilledRectangle(myPlayerInfo[0], myPlayerInfo[1], 2, 2, 1)\n\n    thumby.display.drawText(theirPlayerInfo[2], theirPlayerInfo[0] - 10, theirPlayerInfo[1] - 8, 1)\n    thumby.display.drawFilledRectangle(theirPlayerInfo[0], theirPlayerInfo[1], 2, 2, 1)\n    thumby.display.update()\n\n    # .send(...) and .receive() should be called in the same\n    # loop to ensure fastest back and forth communication!\n    # The other Thumby won't send data until it gets something\n    # back!\n    thumby.link.send(ujson.dumps(myPlayerInfo).encode())\n    received = thumby.link.receive()\n\n    # Check that data was received and then\n    # assign it to the other player's square\n    if received != None:\n        theirPlayerInfo = ujson.loads(received.decode())\n</code></pre>"},{"location":"API/Link/#advanced","title":"Advanced","text":"<p>See the Tennis game for an example of complex usage of the link API. Tennis provides examples on how to sync various aspects of a game, such as the current game screen, sprite positions, sound, etc.</p>"},{"location":"API/Link/#script-structure","title":"Script structure","text":"<p>The above examples only showed structures that work well but here is a structure that does not:</p> <p><pre><code># Allow both Thumbys to move their own square\n\nimport thumby\n\n# Set the FPS to something high. The other player's\n# movement will be at half the refresh rate!\nthumby.display.setFPS(90)\n\n# Convert the list to a bytearray and use the first \n# element as an x position and the second as a y\nmyPlayerPos = bytearray([0, 0])\ntheirPlayerPos = bytearray([0, 0])\n\nwhile True:\n    # Move player but do not check screen \n    # bounds, also send on button press\n    if thumby.buttonU.pressed():\n        myPlayerPos[1] -= 1\n        thumby.link.send(myPlayerPos)\n    elif thumby.buttonD.pressed():\n        myPlayerPos[1] += 1\n        thumby.link.send(myPlayerPos)\n    elif thumby.buttonL.pressed():\n        myPlayerPos[0] -= 1\n        thumby.link.send(myPlayerPos)\n    elif thumby.buttonR.pressed():\n        myPlayerPos[0] += 1\n        thumby.link.send(myPlayerPos)\n\n    # Draw the squares\n    thumby.display.fill(0)\n    thumby.display.drawFilledRectangle(myPlayerPos[0], myPlayerPos[1], 2, 2, 1)\n    thumby.display.drawFilledRectangle(theirPlayerPos[0], theirPlayerPos[1], 2, 2, 1)\n    thumby.display.update()\n\n    received = thumby.link.receive()\n\n    # Check that data was received and then\n    # assign it to the other player's square\n    if received != None:\n        theirPlayerPos = received\n</code></pre> The issue in the above script is that <code>thumby.link.send(...)</code> is only called when a button is pressed rather than every frame. This means at least one Thumby will have data ready to be sent, but it can't because it hasn't gotten a response.</p> <p>Trying to send data every frame, even if it will be ignored, is a way to ensure each Thumby is able to send data as soon as possible.</p>"},{"location":"API/Link/#debugging","title":"Debugging","text":"<p>Sometimes it is necessary to see what crashed a game; however, with the Thumbys connected to each other, there is no way to see the output on a shell. There are two ways to debug your game</p> <ol> <li>Step through your code by placing calls to a draw function until the place just before execution stops is found. For example, place <code>thumby.display.drawText(...)</code> and <code>thumby.display.update()</code> at various places in the code - the instance that does not display on the screen is a hint to where the script crashes</li> <li>Wrap the code in a <code>try</code> and <code>except</code> block then write the exception to a file. For example,</li> </ol> <p><pre><code>import thumby\n\ntry:\n    # Code that crashes\nexcept Exception as e:\n    f = open(\"/crash.log\", \"w\")\n    f.write(str(e))\n    f.close()\n</code></pre> This will not print the full traceback, but the file can be opened to see the exception message.</p>"},{"location":"API/Pixels/","title":"Get and Set Pixels","text":"<p>If you need to plop a few pixels on the screen, but don't want to go to the hassle of initializing a sprite just for a dot, this section is for you!</p> <p>Setting and getting the state of pixels can be useful for effects like snow, rain, or stars</p> <p><code>thumby.display.setPixel(x, y, color)</code> | sets pixel to <code>color</code> at <code>x</code> and <code>y</code>. Returns None, all parameters required.</p> <ul> <li><code>x</code><ul> <li>type: int</li> <li>values: 0 (left) ~ 71 (right)</li> </ul> </li> <li><code>y</code><ul> <li>type: int</li> <li>values: 0 (top) ~ 39 (bottom)</li> </ul> </li> <li><code>color</code><ul> <li>type: int</li> <li>values: 0 or 1 -- where 0 is black or an unlit pixel, and 1 is white or a lit pixel</li> </ul> </li> </ul> <p><code>thumby.display.getPixel(x, y)</code> | gets value of pixel at <code>x</code> and <code>y</code>. Returns int (0 or 1), all parameters required.</p> <ul> <li><code>x</code><ul> <li>type: int</li> <li>values: 0 (left) ~ 71 (right)</li> </ul> </li> <li><code>y</code><ul> <li>type: int</li> <li>values: 0 (top) ~ 39 (bottom)</li> </ul> </li> </ul>"},{"location":"API/Pixels/#example","title":"Example","text":"<p>    Five pixels located in the 4 corners and the center of the screen </p> <pre><code>import thumby\n\nthumby.display.fill(0)\nthumby.display.setPixel(0, 0, 1)\nthumby.display.setPixel(71, 0, 1)\nthumby.display.setPixel(0, 39, 1)\nthumby.display.setPixel(71, 39, 1)\nthumby.display.setPixel(36, 20, 1)\nthumby.display.update()\n\nif (thumby.display.getPixel(0, 0) == 1):\n    print(\"Pixel 0, 0 is white\") # print to shell\n\nif (thumby.display.getPixel(1, 1) == 0):\n    print(\"Pixel 1, 1 is black\")\n</code></pre>"},{"location":"API/Rectangles/","title":"Draw Rectangles","text":"<p><code>thumby.display.drawFilledRectangle(x, y, w, h, color)</code> | creates filled rectangle with <code>color</code> at <code>x</code> and <code>y</code> with dimensions <code>w</code> (width) and <code>h</code> (height). Returns None, all parameters required.</p> <ul> <li><code>x</code></li> <li>type: int</li> <li>values: 0 (left) ~ 71 (right)</li> <li><code>y</code></li> <li>type: int</li> <li>values: 0 (top) ~ 39 (bottom)</li> <li><code>w</code></li> <li>type: int</li> <li>values: 0 ~ 71</li> <li><code>h</code></li> <li>type: int</li> <li>values: 0 ~ 39</li> <li><code>color</code></li> <li>type: int</li> <li>values: 0 or 1</li> </ul>  <p><code>thumby.display.drawRectangle(x, y, w, h, color)</code> | creates 1px thick outline rectangle with <code>color</code> at <code>x</code> and <code>y</code> with dimensions <code>w</code> (width) and <code>h</code> (height) (thickness not variable). Returns None, all parameters required.</p> <ul> <li><code>x</code></li> <li>type: int</li> <li>values: 0 (left) ~ 71 (right)</li> <li><code>y</code></li> <li>type: int</li> <li>values: 0 (top) ~ 39 (bottom)</li> <li><code>w</code></li> <li>type: int</li> <li>values: 0 ~ 71</li> <li><code>h</code></li> <li>type: int</li> <li>values: 0 ~ 39</li> <li><code>color</code></li> <li>type: int</li> <li>values: 0 or 1 -- where 0 is black or an unlit pixel, and 1 is white or a lit pixel</li> </ul>"},{"location":"API/Rectangles/#rectangles-example-filled-and-not-filled","title":"Rectangles Example: Filled and not Filled","text":"<p>When drawing Rectangles, it may be helpful to use the <code>thumby.display.width</code> and <code>thumby.display.height</code> member variables for the screen width (72), and the height (40). Otherwise, you can do the math yourself. This example uses both methods to draw three different rectangles:</p> <p>    Three rectangles - outer edge rectangle only visible when using this website's dark mode </p> <pre><code>import thumby\n\nthumby.display.fill(0) # Fill canvas to black\n\n# Draw a rectangle around the edge of the screen\nthumby.display.drawRectangle(0, 0, thumby.display.width, thumby.display.height, 1)  # (x, y, w, h, color)\n# Draw a rectangle in the middle of the screen\nthumby.display.drawRectangle(15, 10, 40, 20, 1)  # (x, y, w, h, color)\n# Draw a smaller, filled rectangle inside the other rectangle\nthumby.display.drawFilledRectangle(20, 15, 30, 10, 1)  # (x, y, w, h, color)\n\n# Update display\nthumby.display.update()\n</code></pre>"},{"location":"API/Save-Files/","title":"Save Game Data","text":"<p>So you want to keep track of your high score in a Thumby game, or you want to save some game data to pick up where you left off? Look no further than this section of the API! </p> <p>The save methods available from the thumby API: </p> <p><code>thumby.saveData.setName(subdirectoryName)</code> | creates a persistent.json file for save data to Saves/<code>subdirectoryName</code>/persistent.json</p> <ul> <li><code>subdirectoryName</code><ul> <li>type: string</li> <li>value: use the name of your .py game file to keep the Saves/ directory clearly organized per game. </li> </ul> </li> </ul> <p>Note: The /persistent.json save file created under the <code>subdirectoryName</code> will persist in the Saves/ directory when updating the game, or removing the game from the Thumby. So, you can feel safe removing games and trying out different games from the Thumby Arcade while maintaining saved game data.</p>  <p><code>thumby.saveData.setItem(key, value)</code> | set a save entry under the <code>key</code> string name with <code>value</code> variable</p> <ul> <li> <p><code>key</code></p> <ul> <li>type: string</li> <li>value: name of the game data or variable you wish to save in Saves/<code>subdirectoryName</code>/persistent.json</li> </ul> </li> <li> <p><code>value</code></p> <ul> <li>type: bytearray, bytes, float, integer, list (all elements need to be the same type and in this list), string, tuple (all elements need to be the same type and be in this list)</li> <li>value: save data you wish to keep throughout different game plays </li> </ul> </li> </ul>  <p><code>thumby.saveData.getItem(key)</code> | get a save entry under <code>key</code> string name. Returns <code>value</code> saved at <code>key</code>.</p> <ul> <li><code>key</code><ul> <li>type: string</li> <li>value: name of the game data or variable you wish to retrieve data from in Saves/<code>subdirectoryName</code>/persistent.json</li> </ul> </li> </ul>  <p><code>thumby.saveData.hasItem(key)</code> | check if save entry under <code>key</code> string name exists. Returns true if <code>key</code> exists, returns false otherwise.</p> <ul> <li><code>key</code><ul> <li>type: string</li> <li>value: match the string value of the data entry previously set</li> </ul> </li> </ul>  <p><code>thumby.saveData.delItem(key)</code> | delete save entry under <code>key</code> string name. Returns none.</p> <ul> <li><code>key</code><ul> <li>type: string</li> <li>value: match the string value of the data entry previously set</li> </ul> </li> </ul>  <p><code>thumby.saveData.save()</code> | write all set save data to persistent.json save file</p> <p><code>thumby.saveData.getName()</code> | returns the current save path</p>"},{"location":"API/Save-Files/#save-high-score-example","title":"Save high score example","text":"<p>For this short program, we'll use two buttons:</p> <ul> <li>A - Increases the high score</li> <li>B - Saves and quits \"game\" to the Thumby main game menu (on the hardware)</li> </ul> <pre><code>import thumby\nimport time    # added for delay at end of program\n\n# Create a save file titled HighScore to match game .py name\n# This will save a persistent.json file with save data to Saves\\HighScore\\persisten.json\nthumby.saveData.setName(\"HighScore\")\n\n# Game variables\nnewScore = 0\nhighScore = 0\n\nif (thumby.saveData.hasItem(\"highscore\")):\n    highScore = int(thumby.saveData.getItem(\"highscore\"))\n\nif(newScore &gt; highScore):\n    thumby.saveData.setItem(\"highscore\", newScore)\n    thumby.saveData.save()\n\nwhile(True):\n    # Print the save contents\n    thumby.display.fill(0)\n    thumby.display.drawText(\"High Score: \" + str(highScore), 3, 0, 1)\n    thumby.display.drawText(str(highScore), 30, 10, 1)\n    thumby.display.drawText(\"New Score: \", 5, 20, 1)\n    thumby.display.drawText(str(newScore), 30, 30, 1)\n    thumby.display.update()\n\n    # A button increases the score\n    if(thumby.buttonA.justPressed()):\n        newScore += 1\n\n    # B button saves and quits\n    if(thumby.buttonB.justPressed()):\n        thumby.display.fill(0)\n        # If we're done playing, check if high score is bigger and save it\n        if(newScore &gt; highScore):\n            thumby.display.drawText(\"New High\", 10, 0, 1)\n            thumby.display.drawText(\"Score!: \" + str(newScore), 7, 10, 1)\n            thumby.saveData.setItem(\"highscore\", newScore)\n            thumby.saveData.save()\n        thumby.display.drawText(\"Saved &amp; quit\", 0, 30, 1)\n        thumby.display.update()\n\n        # Exit to game menu\n        time.sleep(2) # delay game for a few seconds so player can read closing message\n        thumby.reset()\n</code></pre> <p>As the program is written, you can save the above code in a file named \"HighScore.py\" and add the file under the Games folder on Thumby. Note: Emulating this code in the Thumby Code Editor won't display the high score from the save file - test this program on the Thumby hardware for functionality.</p>"},{"location":"API/Sprites/","title":"Sprites","text":""},{"location":"API/Sprites/#sprite","title":"Sprite","text":"<p><code>thumby.Sprite(width, height, bitmapData, x, y, key, mirrorX, mirrorY)</code> | initialize sprite object with fixed frame <code>width</code> and <code>height</code> for frames in <code>bitmapData</code>, positioned at <code>x</code> and <code>y</code>, and rendered to screen mirrored depending on, <code>mirrorX</code> and <code>mirrorY</code>. Transparent pixels are defined by <code>key</code> (e.g. <code>key = 0</code> means black pixels are not drawn/are transparent). Returns Sprite.</p> <ul> <li><code>width</code><ul> <li>type: int</li> <li>values: 0 ~ integer max</li> </ul> </li> <li><code>height</code><ul> <li>type: int</li> <li>values: 0 ~ integer max</li> </ul> </li> <li><code>bitmapData</code><ul> <li>type: list or string</li> <li>values: bytearray of VLSB data or string (128 ASCII character at max 256 characters long) pointing to binary file location of pixel data</li> </ul> </li> <li><code>x</code><ul> <li>type: int</li> <li>values: 0 (left) ~ 71 (right) (default: 0)</li> </ul> </li> <li><code>y</code><ul> <li>type: int</li> <li>values: 0 (top) ~ 39 (bottom) (default: 0)</li> </ul> </li> <li><code>key</code><ul> <li>type: int</li> <li>values: 0 or 1 (default: -1, both black and white pixels drawn)</li> </ul> </li> <li><code>mirrorX</code><ul> <li>type: int</li> <li>values: 0 (do not mirror) or 1 (do mirror) (default: 0)</li> </ul> </li> <li><code>mirrorY</code><ul> <li>type: int</li> <li>values: 0 (do not mirror) or 1 (do mirror) (default: 0)</li> </ul> </li> </ul>  <p><code>Sprite.getFrame()</code> | gets the current frame index of the sprite animation. Return int, automatically returns wrapped index if index greater than max number of frames.</p>  <p><code>Sprite.setFrame(frame)</code> | sets the current <code>frame</code> index of the sprite animation. Needs to be used manually to progress animation, frame rate handled by <code>thumby.display.update()</code>. Returns none, all parameters required.</p> <ul> <li><code>frame</code><ul> <li>type: int</li> <li>values: 0 ~ overflow (values larger than the number of frames get wrapped)</li> </ul> </li> </ul>"},{"location":"API/Sprites/#sprite-example-shapes-more","title":"Sprite example: Shapes &amp; More!","text":"<p>The Thumby API has a builtin function for drawing rectangles, but there's nothing built in for other shapes. To draw other shapes like triangles or circles, you can use the Sprite class! You can draw any shape or object or even scenery using the Sprite class.</p> <p>    Background, and small Sprite examples! </p> <pre><code># Written by: Laver\u00e9na Wienclaw, Feb 2022\nimport thumby\n\n# Small bitmaps: width: 8, height: 8\ntriangleMap = bytearray([128,192,160,144,136,132,130,255])\ncircleMap = bytearray([60,66,129,129,129,129,66,60])\ncactusMap = bytearray([0,24,16,255,255,4,6,0])\nshipMap = bytearray([195,231,189,219,102,36,60,24])\nmeteorMap = bytearray([28,122,126,223,175,223,118,60])\ncatMap = bytearray([28,242,242,48,48,254,252,14])\n# Long bitmaps for background: width: 72, height: 14\nmoonStarsMap = bytearray([0,4,10,4,224,240,248,248,24,8,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,0,0,0,2,0,0,0,0,0,64,160,64,0,0,0,0,0,8,0,0,0,64,0,0,0,2,0,0,0,16,40,16,0,0,0,0,0,0,0,4,0,0,0,\n            0,8,0,0,0,1,3,3,3,2,0,32,0,0,0,0,0,0,1,0,0,32,0,0,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,16,40,16,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,16,0,0,0,0,0,0])\ngrassMap = bytearray([240,192,0,128,0,0,240,128,192,176,96,128,128,224,128,0,224,128,128,192,128,0,240,0,128,224,128,0,128,224,192,0,192,192,0,224,192,96,128,0,240,0,128,0,192,0,192,0,128,224,128,192,112,208,128,112,160,0,0,96,192,120,192,128,192,128,192,240,224,32,252,112,\n            61,62,63,61,62,63,62,59,63,62,63,61,63,63,61,61,62,63,63,63,63,62,63,63,63,62,62,63,61,63,63,63,61,63,59,63,59,54,61,63,56,63,59,63,63,63,63,62,61,62,63,63,62,62,63,63,57,63,56,63,61,62,63,63,63,61,62,58,57,63,63,63])\n\n# Create Sprite objects using bitmaps\ntriangleSpr = thumby.Sprite(8, 8, triangleMap, 6, 16)\ncircleSpr = thumby.Sprite(8, 8, circleMap, 16, 16)\ncactusSpr = thumby.Sprite(8, 8, cactusMap, 26, 16)\nshipSpr = thumby.Sprite(8, 8, shipMap, 36, 16)\nmeteorSpr = thumby.Sprite(8, 8, meteorMap, 46, 16)\ncatSpr = thumby.Sprite(8, 8, catMap, 56, 16)\nmoonSpr = thumby.Sprite(72, 14, moonStarsMap, 0, 0)\ngrassSpr = thumby.Sprite(72, 14, grassMap, 0, 26)\n\nthumby.display.fill(0) # Fill canvas to black\n\n# Draw sprites and update display\nthumby.display.drawSprite(triangleSpr)\nthumby.display.drawSprite(circleSpr)\nthumby.display.drawSprite(cactusSpr)\nthumby.display.drawSprite(shipSpr)\nthumby.display.drawSprite(meteorSpr)\nthumby.display.drawSprite(catSpr)\nthumby.display.drawSprite(moonSpr)\nthumby.display.drawSprite(grassSpr)\n\nthumby.display.update()\n</code></pre>"},{"location":"API/Text-and-Font/","title":"Text &amp; Font","text":"<p>The Thumby screen is small at its 0.42\" size, but you can still add perfectly readable text for game dialog, menus, rules, etc - you just won't be able to comfortably fit novels of text.</p>"},{"location":"API/Text-and-Font/#printing-text","title":"Printing Text","text":"<p>Text is important for communication, scores, and displaying the title of a game.</p> <p><code>thumby.display.drawText(string, x, y, color)</code> | draws <code>string</code> in <code>color</code> at <code>x</code> and <code>y</code> with font specified by <code>thumby.display.setFont(...)</code>. Returns None, all parameters required.</p> <ul> <li><code>string</code></li> <li>type: str</li> <li>values: 128 ASCII characters</li> <li><code>x</code></li> <li>type: int</li> <li>values: 0 (left) ~ 71 (right)</li> <li><code>y</code></li> <li>type: int</li> <li>values: 0 (top) ~ 39 (bottom)</li> <li><code>color</code></li> <li>type: int</li> <li>values: 0 or 1 -- where 0 is black or an unlit pixel, and 1 is white or a lit pixel</li> </ul>"},{"location":"API/Text-and-Font/#setting-font","title":"Setting Font","text":"<p>You can use any font you would like with the Thumby. The default font on the Thumby is 5\u00d77, but there are also 8\u00d78 and 3\u00d75 fonts included with the Thumby software under the lib/ folder.</p> <p><code>thumby.display.setFont(fontFilePath, width, height, space)</code> | sets the <code>fontFilePath</code> pointing to binary font file with character <code>width</code>, <code>height</code>, and <code>space</code> between characters for use by <code>thumby.display.drawText(...)</code>. Returns None, all parameters required.</p> <ul> <li><code>fontFilePath</code></li> <li>type: string</li> <li>values: 128 ASCII character string up to 256 characters long ('/' separated)</li> <li><code>width</code>:</li> <li>type: int</li> <li>values: 0 ~ integer max</li> <li><code>height</code>:</li> <li>type: int</li> <li>values: 0 ~ integer max</li> <li><code>space</code>:</li> <li>type: int</li> <li>values: 0 ~ integer max</li> </ul>"},{"location":"API/Text-and-Font/#combined-example","title":"Combined Example","text":"<p>This example uses both the drawText() and setFont() functions to show the appearance of the different sized fonts:</p> <p>    5\u00d77, 8\u00d78, and 3\u00d75 font text swapping back and forth on display </p> <pre><code>import thumby\n\nthumby.display.setFPS(1)\n\nwhile(1):\n    thumby.display.fill(0) # Fill canvas to black\n    thumby.display.setFont(\"/lib/font5x7.bin\", 5, 7, 1)\n    thumby.display.drawText(\"Font5x7\", 5, 16, 1)\n    thumby.display.update()\n\n    thumby.display.fill(0)\n    thumby.display.setFont(\"/lib/font8x8.bin\", 8, 8, 1)\n    thumby.display.drawText(\"Font8x8\", 5, 16, 1)\n    thumby.display.update()\n\n    thumby.display.fill(0)\n    thumby.display.setFont(\"/lib/font3x5.bin\", 3, 5, 1)\n    thumby.display.drawText(\"Font3x5\", 5, 16, 1)\n    thumby.display.update()\n</code></pre>"},{"location":"Blockly/Drawing-And-Dynamics/","title":"Drawing and Dynamics","text":"<p>This tutorial will introduce you to the different ways that you can draw and animate sprites and shapes. It will also show you how you can do some basic interactions between players, monsters, projectiles, and the game area.</p> <p>In the process it will combine all these techniques together to provide an example of a bigger game, along with a way to keep all the blocks nicely organized.</p> <p>Let's get started!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#a-game-loop-with-functions","title":"A Game Loop with Functions","text":"<p>We are going to put a lot in this game, and if we don't keep all the blocks nicely organized, they will start to get really hard to work with!</p> <p>We are going to use functions to help organize this game!</p> <p>Functions allow you to collect up a whole bunch of blocks, then run them all from somewhere else. There are two blocks that work together for this. The  block lets you collect up lots of blocks in its mouth, then placing the  block somewhere else, will run all those blocks in that location! Check them out in the Functions category in the toolbox.</p> <p>The \"do something\" name is just an example. You can name it whatever you want, and have as many different functions as you want!</p> <p>Hint: You can use functions to run the same set of blocks in multiple locations by using multiple  blocks.</p> <p>Now we know what functions are, let's see how they can be used in a game loop.</p>  <p>Start off by making a simple game loop. Set it to 60 FPS, set up sending to the display, and add a counter variable that increases by 1 each frame:</p> <p>  </p> <p>Later in this tutorial, we will be adding many different things to render, animate, move about, and check interactions for. If we are not careful, it's going to get really messy!</p> <p>For each game \"thing\" we add, we can wrap up all the blocks for it in a function, then just run those blocks wherever we want.</p>  <p>Here is some example blocks that show you how you can use functions on a game loop to group blocks that set something up, and also to group blocks that do something in the game loop.</p> <p>You don't need to do this step in your game loop, this is just to give you an example!</p> <p>   </p> <p>Now that we know a way we can add things in a nice and organized way, let's get started!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#drawing-with-shapes","title":"Drawing With Shapes","text":"<p>The Graphics category in the toolbox has some blocks that help you draw shapes. You can draw lines, outlines of rectangles and squares, and also solid rectangles and squares!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#lines","title":"Lines","text":"<p>  </p> <p>The block above will draw a line between two locations on the screen, by being given the x and y position of both locations.</p>  <ul> <li>First, make a \"do line\" function.</li> <li>Make it draw two horizontal lines from the middle of both ends of the screen.</li> <li>Put \"do line\" inside your game loop.</li> </ul> <p>   </p>"},{"location":"Blockly/Drawing-And-Dynamics/#changing-proportions","title":"Changing Proportions","text":"<p>Now let's get ready to be able to easily change the width of the lines.</p> <ul> <li>Create a new variable called \"lineWidth\".</li> <li>Make a \"setup line\" function and add it before your game loop starts.</li> <li>Set \"lineWidth\" to \"20\" inside the \"setup line\" function.</li> </ul> <p>  </p>  <p>Next, let's make the lines respect the \"lineWidth\" variable, and also make the lines move! The update to \"lineWidth\" won't actually change anything, but it will allow us to make it shrink later in the tutorial!</p> <p>To animate the lines, we will use some maths to make the y position of the end of each line move vertically across the screen, and then, when it reaches the end of the screen, make it wrap around to the other side. We will make the first line scan downwards, and the second line scan upwards. We can use the \"counter\" variable to drive the animation, and we can divide it by 10 to slow it down.</p> <ul> <li>Update your \"do line\" function so that it respects \"lineWidth\", and animates the lines:</li> </ul> <p>   </p> <p>Try changing \"lineWidth\" and see what happens!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#rectangles","title":"Rectangles","text":"<p>  </p> <p>The block above will draw the outline of a rectangle (or square) with it's top left corner starting at a given x and y location. The rectangle will be drawn with the given width and height.</p>  <p>Let's use a rectangle to draw a border around the screen!</p> <ul> <li>Make a \"do border\" function and add it inside your game loop after \"do line\".</li> <li>Make the \"do border\" function draw a rectangle around the whole screen.</li> </ul> <p>   </p> <p>Neat!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#filled-rectangles","title":"Filled Rectangles","text":"<p>The  block can also draw a solid (filled) rectangle, rather than just an outline! All you need to do is change the \"rectangle\" dropdown to \"filled rectangle\".</p>  <p>Let's use a filled rectangle to draw a box that randomly flips around the screen.</p> <p>First, let's make a box, and set it up so that it can move:</p> <ul> <li>Make a \"setup box\" function, and add it before your game loop starts.</li> <li>Inside \"setup box\", make a new \"boxX\" variable set to 30, and a new \"boxY\" variable set to 0.</li> <li>Make a \"do box\" function, and add it inside your game loop, after \"do border\".</li> <li>Inside \"do box\" draw a filled rectangle starting at the x and y position given by the variables \"boxX\" and \"boxY\", and with width 6 and height 4.</li> </ul> <p>   </p>"},{"location":"Blockly/Drawing-And-Dynamics/#moving-in-random-steps","title":"Moving in Random Steps","text":"<p>Next, let's move the box about randomly!</p> <p>We are going to make the box shift in different directions. First we use a random number between 0 and 1 to decide the direction, horizontally (1) or vertically (0). Based off that, we will move the box in the chosen direction by shifting either \"boxX\" or \"boxY\" the width or height in either direction, or not at all.</p>  <p>To do this, we will use a  block, which gives you two mouths for blocks. The \"do\" mouth runs all the blocks when the condition is true, but we also have the \"else\" mouth, which will run blocks when the condition is not true.</p> <p>To make a  block, first make a  block, and then use the settings  button to transform its shape.</p>  <p>We will also need to make sure that both \"boxX\" and \"boxY\" are constrained so that the whole box fits in the screen.</p> <ul> <li>Make a  block inside the bottom of your \"do box\" function.</li> <li>Add a conditional which checks if a random number from \"0\" to \"1\" is \"1\".</li> <li>Inside the \"do\" mouth, change \"boxX\" by a random integer from \"-1\" to \"1\", multiplied by \"6\".</li> <li>Inside the \"else\" mouth, change \"boxY\" by a random integer from \"-1\" to \"1\", multiplied by \"4\".</li> <li>At the bottom of the \"do box\" function, set both \"boxX\" and \"boxY\" to themselves constrained so that the box stays within the screen area.</li> </ul> <p>   </p> <p>Look and that box dance! That's fast!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#changing-speed","title":"Changing Speed","text":"<p>Maybe that's too fast...</p> <p>Lets slow it down!</p> <p>Because the \"do box\" function is run on every frame of the game loop, the box moves on every frame too! It's nice how the box moves in steps, so we aren't going to shorten the distance the box moves each frame, instead we are going reduce how often the box moves.</p> <p>We still need to draw the rectangle on every frame, but we are going to make it so that the box only moves every 20th frame.</p>  <p>To do this, we are going to use a  block from the Functions category. Usually, when a function runs, it runs all blocks, from top to bottom. The  block lets you leave the function half way down, if a particular condition is true. Don't worry about how this block has two plugs inside it, when you add it to your \"do box\" function, the second plug will automatically disappear!</p>  <p>Let's make the \"do box\" bail out before it moves the block, if it is anything other than every 20th frame:</p> <ul> <li>Add a  block right after where it draws the rectangle.</li> <li>Make the condition be true when the remainder of dividing the \"counter\" by 20 results in anything other than \"0\".</li> </ul> <p>   </p> <p>Now that's a more sensible speed!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#animating-sprites","title":"Animating Sprites","text":"<p>Let's make Sprites move too!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#sprite-movement-and-orientation","title":"Sprite Movement and Orientation","text":"<p>Shapes aren't the only things that can be moved! Sprites can also be moved around the screen, and can even have their pictures mirrored and flipped!</p> <p>Take a look in the Sprites category of the toolbox. In it, you will find the following blocks which allow you to move and reorient Sprites:</p> <ul> <li> - move the Sprite to a new horizontal position.</li> <li> - move the Sprite to a new vertical position.</li> <li> - shift the Sprite left (negative) or right (positive).</li> <li> - shift the Sprite up (negative) or down (positive).</li> <li> - flip the Sprite's image upside down.</li> <li> - mirror the Sprite's image left to right.</li> <li> - get the current x or y position.</li> <li> - get whether the Sprite was flipped (or mirrored) from its original orientation.</li> </ul>  <p>Let's use this to add a \"kite\" Sprite to our game, which bounces around the screen and always points in the direction it's moving:</p> <ul> <li>Download this image to use for the Sprite:   (Kite Sprite Pointing Up/Left 8x8) </li> <li>Make a \"setup kite\" function and a \"do kite\" function\".</li> <li>Add \"setup kite\" to run before your game loop, and add \"do kite\" to run inside your game loop just after \"do box\".</li> </ul> <p>It should look like this:   </p>  <ul> <li>Create a new variable \"kiteDirectionX\", (this will have a value of -1 for left, and 1 for right).</li> <li>Create a new variable \"kiteDirectionY\", (this will have a value of -1 for up, and 1 for down). This will combine with \"kiteDirectionX\" to create diagonal movement.</li> <li>Inside the \"setup kite\" function, do the following:<ul> <li>Create a new \"kite\" Sprite, and load the downloaded kite picture.</li> <li>Move \"kite\" to a starting x position of \"64\".</li> <li>Move \"kite\" to a starting y position of \"32\".</li> <li>Set \"kiteDirectionX\" to a starting value of \"-1\".</li> <li>Set \"kiteDirectionY\" to a starting value of \"-1\".</li> </ul> </li> </ul> <p>It should look like this:   </p>  <ul> <li>Inside the \"do kite\" function, do the following:<ul> <li>Draw the \"kite\" Sprite!</li> <li>Bail out of the function early if the counter is not divisible by \"4\" (this slows down the kite to a quarter of full speed).</li> <li>Move the x position of \"kite\" by the value of \"kiteDirectionX\".</li> <li>Move the y position of \"kite\" by the value of \"kiteDirectionY\".</li> <li>Check if kite has gone off screen to the left and, if it has, change the \"kiteDirectionX\" to \"1\", then mirror the image of \"kite\".</li> <li>Check if kite has gone off screen to the right and, if it has, change the \"kiteDirectionX\" to \"-1\", then mirror the image of \"kite\".</li> <li>Check if kite has gone off screen at the top and, if it has, change the \"kiteDirectionY\" to \"1\", then flip the image of \"kite\".</li> <li>Check if kite has gone off screen at the bottom and, if it has, change the \"kiteDirectionY\" to \"-1\", then flip the image of \"kite\".</li> </ul> </li> </ul> <p>It should look like this:</p> <p>   </p> <p>Now you know how to move Sprites around the screen and also how to flip and mirror the image!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#flip-book-animations","title":"Flip-Book Animations","text":"<p>Sprites can also be animated like a gif!</p> <p>Animated Sprites have multiple frames inside that be switched. This can be used to make animations with a flip-book effect.</p>  <p>To create an animated Sprite, you can use the Bitmap Builder, but instead of drawing one picture, you draw all the different frames of an animation, one after another. Animated Sprites can be any size, but the frames of an animated Sprite must all be the same size, </p> <p>Here is an example of an animated Sprite which makes feet go back and forth like they are walking:</p> <p>  </p> <p>The red boxes are just to help show each different frame in this animated Sprite. You won't see the red lines in the Bitmap Builder itself.</p>  <p>When you load an animated sprite into your workspace, you must you the  block, instead of the  block, and you must specify the number of frames you have in the animated sprite.</p> <p>Here is our example loaded with its \"8\" frames set correctly: </p> <p>If you set this correctly, you will have a Sprite that initially draws the first frame, and which has a width and height of one frame of the animation, rather than all the frames in the line:</p> <p>  </p> <p>Once you have an animated Sprite loaded, you can then switch which frame it draws! Use the  block to switch which frame is drawn. Frame numbers start at 0, and numbers higher than the frame count will wrap around.</p> <p>To actually play the animation in your animated Sprite, you can just increase the frame number by 1 on each cycle of your game loop.</p> <p>Here is an example of our animated Sprite being animated:</p> <p>You don't need to do this step in your game loop, this is just to give you an example!</p> <p>   </p>  <p>Now let's add this animated sprite as a walker Sprite to our game!</p> <ul> <li>Download this image to use for the Sprite:   (Animated Walking 4x8 Sprite with 8 frames) </li> <li>Make a \"setup walker\" function and a \"do walker\" function\".</li> <li>Add \"setup walker\" to run before your game loop, and add \"do walker\" to run inside your game loop just after \"do kite\".</li> </ul> <p>It should look like this:   </p>  <ul> <li>Inside the \"setup walker\" function, do the following:<ul> <li>Create a new \"walker\" Sprite with a  block, and load the downloaded walker animation onto it.</li> <li>Update the frames count to \"8\".</li> </ul> </li> </ul> <p>It should look like this:   </p>  <p>Let's make the \"walker\" Sprite walk up the screen from the bottom, and when goes off the top of the screen, make it wrap around to the bottom, starting at a new random horizontal position.</p> <ul> <li>Inside the \"do walker\" function, do the following:<ul> <li>Draw the \"walker\" Sprite!</li> <li>Bail out of the function early if the counter is not divisible by \"4\" (this slows down the walker to a quarter of full speed).</li> <li>Increase the \"walker\" frame number by 1, by using a  block (from the Sprites category) to get the current frame number from \"walker\", then adding 1 to it before setting it back as the new frame number.</li> <li>Move the y position of \"walker\" by -1 (upwards).</li> <li>Check if the \"walker\" has gone entirely off the top of the screen and, if it has, move it back to a y position of 47 (entirely off the screen at the bottom) and also give it a new random horizontal position.</li> </ul> </li> </ul> <p>It should look like this:    </p> <p>Nice!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#switching-frames","title":"Switching Frames","text":"<p>Animated Sprites can do more than just flip-book animations like a gif does, frame-by-frame. You can also control switching frames in other interesting ways!</p>  <p>It's about time we added a player character to this game! In the process, we can show how you can use animated Sprites in a different way.</p> <p>We are going to make a movable bird that the player can control but which stays within the screen area. The bird will be able to move in any direction, but it will only be able to face left or right. We can use a  block to mirror a sprite to look in the other direction.</p> <p>Let's also make the bird open a mouth at the front whenever either \ud83d\udd34 button is pressed.</p> <p>We can use Animated Sprites for that, and have the first frame be the bird normally, and have the second frame be the bird with it's mouth open. Then we just need to change to the second frame whenever either \ud83d\udd34 button is pressed!</p>  <p>Let's get started!</p> <ul> <li>Download this image to use for the Sprite:   (Bird 8x7 Sprite with 2 frames) </li> <li>Make a \"setup bird\" function and a \"do bird\" function\".</li> <li> <p>Add \"setup bird\" to run before your game loop, and add \"do bird\" to run inside your game loop just after \"do walker\". It should look like this:   </p> </li> <li> <p>Inside the \"setup bird\" function, do the following:</p> <ul> <li>Create a new \"bird\" Sprite with a  block, and load the downloaded bird animation onto it.</li> <li>Make sure the frames count is set to \"2\".</li> <li>Move the x position of the \"bird\" to a starting position of \"32\".</li> <li>Move the y position of the \"bird\" to a starting position of \"18\".</li> </ul> </li> </ul> <p>It should look like this:   </p>  <p>Next let's draw the \"bird\" Sprite and make it open its mouth whenever either  \ud83d\udd34 button is pressed:</p> <ul> <li>Inside the \"do bird\" function, do the following:<ul> <li>Draw the \"bird\" Sprite!</li> <li>Set the frame of the \"bird\" Sprite to be \"1\" if button A or B is held, and \"0\" otherwise.</li> </ul> </li> </ul> <p>It should look like this:    </p>"},{"location":"Blockly/Drawing-And-Dynamics/#controller-movement","title":"Controller Movement","text":"<p>Finally, let's make the \"bird\" Sprite move with the direction controls, making sure to mirror the bird as it faces left or right:</p> <ul> <li>Add the following to the inside of the \"do bird\" function:<ul> <li>Bail out of the function early if the counter is divisible by \"3\" (this slows down the bird to two thirds of full speed).</li> <li>If up is held, move y by \"-1\".</li> <li>If down is held, move y by \"1\".</li> <li>If left is held, move x by \"-1\", and also, if the \"bird\" is currently mirrored, mirror it back.</li> <li>If right is held, move x by \"1\", and also, if the \"bird\" is not currently mirrored, mirror it.</li> <li>Constrain the y position to within the screen vertically.</li> <li>Constrain the x position to within the screen horizontally.</li> </ul> </li> </ul> <p>It should look like this:    </p>"},{"location":"Blockly/Drawing-And-Dynamics/#sprite-transparency","title":"Sprite Transparency","text":"<p>You may have noticed in the last video above, that all the Sprites didn't have any transparency, making their whole rectangle draw black over anything underneath. Transparency is when you can see through parts of a picture. You can see that the bird, kite, and walker don't have transparency when they go over the border.</p> <p>There are two ways to make transparency in Sprites.</p> <p>One way is by selecting either black or white to be the transparent color.</p> <p>The second way allows you to draw white, black, and also transparent pixels. To paint those transparent pixels, you use a second Spite, with white being the pixels of the first Sprite to draw, and black being the pixels to leave transparent. This second Sprite is called a Sprite Mask.</p>"},{"location":"Blockly/Drawing-And-Dynamics/#transparency-by-color","title":"Transparency By Color","text":"<p>First let's give both the kite and the walker some transparency by setting \"black\" to be their transparency color. We can do this by using a  block:</p> <ul> <li> <p>Inside your \"setup walker\" function, also set the transparency of the \"walker\" Sprite to \"black\":   </p> </li> <li> <p>Inside your \"setup kite\" function, also set the transparency of the \"kite\" Sprite to \"black\":   </p> </li> </ul> <p>It should look like this:   </p> <p>Better!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#transparency-by-mask","title":"Transparency By Mask","text":"<p>For the \"bird\" Sprite, it would be nice if it had a thin black border around it to make it easier to see if its edges are over something like the border. We don't want the full Sprite rectangle, just a thin border. So we want white, black, and also transparent pixels.</p> <p>For this, we will use a Sprite Mask.</p> <p>A Sprite Mask controls the drawing of another Sprite by having white pixels indicate that the same pixel in the main Sprite should be drawn.</p> <p>So we are going to need a Sprite Mask for the bird. This will be similar to the \"bird\" Sprite but with the eye filled in white and extra pixels around it also filled white, so they get drawn. To match with the bird, this Sprite will also have 2 frames.</p>  <p>First, let's get the Sprite Mask loaded and ready for drawing:</p> <ul> <li>Download this image to use for the Sprite:   (Bird Mask 8x7 Sprite with 2 frames) </li> <li>Inside your \"setup bird\" function, also do the following:<ul> <li>Load the downloaded Sprite as a new Sprite called \"birdMask\".</li> <li>Make sure the frames count is set to \"2\":   </li> </ul> </li> </ul>  <p>Next, let's apply the \"birdMask\" as the Mask when drawing the \"bird\" Sprite. We can do this by using a  block from the Sprites category.</p> <ul> <li>Replace the  block inside the \"do bird\" function with a  block.</li> <li>Ensure the drawn Sprite is still set to \"bird\".</li> <li>Set \"birdMask\" as the mask Sprite to apply.</li> </ul> <p>We must also remember to change the frame of the \"birdMask\" Sprite, just like we are with the \"bird\" Sprite. We can do that by simply setting the \"birdMask\" frame number to be whatever the frame number is for the \"bird\" Sprite.</p> <p>You can see both changes here:   </p> <p>It should look like this:   </p> <p>We now have Sprites with both kinds of transparency in our game!</p> <p>Pretty!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#working-with-pixels","title":"Working with Pixels","text":"<p>Let's see what we can do with individual pixels!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#drawing-pixels","title":"Drawing Pixels","text":"<p>You can also draw individual pixels, one at a time!</p> <p>The  block from the Graphics category, will draw a pixel at the given x and y position.</p>  <p>Let's draw a pixel to make a bullet that the bird can shoot!</p> <p>The bullet will be able to shoot in either a left or right direction, depending on which way the bird is facing when it shoots. It should shoot out at the mouth position of the bird. It won't actually hit anything yet, but we can get start drawing it!</p> <ul> <li>Make a \"setup bullet\" function and a \"do bullet\" function\".</li> <li>Add \"setup bullet\" to run before your game loop, and add \"do bullet\" to run inside your game loop just after \"do bird\".</li> </ul> <p>It should look like this:   </p>  <ul> <li>Create a new variable \"bulletDirection\", (this will have a value of -1 for left, and 1 for right).</li> <li>Create two new variables for the bullet position, \"bulletX\" and \"bulletY\" (these will start off screen).</li> <li>Inside the \"setup bullet\" function, do the following:<ul> <li>Set \"bulletDirection\" to a starting value of \"1\".</li> <li>Set \"bulletX\" to a starting value of \"-99\".</li> <li>Set \"bulletY\" to a starting value of \"-99\".</li> </ul> </li> </ul> <p>It should look like this:   </p>  <ul> <li>Inside your \"do bullet\" function, do the following:<ul> <li>Use a  block to draw a pixel with x and y positions being the values of the \"bulletX\" and \"bulletY\" variables.</li> <li>Move the bullet by changing the the \"bulletX\" variable by the \"bulletDirection\" value.</li> <li>If button A or B is hit, launch the bullet by doing the following:<ul> <li>Set the \"bulletDirection\" to \"1\" if the \"bird\" is mirrored, otherwise \"-1\".</li> <li>Set \"bulletX\" to the x position of the \"bird\".</li> <li>Set \"bulletY' to the y position of the \"bird\", plus 3 (to come out of the mouth).</li> </ul> </li> </ul> </li> </ul> <p>It should look like this:    </p> <p>Pew! Pew!</p>"},{"location":"Blockly/Drawing-And-Dynamics/#collision-detection-with-pixels","title":"Collision Detection with Pixels","text":"<p>Now we just need to do some interactions like making the bullet hit things!</p> <p>For this we can use the  block from the Graphics category. Which checks a given x and y position, and gives true for \"white\", and false for \"black\". We can use this to check if a drawn location on the screen is white or black.</p> <p>We can detect if a bullet hits something by checking if its location is already white, before it is drawn!</p>  <p>Let's make the goal of this game be killing the lines on either side of the screen. If the bullet collides with either line, we can shrink the lines, and if the lines disappear, the player wins!</p> <ul> <li>In your game loop, immediately after \"do line\" draws the lines, use a  block to check if the bullet position is white (this means they must have been drawn by the lines). If it is, change the \"lineWidth\" variable by \"-1\" to shorten them.</li> <li>Also check if the \"lineWidth\" is \"0\" and, if it is, display \"YOU WIN!\", wait \"3\" seconds, and the reset:   </li> </ul>  <p>Next let's make it so the bullet disappears if it hits anything except the bird:</p> <ul> <li>In your game loop, just before the bird is drawn by \"do bird\", check if the bullet pixel is already draw and, if it is, set \"bulletY\" to \"-99\", so it moves off screen:    </li> </ul>  <p>Now let's make the challenge of this game be avoiding all the shapes!</p> <p>Before we draw the bird, we can check if the center pixel of the \"bird\" is already drawn, and if it is, we can GAME OVER!</p> <ul> <li>In your game loop, just before the bird is drawn by \"do bird\", check if the pixel at the center of the bird is already draw and, if it is, display \"GAME OVER!\", wait \"3\" seconds, and the reset:    </li> </ul>"},{"location":"Blockly/Drawing-And-Dynamics/#all-combined","title":"All Combined","text":"<p>Here are all the blocks for all of these things combined together:</p> <p>       </p> <p>You can download all these blocks here.</p>  <p>Next Tutorial: Working with Fonts</p>"},{"location":"Blockly/Making-Sprites/","title":"Making Sprites","text":"<p>It's time to paint some pictures, and load them in your game!</p> <p>This tutorial will introduce you to Sprites in the Thumby Code Editor, and how to load them in your Blockly workspace. It will then show you how to display them in your game, but it won't yet show you how to move them around in your game.</p>  <p>Let's get started!</p> <p>Games sometimes have title screens that display the name of the game, and maybe a picture, just before the game loads. It can be nice way to make the game more pretty, and have more character.</p> <p>We are going to make a title screen for a game (actually for the one we made in the previous tutorial), and show it on screen briefly, by making and display a Sprite.</p>  <p>Sprites are pictures that you can hand draw, or load from a picture file, which you can put in your game, move about, flip, mirror, and even make animations with! For this tutorial, we are just going to make a Sprite that fills the whole screen and display it for a few seconds.</p>"},{"location":"Blockly/Making-Sprites/#drawing-sprites","title":"Drawing Sprites","text":"<p>First let's make a Sprite!</p> <ul> <li>Grab a  block from the Sprites category, and place it into an empty part of your workspace above any other blocks you might have in your workspace.</li> </ul> <p>Putting it higher up makes it run first.</p> <p>We now have a Sprite in our workspace that has been given a default name. Let's change it to something better.</p> <ul> <li>Right click on the dropdown at the end of your  block and click on \"Rename Sprite\".</li> <li>Give it the name \"title\".</li> </ul>  <p>Now let's display it on screen. First, we need to draw it to the next frame, then we need to send the frame to the display.</p> <ul> <li>Grab a  block from the Sprites category and add it underneath your load sprite block.</li> <li>Now add a  combo block underneath that.</li> <li>After that, add a  block from the Flow category to make sure the Sprite shows on the display for a while. Change the value from \"1\" to \"3\" so the Sprite shows on the display for 3 seconds.</li> <li>Run it:</li> </ul> <p>  </p> <p>Sweet!... Wait... Where did that picture come from? All Sprites come with a default picture already loaded. That is what you are seeing there.</p>  <p>\u26a0 Note: Be careful when you delete  blocks, as the picture data they contain will be lost! You can keep a copy of them in the corner of your workspace just to be safe!</p> <p>Our next step is to change the picture!</p>"},{"location":"Blockly/Making-Sprites/#the-bitmap-builder","title":"The Bitmap Builder","text":"<p>Sprites can have their pictures changed using the Bitmap Builder Widget.</p> <p>Let's try to find the Bitmap Builder. It might be next to the Filesystem tab:</p> <p>  </p> <p>Or it might be in the hidden-tab dropdown:</p> <p>  </p> <p>Or you might need to open it again with UTILITIES -&gt; WIDGETS -&gt; + BITMAP BUILDER.</p>  <p>Once you have found it, it should look like this:</p> <p>  </p>"},{"location":"Blockly/Making-Sprites/#loading-sprites-to-the-bitmap-builder","title":"Loading Sprites To The Bitmap Builder","text":"<p>To load a sprite from your workspace into the Bitmap Builder, you use the IMPORT button, but the Bitmap Builder needs to know which Sprite you want to open (you might have more than one), so you must make sure a  block is selected in your workspace.</p> <ul> <li>Select the  block in your workspace for the \"title\" Sprite.</li> <li>Click IMPORT.</li> </ul> <p>You should see the Thumby Sprite loaded:</p> <p>  </p>"},{"location":"Blockly/Making-Sprites/#updating-sprites-on-the-workspace","title":"Updating Sprites on the Workspace","text":"<p>First, we make some changes to the Sprite picture, then we update the Sprite back on our workspace.</p> <ul> <li>Click INVERT which will swap the colors.</li> <li>Make sure the  block in your workspace is still selected.</li> <li>Click EXPORT.</li> </ul> <p>You should see that the pictures in the  blocks update:</p> <p>  </p> <p>Nice!</p> <ul> <li>Now run it!</li> </ul> <p>  </p> <p>Title screens look best when they fill the whole screen and where they have been customized for the game. Let's do both next.</p>"},{"location":"Blockly/Making-Sprites/#using-the-bitmap-builder-to-paint","title":"Using the Bitmap Builder to Paint","text":"<p>First, let's make the Sprite the same size as the screen. The Thumby screen is 72 pixels wide, and 40 pixels high.</p>"},{"location":"Blockly/Making-Sprites/#resizing-sprites","title":"Resizing Sprites","text":"<p>\u26a0 Note: Resizing your sprite will clear its contents. Don't resize your picture unless you don't mind losing it, or unless you have stored it back in your workspace.</p> <ul> <li>Click SIZE.</li> <li>Enter 72 for the width and click OK.</li> <li>Enter 40 for the height and click OK.</li> </ul> <p>You should now have a blank white drawing area with lots more pixels!</p> <p>\u26a0 Note: The Bitmap Builder has a maximum image size of 144 wide, and 80 tall, which is much larger than the Thumby screen!</p>"},{"location":"Blockly/Making-Sprites/#drawing","title":"Drawing","text":"<p>To draw on the picture, use the mouse Left Click to draw black pixels, and use Right Click to draw white pixels. You can drag across the screen to scribble.</p> <p>If you want to start over, use the CLEAR button to reset the whole picture to white.</p> <p>To zoom in and out of the picture, use the \u2295 and \u2296 buttons.</p>"},{"location":"Blockly/Making-Sprites/#opening-image-files-from-your-computer","title":"Opening Image Files From Your Computer","text":"<p>You can use the IMAGE button to open files from your computer. They will be automatically converted to black and white. The image file you open must not be larger than 144 wide and 80 high. Most image file formats will work.</p> <ul> <li> <p>Try downloading the image to your computer and loading into the Bitmap Builder with the IMAGE button. Download this image:   (Speed Buzzer Title Sprite 72x40) </p> </li> <li> <p>Now update the Sprite in your workspace with EXPORT and then run it with START to see what happens!</p> </li> </ul> <p>  </p>  <p>Next Tutorial: Drawing and Dynamics</p>"},{"location":"Blockly/Publish-Your-Game/","title":"Publish Your Game","text":"<p>So far, we've only shown you how to test your games in the emulator, or run tests on a connected Thumby. It's about time we showed you how to properly load your games onto the Thumby, and also how you share them with others!</p> <p>In this tutorial, you will learn how to load a game onto your Thumby so you can play it when it's disconnected, as well as how to convert all the blocks you make into MicroPython, make demo videos, share your game with others, and how to submit it to the Arcade where everyone can find it! If you do submit your game to the Arcade, we can even show you how to share it with friends on the playable Online Emulator!</p>  <p>For this tutorial, we will use the demo program that is loaded by default. If you don't have that open, you can always re-open it with UTILITIES -&gt; WIDGETS -&gt; + BLOCKLY EDITOR.</p>"},{"location":"Blockly/Publish-Your-Game/#naming-your-game","title":"Naming Your Game","text":"<p>To share your game, you have to name it first! Try to think of something catchy!</p> <p>Your game can contain uppercase and lowercase letters, numbers, and underscores (<code>_</code>). There are also some symbols you can use such as <code>&amp;</code> and <code>!</code>. Take a look on the Arcade for how some other games are named.</p> <p>As an example, let's use the name \"HelloBlockly\".</p> <p>To properly name your game, you must set the path of the Blockly file so that it matches a specific convention.</p> <p>The path must follow the convention: <code>/Games/MyGameName/MyGameName.py</code></p> <p>\u26a0 Note: Your game name should not have any spaces in it. Please use underscores (<code>_</code>) instead of spaces</p> <p>\u26a0 Note: If you don't name it correctly, the Thumby menu won't be able to find your game and launch it!</p>  <p>Try changing the Game Name below to see what you should put for the Set Path:</p> <p>Game Name:   Set Path: <code>/Games/HelloBlockly/HelloBlockly.py</code></p>  <p>You can set the path of the Blockly file easily using the menu that is above the Blockly work area. Use FILE -&gt; SET PATH</p> <ul> <li>Set your Path to match the convention including your game name:</li> </ul> <p>  </p>"},{"location":"Blockly/Publish-Your-Game/#saving-to-your-thumby","title":"Saving To Your Thumby","text":"<p>Now that you have your game named correctly, you are ready to save it to your Thumby!</p> <ul> <li>Make sure your Thumby is connected correctly, just like when you run FAST EXECUTE (see here for details).</li> <li>Save your game to your Thumby from the menu above the Blockly work area: FILE -&gt; SAVE TO THUMBY.</li> </ul> <p>  </p> <ul> <li>Now disconnect your Thumby.</li> <li>Turn it off, then on again.</li> <li>Use the down \u21e9 arrow to find your game and select it.</li> <li>Press either \ud83d\udd34 button to launch your game!</li> </ul>"},{"location":"Blockly/Publish-Your-Game/#troubleshooting","title":"Troubleshooting","text":"<p>\u26a0 Note: It's best if games have a good way to get back to the menu without having to turn off the Thumby and then turn it on again. Try to put some way for that to happen. You can use the  block from the Hardware category to reset to the menu.</p> <p>\u26a0 Note: When running via FAST EXECUTE, the Thumby will run at a higher performance speed compared to when run from the Thumby start menu screen. If you find that your game runs at a different speed compared to when running via FAST EXECUTE, try setting the Thumby to the faster performance by placing a  block, from the Hardware category, at the start of your program. This block defaults to the same speed that FAST EXECUTE runs at.</p> <p>\u26a0 Note: The emulator can be slow on some machines, and your code may run much faster on the Thumby hardware compared to on the emulator. If your game runs faster on the Thumby, compared to on the emulator, make sure you set the frame rate with a  block. Any value should help them run at the same speed!</p>"},{"location":"Blockly/Publish-Your-Game/#converting-blocks-to-micropython","title":"Converting Blocks To MicroPython","text":"<p>So far, you've learned all about Block programming on the Thumby. The Thumby can be programmed in other coding languages too, like MicroPython! That is one of the coding languages where you type in text code to make games.</p> <p>And behind the scenes... that's exactly what the blocks are doing!</p> <p>The Thumby doesn't actually understand the blocks, instead, all the blocks create little snippets of MicroPython code, and combine together to make a full MicroPython program that the Thumby can understand! It's just all been happening automatically!</p> <p>You've been programming in MicroPython all along!</p> <p>You can see the MicroPython code you have created while you have been block programming, by clicking the OPEN PYTHON button at the top of your Blockly work area.</p> <p>The OPEN PYTHON button will launch a new editor tab with MicroPython text coding mode, and load the MicroPython created from your block programming. You can always get back to your block program by switching back to that editor tab.</p> <p>\u26a0 Note: If you make changes to the MicroPython code, those changes won't be made back in your blocks. It only goes one way!</p> <p>Try re-opening the MicroPython code when you make changes to your blocks to see what happens!</p>"},{"location":"Blockly/Publish-Your-Game/#sharing-your-game","title":"Sharing Your Game","text":"<p>If you build a game, what better thing to do than to let someone play it and see what you made!</p> <p>There are a number of ways of sharing your work, including recording a demo video, sending friends the code to try themselves, getting feedback from the Thumby community (TInyCircuits Discord), to upload your game to the Thumby Arcade! If you get it on the Arcade, you can even share it with friends with the Online Emulator!</p>"},{"location":"Blockly/Publish-Your-Game/#making-a-demo-video","title":"Making a Demo Video","text":"<p>When sharing your game, it's super nice to include a demo video. Then people can know a bit about what they are going to look at. It's a great way to get people excited to try your game!</p> <p>It's really easy to record a demo video for your game, as the emulator comes with a screen recorder!</p> <p>To record a video, follow these steps:</p> <ul> <li>Set the zoom level to 8x or higher with the \u2295 and \u2296 buttons. The bigger the zoom, the bigger your video will be.</li> <li>Run your game with START.</li> <li>Press the \ud83c\udfa5 button to start recording (second down from the top left of the emulator). The button should turn red to show that you are now recording.</li> <li>Play the game however you want.</li> <li>Press the \ud83c\udfa5 button again to end the recording and automatically start downloading the video.</li> <li>Find the video in your downloads, and play it! It should show up in your Downloads folder with a name like <code>emulator_video.webm</code>.</li> </ul> <p>  </p>"},{"location":"Blockly/Publish-Your-Game/#sharing-with-the-community","title":"Sharing With The Community","text":"<p>Now that you have a  MicroPython file, and a demo video, you might want to head over to the #thumby TInyCircuits Discord community and post them both! We love seeing what everyone makes!</p> <p>To download the MicroPython file just use FILE -&gt; EXPORT TO PC, found in the menu at the top of the MicroPython text area after you have used the OPEN PYTHON button to open the Python.</p>"},{"location":"Blockly/Publish-Your-Game/#submitting-to-the-arcade","title":"Submitting to the Arcade","text":"<p>To submit to the Arcade, you will need both the demo video and the MicroPython file (see above for both). Once you have both you can follow the process described here.</p>"},{"location":"Blockly/Publish-Your-Game/#playing-your-arcade-game-online","title":"Playing Your Arcade Game Online","text":"<p>There is a playable online Thumby emulator!</p> <p>\u26a0 Note: The emulator can be really slow on some devices!</p> <p>Head on over to the Online Emulator which comes pre-loaded with every game on the Arcade!</p> <p>If you submitted a game to the Arcade, yours will be here too!</p>  <p>You can also send people links directly to Arcade games! See below for all the links. Yours will be here too when it is submitted! (you can share these with friends!):</p>   <p>\u26a0 Note: Some games do fancy hardware tricks in MicroPython and might not work on the emulator. All Blockly ones should though!</p>"},{"location":"Blockly/Saving-High-Scores/","title":"Saving High Scores","text":"<p>In this tutorial we will show you how to save persistent data on your Thumby, so you can store information like high scores and save games for the next time you play.</p>  <p>You may have noticed that whenever you restart a game, all the variables and data is reset to their original values. It can be useful to be able to save data that persists even after you restart the Thumby device.</p> <p>Take a look at the Saves category in the Blockly toolbox. In there, you will find blocks that help you save data for things like high scores and save games.</p>"},{"location":"Blockly/Saving-High-Scores/#save-data-blocks","title":"Save Data Blocks","text":"<p>Here are some of the blocks you can use:</p> <ul> <li> - A conditional which checks if there was a previous data save.</li> <li> - Retrieve the previous data save.</li> <li> - Save some data.</li> </ul>"},{"location":"Blockly/Saving-High-Scores/#how-they-work","title":"How They Work","text":"<p>You will notice that all these blocks default to saving a \"high score\" save. This \"high score\" is the name of what you are saving, and \"high score\" is just the example! You can have lots of different kinds of save data by changing \"high score\" to any save name you want!</p>  <p>Data that you save with the  block will be retrievable by any  block with a matching save name. It will still be there even after the game restarts!</p> <p>\u26a0 Note: Save data won't persist after a restart when running in the Emulator. Save data only persists after restart when running on a real Thumby device, like with FAST EXECUTE.</p>  <p>When a game runs, and it wants to retrieve some kind of save game data, it needs to know whether the save data even exists. If it's running for the first time, there won't be any saved data! The  block is helpful for checking if saved data exists.</p> <p>Here is a group of blocks which will retrieve some saved data, but if it doesn't exist, it will give a default value of 0:</p> <p>  </p>"},{"location":"Blockly/Saving-High-Scores/#example","title":"Example","text":"<p>Here is an example set of blocks which will first retrieve any saved \"high score\", and print it to the display. Then it will update it to 99, wait for a second, then display it again:</p> <p>  </p> <p>It doesn't check if the saved data exists the second time that it gets the saved data, because it just saved that data, so it must exist!</p>"},{"location":"Blockly/Saving-High-Scores/#first-run","title":"First Run","text":"<p>The first time that you run it, you will see the default 0 value for one second...</p> <p>  </p> <p>... and then the saved 99 \"high score\" data.</p> <p>  </p>"},{"location":"Blockly/Saving-High-Scores/#second-run","title":"Second Run","text":"<p>The second time that you run it (if you are running it on a real Thumby device), you will see the saved 99 \"high score\" data right from the start!</p> <p>  </p>  <p>Next Tutorial: Publish Your Game</p>"},{"location":"Blockly/Simplest-Game/","title":"The Simplest Game","text":"<p>It's time to make your first game!</p> <p>This tutorial will walk you through creating a very simple (but quite fun) little game. In the process it will teach you a few basics about game development on the Thumby, and get you comfortable placing and arranging all kinds of blocks.</p>  <p>Let's get started!</p> <ul> <li>Clean your workspace so you are starting fresh. You can open a new workspace in a new Blockly editor tab with FILE -&gt; NEW BLOCKLY TAB.</li> <li>Make sure your workspace is set to run in the emulator by checking both EMULATION: \u2705 \u2705 checkboxes.</li> </ul>"},{"location":"Blockly/Simplest-Game/#the-game-loop","title":"The Game Loop","text":"<p>Most games are built with a set of repeating instructions which keep repeating continuously until the game ends. These repeating instructions follow these main steps:</p> <ul> <li>Move things around.</li> <li>Draw a picture of the moved things.</li> <li>Show the picture on the display.</li> <li>Repeat these steps again.</li> </ul> <p>These repeating sets of instructions are sometimes called the main game loop. It's called a loop because it \"loops\" over and over again continuously. Each new drawn picture that is sent to the display is called a frame. That's where the term frames per second (or FPS) comes from. Games that run at 60fps will move things around and then send a new drawn frame to the display 60 times every second.</p> <p>\u26a0 Note: The display won't actually show what is drawn on a frame until you send the frame to the display. Any block that ends with \".. to display\" will do that for you.</p>  <p>Let's start making our own game loop.</p> <ul> <li>Place a  block from the Loops category into your workspace.</li> </ul> <p>We want the loop to keep running forever, and this repeat block only loops while a condition is true. That condition gets put into the little plug after where it says \"while\". There are all sorts of conditions you can make from blocks in the Logic category, but we are going to use the simplest one.</p> <ul> <li>Take a  block from the Logic category, and plug it into the  block in your workspace. It should now look like this:</li> </ul> <p>  </p> <p>This sets up a game loop that will keep repeating forever (or until you click STOP, or turn off the Thumby). This loop now needs some blocks inside, so that it has something to do each time it loops.</p> <p>We are going to want to makes some things, move them around, and then draw and display each frame. First, let's draw and show something, and then worry about moving it around afterwards. Let's show a character of text on screen.</p>"},{"location":"Blockly/Simplest-Game/#drawing-and-then-updating-the-display","title":"Drawing and then Updating the Display","text":"<ul> <li>Take a  block from the Graphics category, and place it inside that mouth part of your  block.</li> <li>Now change the \"Hello World\" text in that block to \"^\".</li> <li>Now grab a new  combo block from the Graphics category, and connect it underneath the  block, but still inside the mouth of the  block.</li> <li>Now see what it does by clicking START.</li> </ul> <p>It should all look like this:</p> <p>  </p> <p>All this is doing, is repeatedly drawing the \"^\" character to the top left position of the frame, then actually showing the frame on the display, and then clearing the next frame to get ready to repeat the whole process again. It may look like that little hat symbol is just sitting there doing nothing, but it is being redrawn many times per second, and it's ready to be moved!</p>"},{"location":"Blockly/Simplest-Game/#moving-things-around","title":"Moving Things Around","text":"<p>Let's try to make it move down.</p> <ul> <li>Change the \"0\" in the \"y\" value of the  block to \"17\".</li> <li>Now run the this again:</li> </ul> <p>  </p> <p>Sadly, that just moved its initial position downwards. We really want to animate it. For that we need to change a position value on the  block on each cycle of the repeat loop. We need to increase one of those numbers every frame. Let's see if we can make it animate moving horizontally by changing that x position value. We want to replace that unchanging \"0\" with something that varies every frame. Fortunately, we can use a Variable for that. Variables act like numbers or text, but they can be changed!</p>  <p>We need to create a variable and give it a name.</p> <ul> <li>Open the Variables category and click on the Create variable... button at the top.</li> </ul> <p>It should ask you to give the variable a name.</p> <ul> <li>Call it \"counter\" and click OK.</li> </ul> <p>Some new blocks should have automatically appeared in the Variables category of the toolbox! These are all the blocks for your new variable called \"counter\".</p>  <p>This counter variable doesn't have any value in the workspace at all... yet! Lets give it a value that increases each frame. The  block can increase the value of the variable by 1 on each frame, and will start it's value at 0 if it hasn't already been set.</p> <ul> <li>Grab a  block from the Variables category and place it inside the mouth of the  block, but this time place it at the top of the mouth, just above all the others that are already inside.</li> </ul> <p>It should now look like this:</p> <p>  </p>  <p>The value of this variable should now be increasing by 1 every frame, but we aren't using it for anything yet! We want to retrieve the value out of \"counter\" on every frame, and use it for the x position of the text. The  block from the Variables category, allows you to retrieve the current value out of the variable, and use it anywhere you can put a normal number block.</p> <ul> <li>Take a  block from the Variables category, and place it into the x position over the \"0\" block.</li> </ul> <p>It should now look like this:</p> <p>  </p> <p>If you run this now, and if you watch very closely, you might briefly see that hat character speed along and disappear off screen to the right. That's just going to keep going, further and further offscreen as the \"counter\" variable increases to infinity.</p>  <p>Let's try slowing things down so we can see it clearly.</p> <p>Previously, I talked about games running at different frames per second, but what is our current game running at? Well, we haven't set it, so it's running as fast as the frames can display! This is just too fast! Let's set a frame rate with the  block. Let's slow it way down by setting it to run a only 1 frame every second.</p> <ul> <li>Grab a new  block from inside the Graphics category, and place it above the  block (not inside).</li> <li>Change the FPS value from \"30\" to \"1\".</li> </ul> <p>It should now look like this:</p> <p>  </p> <ul> <li>Run that and you will see the \"^\"symbol very slowly move across the screen:</li> </ul> <p>  </p> <p>Now things are moving!</p>  <p>We've got all the basics for a decent little game loop! We've got some setup logic, a main game loop, with things being moved, frames being drawn, and then the drawn frame being sent to the display! It's just a shame that the \"^\" symbol eventually disappears permanently offscreen. Let's make it loop back around to the other side, but first let's speed things back up. We could increase the FPS value, but let's try making the \"^\" symbol move in larger steps instead.</p> <ul> <li>Change the increment value from \"1\" to \"5\" in your  block.</li> </ul> <p>If we ran this now, the \"^\" symbol would keep stepping forwards 5 pixels at a time, but it would still disappear offscreen. Let's make it wrap around.</p> <p>Ideally, when the \"counter\" gets to the end of the screen, we want to reset it back to 0. The Thumby screen is 72 pixels wide, so when \"counter\" gets to 70 the \"^\" symbol will be half off screen. So, if the \"counter\" value is equal to 70, we want to set it to 0.</p> <p>The  block allows you to do something (like set \"counter\" to \"0\") on a condition (like when \"counter\" equals 70).</p> <ul> <li>Grab a new  block from the Logic category and place it in an empty area of your workspace. We will move it into position after we have worked on it.</li> <li>Grab a new  block from the Logic category and place it into the plug next to the \"if\" on the  block.</li> <li>Grab another  block from the Variables category, and place it in the the first hole of the  block.</li> <li>Grab a new  block from the Math category and place it in the second hole of the  block.</li> <li>Change the \"123\" to \"70\".</li> </ul> <p>It should now look like this:</p> <p>  </p> <ul> <li>Grab a new  block from the Variables category, and place it inside the mouth next to where it says \"do\".</li> <li>Grab another  block from the Math category and plug it into the end of the  block.</li> <li>Change the \"123\" to \"0\".</li> </ul> <p>It should now look like this:</p> <p>  </p> <p>This collection of blocks will reset the \"counter\" back to 0 whenever the \"counter\" gets to 70! Now it just needs to go into our main game loop so that it runs every frame.</p> <ul> <li>Place the newly made collection of blocks into the  main game loop, between the  block and the  block. You can drag all the blocks together by moving the  block, which holds them all together.</li> </ul> <p>It should now look like this:</p> <p>  </p> <ul> <li>Run that and see it wrap around!:</li> </ul> <p>  </p> <p>Nice!</p>"},{"location":"Blockly/Simplest-Game/#adding-more-things","title":"Adding More Things","text":"<p>You can add lots of different things to your game. As an example, let's add an \"X\" character and put it at the far right of the screen just above where the \"^\" symbol wraps around.</p> <ul> <li>Create the following highlighted block and add it to your loop. It should be easy enough with everything you have learned so far!:</li> </ul> <p>   </p>"},{"location":"Blockly/Simplest-Game/#random-numbers","title":"Random Numbers","text":"<p>Some games take advantage of random numbers to make things different each time you play them. Some games are different each time because of how the player chooses different options each time they play, like in chess, but sometimes it's nice to add a little bit of chance! You can also use random numbers to draw things in more interesting ways.</p> <p>That \"X\" symbol is looking a little bit dull. Let's make it dance! It currently sits there at x position 65, but it would be nice if it randomly moved about across positions 64 to 66.</p> <ul> <li>Take a  block from the Maths category, and plug it into the x position plug on the block that draws the \"X\", replacing the \"65\".</li> <li>Change the \"1\" to \"10\" values and make them \"64\" to \"66\".</li> <li>Run it and watch the \"X\" jump around a little!</li> </ul> <p>   </p>"},{"location":"Blockly/Simplest-Game/#button-actions","title":"Button Actions","text":"<p>We've made a fun little animation, but there isn't any player interaction. It would be really nice if pressing a button does something! Let's try to make the game speed up every time the player presses one of the red \ud83d\udd34 buttons.</p> <p>Take a look in the Buttons category of the toolbox. In it, you can see two collections of blocks, with each collection of blocks having a block for each button. Each button has a \"held\" block () and also a \"hit block\" (). Both of these blocks act as condition blocks, and give a value of true whenever something happens with the buttons.</p> <p>The condition behavior of the held blocks are slightly different to the hit blocks:</p> <ul> <li>held button blocks are true for the entire time a button is held down.</li> <li>hit button blocks are true only once each time a button is pressed, even if the button is held down for a long time.</li> </ul> <p>The difference is important because a button can be held down while multiple game loops cycle through. Actually, when games run at high frame rates, that is normally always the case!</p> <p>Let's make the game speed up each time one of the \ud83d\udd34 buttons is pressed, so let's use a () \"hit block\"!</p> <p>Once again, we want to do something if a condition is true, so:</p> <ul> <li>Grab another  block and place it inside the bottom of your game loop.</li> <li>Grab a new  block from the Buttons category and place it into the \"if\" plug.</li> <li>Grab another  block, and place it inside the \"do\" mouth.</li> </ul> <p>Each button block can have it's trigger button changed by using the dropdown inside the button. In there, you can find some additional options like \"dpad\", which will activate when any direction button is pressed. We can change this dropdown so that our button block activates when either button A or button B is pressed.</p> <ul> <li>Change the dropdown in the  block from \"button A\" to \"button A or B\".</li> <li>Run it and then press one of the buttons and watch it speed up!</li> </ul> <p>   </p> <p>Wow, that's fast!</p>  <p>Let's change it so that the game speeds up gradually every time the button is pressed. We want to increase the FPS value by 1 every time the button is pressed, similarly to how we increased the \"counter\". Unfortunately, there is no increment block for the FPS, so we are going to have to do the maths ourselves.</p> <p>We want to retrieve the current FPS value, add 1 to it, then set that as the new FPS value. The  block retrieves the current FPS value, and can be used anywhere where a number block is allowed to be placed, and the  block allow you to do basic maths like addition, subtraction, and multiplication. We can also place a  block inside a  block, giving a value of 1 more than the current FPS value!</p> <ul> <li>Grab a new  block from the Maths category, and place it in the value plug of the  block, replacing the \"30\".</li> <li>Grab a new  block from the Graphics category, and place it into the first value plug if the  block, replacing the first \"1\".</li> </ul> <p>   </p> <p>Sweet!</p>"},{"location":"Blockly/Simplest-Game/#making-a-challenge","title":"Making a Challenge!","text":"<p>This looks pretty cool, but it could be a lot more fun. Games are most fun where there is some kind of challenge! Games usually have some kind of goal that takes effort or skill to achieve.</p> <p>Let's make the goal be making the \"^\" symbol move as fast as possible, but let's make the challenge that it only goes faster when the button is hit exactly when the \"^\" symbol is underneath the \"X\" symbol, and if the button is hit at any other time, it goes back to its original slow speed!</p> <p>To do this, we can leave it always increasing the speed when the button is hit, but if the button is hit when it is in the wrong position, we reset the FPS back to 1 frame per second:</p> <ul> <li>Grab another  block and place it inside the \"do\" mouth that activates when a button is hit, just below where you increase the FPS.</li> </ul> <p>Notice that you can put  blocks inside of each other!</p> <p>This runs when the button is hit, and is where we are going to reset the FPS if the \"^\" is in the wrong position.</p> <p>You already have a combination of blocks that checks the position of the \"counter\" where it wraps around to the left when it goes of screen. That is in the \"if\" plug up at the top of your game loop.</p> <ul> <li>Copy (Ctrl+c) the condition out of the \"if\" plug at the top of your game loop, then paste (Ctrl+v) and move it into the new \"if\" plug.</li> </ul> <p>We want this condition to activate when the \"^\" symbol is underneath the \"X\" symbol instead of when it has gone off screen so we need to change the position where it activates:</p> <ul> <li>Change the \"70\" in the newly made condition to \"65\".</li> </ul> <p>We actually want it to activate when it is in any other position than at position 65:</p> <ul> <li>Change the \"=\" in the dropdown of the condition to \"\u2260\".</li> </ul> <p>Now we want to reset the FPS back to 1 whenever that activates:</p> <ul> <li>Copy the block where you initially set the FPS to 1 just above your game loop, then paste and move it into the new \"do\" mouth.</li> </ul> <p>   </p> <p>Have a play and try to get the \"^\" symbol to go as fast as you can without missing the \"X\"!</p>"},{"location":"Blockly/Simplest-Game/#adding-sounds","title":"Adding Sounds","text":"<p>Sounds are a great way to make your game have a more interesting experience. Little beeps can go a long way! They can also be a part of how the game works.</p> <p>It would be really nice to have a quick little beep every time the \"^\" symbol moves, and have the beeping go faster as it moves faster. That could help players get into the rhythm of this game!</p> <p>It's would also be nicer if you immediately knew when you missed the \"X\", rather than only knowing after seeing the \"^\" slow down. A long beep that stops the game for a bit would help with that.</p> <p>Take a quick look in the Audio category of the toolbox. There are two main blocks that make sounds. One will trigger a sound playing in the background while continuing the game loop, and the other will pause the game loop until the sound finishes playing.</p> <p>Both sound blocks take two values. The first is the tone. Higher tone numbers have a high pitch, while lower ones have a low hum. People can only hear between about 20 Hz and 20,000 Hz. The second value is the duration, which is how long the sound should play for. This duration number is in milliseconds, so if you want to have a sound play for a second, you would put the duration to 1000. In most games, playing a beep for a full second is very long time, and you will often have duration values that are much lower than 1000.</p> <p>Let's start by making the quick little beep every time the \"^\" symbol moves:</p> <ul> <li>Grab a new  block from the Audio category and place it inside the very bottom of your game loop.</li> <li>Change the duration value from \"1000\" ms to \"10\" ms so that the beep is nice and quick.</li> </ul> <p>Make sure you haven't accidentally used the sound block that waits until the sound finishes. We don't want to pause the game loop for this sound.</p> <p>Next, we can add the long low beep that briefly pauses the game when you miss the \"X\":</p> <ul> <li>Grab the  block from the Audio category, which is the other type of sound block, and the one that pauses the game loop. Place that inside the \"do\" mouth where you reset the FPS back to 1 when the player hits a button and when the \"counter\" isn't at 65.</li> <li>Change the tone from \"2000\" Hz to \"400\" Hz.</li> </ul> <p>It should now all look like this:</p> <p>  </p> <p>If you run that now, you should hear little beeps as the \"^\" moves, and a punishingly long low beep when you miss the \"X\". The whole thing should feel much more fun too!</p> <p>\u26a0 Note: If you test this on a real Thumby, you might have to put the Thumby to your ear, especially if you are in a loud room. The Thumby is a tiny thing, and sometimes its volume is on the smaller side too!</p>  <p>When you are ready, head on over to the next tutorial to learn how to make Sprites, and to make a Title Screen for this game!</p> <p>Next Tutorial: Making Sprites</p>"},{"location":"Blockly/The-Basics/","title":"The Basics - Getting Started with Blockly","text":"<p>This tutorial will get you stared with visual block programming in the Thumby Code Editor, and show you how to get the Thumby to do some fun little things!</p>"},{"location":"Blockly/The-Basics/#getting-set-up","title":"Getting Set Up","text":"<ul> <li>Head on over to the online Thumby Code Editor.</li> <li>You may be shown the Code Editor Changelog popup. Don't worry about that. Just close it!</li> <li>Next, you will get an option to select between MicroPython and Blockly editors. Select Blockly.</li> </ul> <p>  </p> <ul> <li>You should now have an editor with some example blocks shown. Don't worry if you missed this, you can still open a new one with UTILITIES -&gt; WIDGETS -&gt; + BLOCKLY EDITOR:</li> </ul> <p>  </p>"},{"location":"Blockly/The-Basics/#running-in-the-emulator","title":"Running in the Emulator","text":"<p>Now that you have the example program open, let's try running it in the Emulator! The emulator is the picture of a Thumby in the corner. That can actually run the Thumby games!</p> <p>  </p> <ul> <li>First, we need to make sure that the program is selected to be emulated. Make sure checkboxes next to EMULATION: \u2705 \u2705 (found at the top of the editor) are both selected. The red one (on the right) is the important one, which actually activates both!</li> </ul> <p>  </p> <ul> <li>Now you can launch the Emulator by clicking the START button on the bottom of the Emulator window:</li> </ul> <p>  </p> <ul> <li>Give it a moment, and it should load up a lovely Hello Thumby message, with a Thumby image moving back and forth!</li> </ul> <p>  </p> <p>This will just keep playing forever.</p>"},{"location":"Blockly/The-Basics/#controlling-the-emulator","title":"Controlling the Emulator","text":"<p>You can play games in the Emulator just like on a Thumby! You just use the keyboard to control it instead of the buttons. Use W A S D for up/left/down/right and use , and . for the two buttons!:</p> <ul> <li>W  \u21e7</li> <li>S  \u21e9</li> <li>A D  \u21e6 \u21e8</li> <li>, .  \ud83d\udd34 \ud83d\udd34</li> </ul> <p>The example program has some basic button actions. Make sure the Emulator is selected, then change the direction of the moving Thumby image with left (A) and right (D):</p> <ul> <li>A - change Thumby direction to left.</li> <li>D - change Thumby direction to right.</li> </ul> <p>Go ahead and tap away and see it wiggle about!</p> <p>   </p>"},{"location":"Blockly/The-Basics/#stopping-the-emulator","title":"Stopping the Emulator","text":"<p>If you have a game running in the Emulator, you can stop the emulation with the STOP button on the bottom of the Emulator window. Clicking the STOP button on the Emulator is just like turning off the power switch on your Thumby.</p> <ul> <li>Press STOP:</li> </ul> <p>  </p>"},{"location":"Blockly/The-Basics/#getting-started-with-blockly","title":"Getting Started with Blockly","text":"<p>Now that we are set up with the basics, let's get started programming with blocks!</p>"},{"location":"Blockly/The-Basics/#blockly-workspace","title":"Blockly Workspace","text":"<p>In Blockly, you piece together logic using blocks. There are a bunch of different kinds of blocks that you can use that each do different things and behave in different ways. Some blocks connect together one after the other, and some blocks go inside other blocks. You don't need to remember the ways each kind of block is allowed to connect together as it is all automatic! All you need to do is drag the blocks around and they will automatically connect to where they are allowed to go. You can detach them by dragging them off and then putting them somewhere else. Go ahead and dray some of the blocks around. Don't worry about breaking the logic, we are going to clear it all away soon anyway!</p> <p>This area where all the blocks are located and able to be dragged around and connected together is called the workspace and is the area which makes the logic for your game.</p> <p>Workspace:   </p> <ul> <li>Clear the workspace and start fresh. You can simply select each blocks, one by one, and press the backspace key, or you can right-click on the workspace background and select Delete 33 Blocks (the number might be different):</li> </ul> <p>  </p> <p>You should now have a nice clear workspace without any blocks:</p> <p>  </p> <p>There are also some useful gray buttons on the bottom right of the workspace area. From top down are the following buttons:</p> <ul> <li>Center workspace</li> <li>Zoom in</li> <li>Zoom out</li> <li>Open recycling bin - where you can recover recently deleted blocks!</li> </ul> <p>Nice! Now we are ready to start adding our own blocks!</p>"},{"location":"Blockly/The-Basics/#blockly-toolbox","title":"Blockly Toolbox","text":"<p>To add blocks to the workspace, we need to get the blocks from somewhere! In Blockly, all the blocks are neatly organized inside the toolbox.</p> <p>Links: If you would like to learn more about some of the blocks in Blockly, there is great interactive tutorial here: Learn Block Coding which explains all about the blocks in the toolbox categories Logic, Loops, Maths, Text, Lists, Variables, and Functions. There are also some fun interactive tutorials here: Blockly Games which let's you get familiar with connecting blocks together with some different blocks that do some fun things.</p> <p>You can see the toolbox here:</p> <p>Toolbox   </p> <p>All the blocks in the toolbox are organized into categories. Each category contains blocks that do similar kinds of things. You can click on each category to see all the different blocks they contain!</p> <ul> <li>Try clicking on the Text category in the toolbox:</li> </ul> <p>  </p> <p>You can see that it has opened out a toolbox panel showing all the blocks about text that you can use. Each block has a tooltip that helps describe what the block does.</p> <ul> <li>Leave your mouse pointer over the  block until the tooltip shows up:</li> </ul> <p>  </p> <ul> <li>Now try using that block! To use a block from the toolbox, simply drag it into the workspace area:</li> </ul> <p>  </p> <p>Now you have a block in your workspace! There is an unlimited number of each block in the toolbox. You can keep dragging them into your workspace to make new blocks.</p>"},{"location":"Blockly/The-Basics/#building-with-blocks","title":"Building with Blocks","text":"<p>The  block needs something to print.</p> <ul> <li>Grab the  block from the Text toolbox and plug it into the  block in your workspace:</li> </ul> <p>  </p> <p>Now let's run your program and see what it does!</p> <ul> <li>Click the START button on the emulator just like you did before with the default program.</li> </ul> <p>Unfortunately, nothing is going to show up on the Thumby emulator itself (that's coming later), but we can see the program did something because it output that \"abc\" text in the debug Shell:</p> <p>  </p> <p>These two blocks are now working together to show text in the debug Shell! This kind of block connection adds a block that is something to a block that does something. Here, we have connected a block that is abc text to a block that does a print of something to the debug shell, so both blocks together does a print of the abc text to the debug shell.</p> <p>These debug prints can be really helpful for helping figure out what your program is doing. Its not really making the Thumby do anything, but we will get to that soon. For now, let's make it print something better than \"abc\".</p>  <p>Some blocks in blockly can have their details changed! The  block can be changed to any text! \"abc\" is just the example value.</p> <ul> <li>Click on the \"abc\" text and type in something new like \"blocks are running!\".</li> <li>Now you can run this again by clicking START.</li> </ul> <p>You should see that it is now showing the new text you entered:</p> <p>  </p>  <p>Nice! Now you know how to place blocks, connect them together, and change their details. Next, let's make the Thumby actually do something! We can also learn how to snap blocks together in another way.</p> <ul> <li>Open the Graphics category of the toolbox, which is lower down than the Text category you just had open.</li> </ul> <p>You should see a  block. This is similar to the  block we just used, but will display text to the Thumby screen instead of the debug Shell:</p> <p>  </p> <ul> <li>Go ahead and drag it out of the toolbox and connect it underneath the  block so that it looks like this:</li> </ul> <p>  </p> <p>Once again, we need to connect a block that is something so that the  block knows what to display.</p> <ul> <li>Grab another  block like before, connect it in, and change the text to something like \"Thumby says: Hello Blockly\", so it looks like this:</li> </ul> <p>  </p> <ul> <li>See what that does now by clicking START:</li> </ul> <p>  </p> <p>We finally made the Thumby do something! Nice!</p> <p>Connecting blocks like this underneath each other makes a do something block run after another do something block. In Blockly, blocks run one after another from top to bottom. Both our blocks seemed to run at the same time because they ran so fast! What actually happened is \"blocks are running!\" was printed to the debug shell, and then, after that, \"Thumby says: Hello Blockly!\" was printed to the Thumby display.</p>  <p>Hint: Blockly supports shortcuts to help make and arrange blocks quickly. Here are some useful ones:</p>  <ul> <li>Copy selected block: Ctrl+c</li> <li>Paste copied block: Ctrl+v</li> <li>Undo last change: Ctrl+z</li> <li>Redo change: Ctrl+Shift+z</li> </ul> <p>There are all kinds of blocks in Blockly that do lots of different things. When you start connecting them together in interesting ways you can get the Thumby to do lots of cool things!</p>"},{"location":"Blockly/The-Basics/#testing-on-a-connected-thumby","title":"Testing on a Connected Thumby","text":"<p>The emulator is super helpful for quickly testing your programs but it is even more fun to try your program on a real Thumby (if you have one). Next, let's connect your Thumby and test this program on it!</p>"},{"location":"Blockly/The-Basics/#troubleshooting","title":"Troubleshooting","text":"<p>\u26a0 Note: Some Micro USB cables only include power and ground wires to power or charge devices - if you are having trouble connecting your Thumby in the following steps, try using a different USB cable. Test the USB cable you are using is able to transfer data by transferring files, like pictures or text files, from a different USB compatible device.</p> <p>\u26a0 Note: Connecting your Thumby works best in Chrome or Edge. If you are having trouble connecting, make sure to try a latest version of one of those browsers.</p> <p>\u26a0 Note: If you're on Linux, your user needs to be added to the <code>dialout</code> group. Use this command <code>sudo adduser $USER dialout</code> and restart your machine.</p>"},{"location":"Blockly/The-Basics/#connecting","title":"Connecting","text":"<ul> <li> <p>Turn your Thumby on (switch the top power switch to the right when looking at the screen), and connect it to your PC using a Micro USB Cable.</p> </li> <li> <p>Click 'CONNECT THUMBY' at the top:</p> </li> </ul> <p>  </p> <ul> <li>Select the device in the pop-up menu, and then click 'Connect':</li> </ul> <p>  </p> <p>If connection is successful, a green 'Connected' message will be printed to the debug Shell. You should also see all the files from the Thumby device load in the Filesystem tab:</p> <p>  </p> <p>Your Thumby is now connected! The  Thumby should be paired to the webpage so that it will auto-connect next time it is plugged in.</p> <p>We can now test the program on it!</p>"},{"location":"Blockly/The-Basics/#testing","title":"Testing","text":"<ul> <li>Click the '\u21bb FAST EXECUTE' button just above the Blockly workspace:</li> </ul> <p>  </p> <p>If all goes well, you should very briefly see the \"Thumby says: Hello Blockly!\" message showing on the display! Your Thumby automatically resets at the end of your program.</p> <p>  </p> <p>Wonderful!</p>  <p>If you would like to see the message for longer, try snapping a  block from the Flow category underneath .</p> <p>  </p> <p>Hint: If you want to stop the Thumby, you can use the DISCONNECT THUMBY button up top, and then reconnect with the CONNECT THUMBY button again.</p>"},{"location":"Blockly/The-Basics/#saving-your-work","title":"Saving Your Work","text":"<p>Any code written in the Code Editor is saved to your local web storage, so refreshing or closing the Code Editor webpage won't erase your saved work.</p>  <p>\u26a0 Note: Please avoid the few ways you could lose your work unless you have saved:</p> <ul> <li>DON'T: Hard reset the page (UTILITIES -&gt; HARD RESET PAGE)</li> <li>DON'T: Clear your local browser storage by deleting the browser cache.</li> <li>DON'T: Close the Blockly editor tab (instead of the whole browser tab) without saving.</li> </ul>  <p>You can save your work by saving blockly files to your PC. Use FILE -&gt; EXPORT TO PC to download a save file with all your work!</p> <p>  </p> <p>You can load it again later from the same menu by opening a new Blockly tab with 'NEW BLOCKLY TAB', and then clicking 'IMPORT FROM PC'</p>"},{"location":"Blockly/The-Basics/#further-learning","title":"Further Learning","text":"<p>Most of the Code Editor interface works the same for MicroPython and Blockly, so you can learn more about it all here: Code Editor Docs: Getting Started - First Program.</p> <p>\u26a0 Note: The 'IMPORT SPRITE' button at the top of the Code Editor isn't usable for Blockly. We will show the way to make Sprites for Blockly in the next tutorial.</p>  <p>If you get stuck, you can always ask for some help from the Thumby Discord community channel found here: TinyCircuits Discord.</p>  <p>When you are ready, head on over to the next tutorial to start with the basics for making games!</p> <p>Next Tutorial: The Simplest Game</p>"},{"location":"Blockly/Working-With-Fonts/","title":"Working with Fonts","text":"<p>In this tutorial, we will show you how to switch fonts when drawing to the display, how to set the font gap spacing, and then introduce you to making your own custom fonts! There is also a fully functional Calculator app example demonstrating switching fonts, and using a custom font.</p>"},{"location":"Blockly/Working-With-Fonts/#switching-the-default-fonts","title":"Switching the Default Fonts","text":"<p>To switch between the default fonts, you can use the following block from the Graphics category:</p>  <p>Any  block that runs after that one, will show with the selected font.</p> <p>See it in action below:</p> <p>   </p>"},{"location":"Blockly/Working-With-Fonts/#font-spacing","title":"Font Spacing","text":"<p>Fonts come with gaps between each letter so it is easier to read. These have a default width of 1 pixel. You can change the following block, which can be found in the Graphics category.</p>  <p>Just like with the  block, any  block that runs after that one, will show with the specified font gap width.</p> <p>See it in action below:</p> <p>   </p>"},{"location":"Blockly/Working-With-Fonts/#making-custom-fonts","title":"Making Custom Fonts","text":"<p>You can make your own Fonts using Sprites made in the Bitmap Builder. See the Making Sprites Tutorial to see how to make and load Sprites.</p> <p>Font Sprites are just Sprites that are arranged in a specific way.</p> <p>Here is an example of a Font Sprite loaded in the Bitmap Builder:</p> <p>  </p>  <p>To use a Sprite as a Font, first you make sure it is loaded into a  block using the EXPORT button.</p> <p>Then you can apply it as the active font using the following block which can be found in the Graphics category:</p>  <p>You have to tell that block the width and height of the characters (not of the whole image) in the font, otherwise the Thumby won't know how to extract out the letters, numbers, and symbols correctly! Make sure to update the width x height details where it says 5 x 7.</p> <p>\u26a0 Note: If you don't set the width and height of the font characters correctly then the text will come out all garbled!</p> <p>See it in action below:</p> <p>   </p>"},{"location":"Blockly/Working-With-Fonts/#font-sprite-structure","title":"Font Sprite Structure","text":"<p>Font Sprites must follow a specific structure. All letters, numbers, and symbols must be put into a tightly packed grid of boxes, with each box being the width of the font letters, and the height of every box always being 8.</p> <p>Fonts that are less than 8 pixels high are drawn at the very top of each box.</p> <p>Here is an example for a 3x5 Font:</p> <p>  </p> <p>The order of the letters, numbers, and symbols is very important. They go from right to left and then wrap around underneath, like reading text on a page. The order must always match the following exactly:</p> <p><pre><code> !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\n</code></pre> \u26a0 Note: This has a \"space\" for the first character!</p> <p>You don't need to make all of the letters, numbers, or symbols, but leave the box blank instead of removing it.</p>  <p>You can actually use fonts to draw pictures or icons! Just make a custom font with each letter representing an icon or game item! Make the font with pictures instead of letters, numbers, or symbols then draw the corresponding text for those icons that you want! You can always switch back to a real font to draw text again.</p>"},{"location":"Blockly/Working-With-Fonts/#example-custom-fonts","title":"Example Custom Fonts","text":"<p>Here are some example fonts you can download then open in the Bitmap Builder with the IMAGE button, so you can then customise it:</p> <p>  (Community member Auri's teeeny tiny 3x3 font) <p> (Tiny Circuit's inbuilt 3x5 font)</p> <p> (Tiny Circuit's inbuilt 5x7 font)</p> <p> (ZX Spectrum 8x8 font by Mike) </p> <p>Don't forget to load it back onto your  block that loads the font for your  block with the EXPORT button! And remember to update the font size details!</p>"},{"location":"Blockly/Working-With-Fonts/#tinycalc-example","title":"TinyCalc Example","text":"<p>You can see both switching the default fonts, and working with custom fonts in the TinyCalc program from the Arcade. The full set of blocks can be seen below.</p> <p>   </p> <p>Try this yourself by downloading these blocks here and using IMPORT FROM PC!</p> <p>As a challenge, try to add wider font spacing gaps between the selectable keypad keys to make them easier to read!</p>  <p>Thanks to: community member Auri for the Auri3x3 font! And also thanks to community member AyreGuitar for finding the zx8x8 font!</p>  <p>Next Tutorial: Saving High Scores</p>"},{"location":"CCPP/API-Reference/","title":"API Reference","text":""},{"location":"CCPP/API-Reference/#thumbyh","title":"Thumby.h","text":"<p><code>#include &lt;Thumby.h&gt;</code></p> <p>Main library for screen, button, audio, and link cable interaction.</p> <p>Inherits most functionality from <code>GraphicsBuffer.h</code> and <code>font.h</code> libraries. This section is a summary of what is accessible and useful through the <code>Thumby.h</code> library.</p>"},{"location":"CCPP/API-Reference/#defines","title":"Defines","text":"Name value     <code>THUMBY_SCREEN_WIDTH</code> <code>72</code>   <code>THUMBY_SCREEN_HEIGHT</code> <code>40</code>   <code>BUTTON_L</code> <code>0x01</code>   <code>BUTTON_R</code> <code>0x02</code>   <code>BUTTON_U</code> <code>0x04</code>   <code>BUTTON_D</code> <code>0x08</code>   <code>BUTTON_B</code> <code>0x10</code>   <code>BUTTON_A</code> <code>0x20</code>"},{"location":"CCPP/API-Reference/#classes","title":"Classes","text":""},{"location":"CCPP/API-Reference/#thumby","title":"Thumby","text":"<p>Class for driving and using Thumby peripheral components.</p>"},{"location":"CCPP/API-Reference/#public-member-functions","title":"Public member functions","text":""},{"location":"CCPP/API-Reference/#general","title":"General","text":"General     <code>void begin()</code>Sets up pins and libraries   <code>void update()</code>Sends the internal graphics buffer to the screen"},{"location":"CCPP/API-Reference/#drawing","title":"Drawing","text":"Drawing     <code>void writePixel(uint16_t color)</code>Writes <code>color</code> to pixel placed by <code>goto(...)</code>, <code>setX(...)</code>, or <code>setY(...)</code>   <code>void setX(uint8_t x, uint8_t end)</code>Sets drawing X position to <code>x</code> and row jump position at <code>end</code> (e.g. after calling <code>writePixel(...)</code> <code>end</code> times, pixels on the next increment of <code>y</code> starting at <code>x</code> will be drawn)   <code>void setY(uint8_t y, uint8_t end)</code>Sets drawing Y position to <code>y</code> and row loop position at <code>end</code> (e.g. after calling <code>writePixel(...)</code> enough times to draw rows defined by <code>setX(...)</code>, loop back to this <code>y</code>)   <code>void goTo(uint8_t x, uint8_t y)</code>Quick wrapper of <code>setX(...)</code> and <code>setY(...)</code>   <code>void drawPixel(uint8_t x, uint8_t y, uint16_t color)</code>Set pixel to <code>color</code> at <code>x</code> and <code>y</code>   <code>void clear()</code>Clears all pixels in buffer to black   <code>void clearWindow(uint8_t x, uint8_t y, uint8_t w, uint8_t h)</code>Clears rectangle defined by <code>x</code>, <code>y</code>, <code>w</code>, and <code>h</code> to black   <code>void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)</code>Draws line between points defined by <code>x0</code>, <code>y0</code> and <code>x1</code>, <code>y1</code> in <code>color</code>   <code>void drawCircle(int16_t x0, int16_t y0, int16_t radius, uint16_t color)</code>Draws circle with center at <code>x0</code>, and <code>y0</code> with <code>radius</code> in <code>color</code>"},{"location":"CCPP/API-Reference/#font","title":"Font","text":"Font     <code>void setFont(const FONT_INFO&amp;)</code>Set font parameters to those defined in <code>FONT_INFO</code>. Predefined fonts are available in the GraphicsBuffer library <code>font.h</code> file (default is <code>thinPixel7_10ptFontInfo</code>)   <code>uint8_t getFontHeight(const FONT_INFO&amp;)</code>Returns font height value (in pixels) from <code>FONT_INFO</code>   <code>uint8_t getFontHeight(void)</code>Returns the current set font height value (in pixels)   <code>uint8_t getPrintWidth(char* str)</code>Returns the number of pixels characters in <code>str</code> will occupy in width   <code>void setCursor(int x, int y)</code>Sets the cursor <code>x</code> and <code>y</code> position the characters will print at (top left corner of string)   <code>void fontColor(uint16_t f, uint16_t g)</code>Sets the foreground (text) and background colors to <code>f</code> and <code>g</code> respectively   <code>size_t write(uint8_t ch)</code>Writes a single character <code>ch</code> to the buffer at the current set cursor position. Returns <code>true</code> if successful <code>false</code> otherwise   <code>uint8_t* getBuffer()</code>Returns (pointer to) graphics buffer   <code>uint16_t getBufferSize()</code>Returns the number of bytes the graphics buffer occupies   <code>void print(uint8_t* str)</code>Draws characters in <code>str</code> to buffer"},{"location":"CCPP/API-Reference/#audio","title":"Audio","text":"Audio     <code>void play(uint32_t freq, uint16_t duty)</code>Starts playing sound at <code>freq</code> (only 20 - 20kHz is useful for human hearing) and <code>duty</code> cycle   <code>void stopPlay()</code>Stops playing sound started by <code>play(...)</code>"},{"location":"CCPP/API-Reference/#buttons","title":"Buttons","text":"Buttons     <code>bool isPressed(uint8_t mask)</code>Returns <code>true</code> if any buttons correlating to the ORed button <code>mask</code> (see \"Defines\" section) are pressed, <code>false</code> otherwise"},{"location":"CCPP/API-Reference/#link","title":"Link","text":"Link     <code>int8_t linkPack(uint8_t* dataBuf, uint16_t dataBufLen, uint8_t* packedBuf, uint16_t packedBufLen)</code>Packs/copies <code>dataBufLen</code> number of bytes from <code>dataBuf</code> to <code>packedBuf</code> up to <code>packedBufLen</code>. Adds three additional bytes for size and checksum. Returns -1 if <code>dataBufLen</code> &gt; 512 or <code>dataBufLen+3</code> &gt; <code>packedBufLen</code>. Returns the full packet length if succeeds (<code>dataBufLen+3</code>)   <code>int8_t linkUnpack(uint8_t* packedBuf, uint16_t packedBufLen, uint8_t* dataBuf, uint16_t dataBufLen)</code>Unpacks/copies <code>dataBufLen</code> number of bytes from <code>packedBuf</code> to <code>dataBuf</code> while removing data and checksum bytes. Returns <code>-1</code> if checksum in <code>packedBuf</code> does not match that generated from extracted data or if data from <code>packedBuf</code> cannot fit into <code>dataBuf</code>. Returns <code>dataLength</code>"},{"location":"CCPP/API-Reference/#public-member-variables","title":"Public member variables","text":"Name Description     <code>const uint16_t width</code> Current set screen width (in pixels)   <code>const uint16_t height</code> Current set screen height (in pixels)   <code>const uint8_t bitsPerPixel</code> Current screen color bit depth"},{"location":"CCPP/API-Reference/#structs","title":"Structs","text":""},{"location":"CCPP/API-Reference/#font_char_info","title":"FONT_CHAR_INFO","text":""},{"location":"CCPP/API-Reference/#public-member-variables_1","title":"Public member variables","text":"Name Description     <code>const uint8_t width</code> Width of a character in pixels   <code>const uint16_t offset</code> Offset from the end of the character width in pixels"},{"location":"CCPP/API-Reference/#font_info","title":"FONT_INFO","text":""},{"location":"CCPP/API-Reference/#public-member-variables_2","title":"Public member variables","text":"Name Description     <code>const unsigned char height</code> Height of the font in pixels   <code>const char startCh</code> First character in font   <code>const char endCh</code> Last character in font   <code>const FONT_CHAR_INFO* charDesc</code> Description of characters in the font   <code>const unsigned char* bitmap</code> Bitmap used by the font"},{"location":"CCPP/Environment-Setup/","title":"Setting up environment","text":"<p>This page will go through the process of installing needed software and libraries to program Thumby in Arduino C/C++. This should be doable on Windows, Linux, and Mac.</p>"},{"location":"CCPP/Environment-Setup/#dependencies","title":"Dependencies","text":"<p>A few items are needed to setup a programming environment for Thumby</p> <ol> <li>Arduino IDE</li> <li>GraphicsBuffer Library</li> <li>Thumby C/C++ Library</li> <li>Raspberry Pi Pico/RP2040 Arduino board package</li> </ol>"},{"location":"CCPP/Environment-Setup/#installing-the-arduino-ide","title":"Installing the Arduino IDE","text":"<p>See the Arduino installation guide</p>"},{"location":"CCPP/Environment-Setup/#installing-the-graphicsbuffer-library","title":"Installing the GraphicsBuffer Library","text":"<ol> <li>Visit the GraphicsBuffer Library GitHub page</li> <li>On the GitHub page, click the green \"Code\" dropdown and select \"Download ZIP\"</li> <li>In the Arduino IDE, click <code>Sketch-&gt;Include Library-&gt;Add .ZIP Library...</code> and then select the downloaded .zip file</li> </ol>"},{"location":"CCPP/Environment-Setup/#installing-the-thumby-library","title":"Installing the Thumby Library","text":"<ol> <li>Visit the Thumby Library GitHub page</li> <li>On the GitHub page, click the green \"Code\" dropdown and select \"Download ZIP\"</li> <li>In the Arduino IDE, click <code>Sketch-&gt;Include Library-&gt;Add .ZIP Library...</code> and then select the downloaded .zip file</li> </ol> <p>See this page for a visual step through of installing libraries through the Arduino IDE.</p>"},{"location":"CCPP/Environment-Setup/#installing-the-rp2040-arduino-board-package","title":"Installing the RP2040 Arduino board package","text":"<p>Follow the instructions here to see the installation process in the Arduino IDE boards manager.</p>"},{"location":"CCPP/Examples/","title":"Examples","text":"<p>The Thumby library comes with examples available through <code>File -&gt; Examples -&gt; Thumby</code> in the Arduino IDE or through the links below</p> <ul> <li> <p>ThumbySimpleExample A simple example showing usages of the <code>Thumby.h</code> for screen drawing, audio, buttons, and link sending/receiving</p> </li> <li> <p>ThumbyVoxelExample A more complex example showing how fast the C/C++ library can be!</p> </li> </ul>"},{"location":"CCPP/Uploading-Sketches/","title":"Uploading sketches","text":"<p>With the programming environment setup, it's time to upload a sketch.</p>"},{"location":"CCPP/Uploading-Sketches/#configuring-upload-parameters","title":"Configuring upload parameters","text":"<ul> <li>Open the Arduino IDE and ensure the follow parameters are set under <code>Tools</code><ol> <li><code>Board: -&gt; Raspberry Pi Pico</code></li> <li><code>Flash Size: -&gt; 2MB no FS</code></li> <li><code>CPU Speed: -&gt; 125MHz</code></li> <li><code>Debug Port -&gt; Disabled</code></li> <li><code>USB Stack -&gt; Pico SDK</code></li> <li><code>PORT:</code></li> </ol> </li> </ul> <p>Leave the port blank for the first upload - it will be set later</p>"},{"location":"CCPP/Uploading-Sketches/#uploading","title":"Uploading","text":"<ol> <li>Open the Arduino IDE</li> <li>Open an example using <code>File -&gt; Examples -&gt; Thumby -&gt; ThumbySimpleExample</code></li> <li>Put Thumby into BOOTSEL mode:<ol> <li>Turn Thumby off</li> <li>Press and hold the down d-pad direction</li> <li>Turn Thumby on while continuing to hold the down d-pad direction</li> <li>Wait for a file explorer to pop up on the computer or for the \"RPI-RP2\" volume to automatically mount</li> <li>Click \"Upload\" in the top left of the IDE and wait for the \"Done uploading\" message above the console</li> <li>Select <code>Tools -&gt; Port: -&gt; XXX(Raspberry Pi Pico)</code> (select the port marked as a pico)</li> </ol> </li> </ol> <p>If successful, the Thumby will start showing something other than a black screen. The above process only needs to be done on the first time connecting a Thumby or if an error like \"No drive to deploy\" occurs.</p>"},{"location":"Code-Editor/Arcade-games/","title":"Download Arcade Games to Thumby","text":"<p>This tutorial will show you how to download and add games to your Thumby hardware from the Arcade in the Thumby Editor Code Editor! </p> <p>Go through the Getting Started with Thumby Tutorial before continuing with this tutorial so that you are familiar with how to emulate games and how to connect your Thumby to the Code Editor.</p>"},{"location":"Code-Editor/Arcade-games/#playing-thumby-games","title":"Playing Thumby Games","text":"<p>Before you download games to your Thumby, you can play test them in the Web Code Editor using the Emulator. You can directly click the Thumby buttons in the Emulator with your mouse to play games, or you can use the 'w', 'a', 's'. 'd' keys for the d-pad, and the ',', '.' (command and period) keys for the A and B action buttons.</p> <p>Thumby games are added to the Arcade by wonderful &amp; cool Thumby users that wanted to share the games they made. (Thank you game developers!!)</p> <p>A few mentions of awesome game developers:</p>   <p> Caution: This one has some mature language that may not be suited for all ages</p> <p>Play all the games you want - be sure to check back occasionally to see new games that get added to the Arcade! Learn how to submit your own.</p>"},{"location":"Code-Editor/Arcade-games/#download-games-to-thumby-hardware","title":"Download Games to Thumby Hardware","text":"<p>If you are unsure on how to connect your Thumby to the Web Code Editor, please go through the Getting Started tutorial to learn or refresh your memory. </p>  <p>Once you have found games you like and your Thumby is connected to the Web Code Editor, all you need to do is download the games to your hardware. Open the Arcade and press 'Add to Thumby':</p>  <p>After a few seconds, you should see the downloaded game in your Filesystem panel. The new game is ready to play on the Thumby!</p> <p> Fred the carpenter bee plays Thumby... ThumBee?  </p> <p>Having any troubles or questions? Maybe you have a game idea and aren't sure where to start? Consider sharing your ideas or questions on the Thumby board of the TinyCircuits forum, or discuss with the community on our Discord. Keep in mind that if you have serious questions or need customer support, the forum is a great place to post where TinyCircuits engineers will be happy to help you out!</p>"},{"location":"Code-Editor/Arcade-games/#contact-us","title":"Contact Us","text":"<p>If you have any questions or feedback, feel free to contact TinyCircuits support or make a post on the TinyCircuits forum.</p> <p>Show us what you make by tagging @TinyCircuits on Instagram, Twitter, or Facebook so we can feature it!</p> <p>Thanks for making with us!</p>"},{"location":"Code-Editor/Get-Started/","title":"Thumby Code Editor Documentation","text":"<p>This tutorial will show you how to build a basic project, emulate it, and upload it to your Thumby using our online Code Editor!</p> <p>Any code written in the Code Editor is saved to your local web storage, so refreshing or closing the Code Editor webpage won't erase your saved work. Use Ctrl+S to save your programs in the Code Editor. These are the only ways you can lose your progress (avoid doing these!):</p> <ul> <li>Hard resetting the page: Utilities -&gt; Hard Reset Page (the Code Editor will warn you not to do this)</li> <li>Clearing your local storage: F12 -&gt; Application -&gt; Local Storage -&gt; Clear</li> <li>Exiting the browser tab with code in it without saving (the Code Editor will warn you if you have not saved your most recent edits to Thumby)</li> </ul> <p>NOTE: The Thumby Code Editor and accompanying tutorials will update as more features are added and as we grow our software support for Thumby during Kickstarter fulfillment. If you are interested in hearing software updates as they happen, consider joining our Discord. Thank you for your patience and support!</p> <p>Tutorial Last updated: March 7th, 2022</p>"},{"location":"Code-Editor/Get-Started/#materials","title":"Materials","text":""},{"location":"Code-Editor/Get-Started/#hardware","title":"Hardware:","text":"<ul> <li>Micro USB Cable</li> <li>Thumby</li> </ul>"},{"location":"Code-Editor/Get-Started/#software","title":"Software:","text":"<ul> <li>TinyCircuits Thumby Web Code Editor -  NOTE: Compatible only with Google Chrome or Microsoft Edge web browsers (other browsers not supported)</li> </ul>"},{"location":"Code-Editor/Get-Started/#using-the-thumby-code-editor","title":"Using the Thumby Code Editor","text":"<p>Open Google Chrome or Microsoft Edge, then open the online Thumby Code Editor and select MicroPython when you see the selection screen.</p> <p> Figure 0: Selection between MicroPython or Blockly</p> <p>The below screen will appear:</p> <p> Figure 1: Screen on opening Thumby Code Editor with MicroPython</p> <p>If you prefer a light theme, hover over the 'Utilities' dropdown in the top bar and left-click 'Invert Theme'.</p> <p> Figure 2: Light theme</p> <p>As you get familiar with the Thumby Code Editor - hover over buttons to get tooltip information on what menus and buttons will do.</p>"},{"location":"Code-Editor/Get-Started/#connecting-thumby-to-the-code-editor","title":"Connecting Thumby to the Code Editor:","text":"<p>1. Turn your Thumby on (switch the top power switch to the right when looking at the screen), and connect it to your PC using a Micro USB Cable</p> <ul> <li>NOTE: Some Micro USB cables only include power and ground wires to power or charge devices - if you are having trouble connecting your Thumby in the following steps, try using a different USB cable. Test the USB cable you are using is able to transfer data by transferring files, like pictures or text files, from a different USB compatible device.</li> </ul> <p>2. Click 'Connect Thumby' in the top bar</p> <p>3. Select the device through the pop-up menu</p> <p>4. Click 'Connect'</p> <p>The below screenshot shows the button locations and order to click them in.  </p> <p> Steps 2: Press 'Connect Thumby' button</p> <p> Steps 3 and 4 to connect Thumby</p> <p>If connection is successful, a green 'Connected' message will be printed to the terminal - you will also see a hardware icon appear at the right side of the browser tab to show that you are connected to a Serial port. </p> <p> Thumby Connection Screen &amp; Filesystem</p> <p>After doing the above connection steps, the Thumby will be paired to the webpage and will auto-connect when 'Connect Thumby' is clicked.</p> <p>With the Thumby connected it is time to upload some code!</p> <p>If you're on Linux, your user needs to be added to the <code>dialout</code> group. Use this command <code>sudo adduser $USER dialout</code> and restart your machine.</p>"},{"location":"Code-Editor/Get-Started/#the-code-thumby-games","title":"The Code - Thumby Games!","text":"<p>Follow the below steps to start a project and then upload it to Thumby.</p> <ul> <li>Hover over the 'Utilities' menu and click 'Make New Game ', set the name to anything you like.</li> </ul> <p> New game creation</p> <ul> <li>Click 'OK' after typing in a name, in this case, we used: HelloWorld</li> </ul> <p>The Thumby Filesystem should be preloaded with a 'Games' and 'lib' folder, each containing files. Double left-click any file to open it in a webpage code editor. 'thumby.py' in 'lib' is the main API that should be used to program your projects.</p> <p>After exploring any of the library or game files, close those editors by left-clicking the 'X' in the respective tab of the editor.</p> <p>If you close all of the editors, or close out of any of the other Windows like the Shell or Emulator, you can reopen these windows by going to 'Utilities' -&gt; 'Widgets' -&gt; and then you can add back any window panel options.</p>"},{"location":"Code-Editor/Get-Started/#writing-your-first-thumby-project","title":"Writing Your First Thumby Project","text":"<p>Follow the below steps and enter code as you go to program your first Thumby project.</p> <ul> <li>Import the time and math modules that will be used for animating a sprite with respect to time. Also import the thumby module that implements the main API for interacting with the buttons and the screen</li> </ul> <pre><code>import time\nimport thumby\nimport math\n</code></pre> <ul> <li>Draw a Sprite using the Bitmap Builder panel:</li> </ul> <p> The Bitmap Builder panel</p> <ul> <li>First, set the width and height to 32px by clicking the 'Size' button in the Bitmap Builder. Left-click bitmap squares to set pixels to black, and right-click squares to set them white</li> <li>Once the sprite is drawn, select a line in the code editor, then click the 'Export Lines' button in the 'Bitmap Builder' panel - see the below code snippet for the result.</li> <li>Or you can draw a Sprite/Bitmap using a tool like GIMP - export bitmaps as binary files (.bin) to include in your games.</li> </ul> <pre><code># BITMAP: width: 32, height: 32\nbitmap0 = bytearray([0,0,0,0,0,0,0,0,248,8,232,40,40,40,40,40,40,40,40,40,40,232,8,248,0,0,0,0,0,0,0,\n                        0,0,0,0,0,0,0,0,0,255,0,63,32,32,32,32,32,32,32,32,32,32,63,0,255,0,0,0,0,0,0,0,\n                        0,0,0,0,0,0,0,0,0,255,0,12,12,63,63,12,12,0,0,24,24,3,3,0,255,0,0,0,0,0,0,0,0,0,\n                        0,0,0,0,0,0,0,31,16,16,16,16,20,18,16,20,18,16,16,16,16,16,31,0,0,0,0,0,0,0,0])\n</code></pre> <ul> <li>Initialize the sprite object using the width, height, and bytearray object OR binary file location of the sprite:</li> </ul> <pre><code># Make a sprite object using bytearray (a path to binary file from 'IMPORT SPRITE' is also valid)\nthumbySprite = thumby.Sprite(32, 32, bitmap0)\n</code></pre> <ul> <li>Set the frame rate of the Thumby game to control how fast the screen changes:</li> </ul> <pre><code># Set the FPS (without this call, the default fps is 30)\nthumby.display.setFPS(60)\n</code></pre>"},{"location":"Code-Editor/Get-Started/#adding-game-logic-to-move-sprites","title":"Adding Game Logic to Move Sprites","text":"<ul> <li>Create a loop where the sprite will be animated bobbing up and down. The first steps every loop are to store the current time in milliseconds and to clear the screen to black:</li> </ul> <p><pre><code>while(1):\n    t0 = time.ticks_ms()   # Get time (ms)\n    thumby.display.fill(0) # Fill canvas to black\n</code></pre> *   As time goes on create a vertical offset using the sin function. The offset will move the sprite up and down 5px.</p> <p><pre><code>    bobRate = 250 # Set arbitrary bob rate (higher is slower)\n    bobRange = 5  # How many pixels to move the sprite up/down (-5px ~ 5px)\n\n    # Calculate number of pixels to offset sprite for bob animation\n    bobOffset = math.sin(t0 / bobRate) * bobRange\n</code></pre> *   Next, use the Thumby screen width and the width of the bitmap to center and calculate the sprite's X and Y location</p> <p><pre><code>    # Center the sprite using screen and bitmap dimensions and apply bob offset\n    thumbySprite.x = int((thumby.display.width/2) - (32/2))\n    thumbySprite.y = int(round((thumby.display.height/2) - (32/2) + bobOffset))\n</code></pre> *   The sprite is drawn on the screen, every loop, using the bitmap data array, the sprite X &amp; Y position, and the sprite dimensions</p> <pre><code>    # Display the bitmap using bitmap data, position, and bitmap dimensions\n    thumby.display.drawSprite(thumbySprite)\n    thumby.display.update()\n</code></pre> <p>That's it! You can emulate the project in the web browser by selection the red checkbox of the 'Emulation:' option in the Text Editor. Then press the 'Start' button in the Emulator window.</p>"},{"location":"Code-Editor/Get-Started/#adding-your-game-to-thumby","title":"Adding Your Game to Thumby","text":"<p>For your project to show up on the Thumby game select screen, there needs to be one .py file with the same name as the project. Before clicking upload, the webpage and code should look something like the below image:</p> <p> Setup before clicking 'Upload'</p> <p>Now click the 'Upload' button on the bottom of the Filesystem panel, disconnect Thumby, power cycle it (turn off and on), use down on the Thumby d-pad to find your project, click the left button to select and execute your main project file.</p> <p>If the above code was used, the below animation will play after selecting 'HelloWorld' in the Thumby select screen:</p>"},{"location":"Code-Editor/Get-Started/#other-web-code-editor-features","title":"Other Web Code Editor Features","text":"<ul> <li>Execute a single file on the Thumby at root level '/' using the 'Fast Execute' button in any code editor</li> <li>Import/export a .py file from/to your computer using the file drop-down in any editor (left-click 'File')</li> <li>Change the font size of individual editors using the view drop down (left-click 'View')</li> <li>Delete files or directories on the Thumby by left-clicking in the Filesystem panel</li> <li>Open files stored in Thumby by right-clicking in Filesystem panel</li> <li>Reset page layout by re-positioning each panel using button under 'Utilities' -&gt; 'Reset Layout'</li> <li>Reset and erase all page memory using button under Utilities -&gt; 'Hard Reset Page'</li> <li>'Clear' and 'Invert' buttons in the bitmap builder panel</li> <li>Import exported lines to bitmap builder by selecting bitmap array and comment then left-clicking</li> <li>Download most compatible/tested Thumby MicroPython firmware through 'Utilities' -&gt; 'Download Firmware' button and follow instructions provided when hovering over 'Download Firmware' button</li> <li>All work is automatically saved to the webpage, nothing is lost on a page refresh</li> </ul>"},{"location":"Code-Editor/Making-a-game/","title":"How to Make a Game using the Thumby MicroPython API","text":"<p>This tutorial will show you how to make a game to the in the Thumby Code Editor!</p> <p>To get some background on the features of the Thumby Code Editor, please go through the Thumby Getting Started Tutorial. The rest of this tutorial assumes you are familiar with the tool!</p>"},{"location":"Code-Editor/Making-a-game/#materials","title":"Materials","text":""},{"location":"Code-Editor/Making-a-game/#hardware","title":"Hardware:","text":"<ul> <li>Micro USB Cable</li> <li>Thumby (optional)</li> </ul>"},{"location":"Code-Editor/Making-a-game/#software","title":"Software:","text":"<ul> <li> <p>TinyCircuits Thumby Code Editor website</p> </li> <li> <p>Google Chrome or Microsoft Edge web browsers (other browsers not supported)</p> </li> </ul>"},{"location":"Code-Editor/Making-a-game/#emulator-first-thumby-hardware-whenever","title":"Emulator First, Thumby Hardware Whenever","text":"<p>You do not need the Thumby hardware to be able to make a Thumby game, you can get started right away using our free web browser Integrated Development Environment (IDE). Open a Google Chrome or Microsoft Edge window and navigate to the online Thumby Code Editor.</p> <p>Whenever you are ready to upload your game to a Thumby, simply plug in the Thumby to your computer using a Micro USB cable and flip the power switch ON to the right. </p> <p>Connect your Thumby using the \"CONNECT THUMBY\" button at the top of the Code Editor, select the port your Thumby is connected to, and upload your game:</p> <ul> <li>Option 1: 'Fast Execute' to upload just your game directly to the Thumby </li> <li>Option 2: Add your game to the list of games in the 'Filesystem' panel to make it playable from the Thumby default game list on the hardware</li> </ul>"},{"location":"Code-Editor/Making-a-game/#game-design-basics","title":"Game Design Basics","text":"<p>The Thumby screen is a monochrome OLED with 72\u00d740 drawable pixels. With this in mind, complex game graphics like those seen in modern games are not very possible with the limitations of the screen. Creating smaller game sprites and limiting text are some of the strategies that make simple games on Thumby work best. The Thumby API font implements a 5\u00d77 character size, which leads to around 12 displayable characters per row, and 5 per column. So a story game with a lot of text may not be right type of game for the Thumby's screen size. </p>"},{"location":"Code-Editor/Making-a-game/#conceptualizing-and-visualizing-your-game","title":"Conceptualizing and Visualizing Your Game","text":"<p>Steps:</p> <ol> <li>Create sample art of what gameplay might look like (if possible) - this will help you get started with creating game elements in the right size that you will need later on - keep in mind that the actual thumby screen is only 0.42\" </li> <li>Visualize a 72\u00d740 grid for your game when you start creating sample sprites or art - you can use the bitmap builder available from the Thumby Code Editor to start drafting up some static images of gameplay. </li> </ol> <p> Thumby Code Editor bitmap builder of 72\u00d740</p> <p>You can make the bitmap builder full screen, zoom in, and draw up some bitmap ideas to help visualize the size and possibilities. Keep in mind that you will eventually want each bitmap, or game element by itself, rather than as a part of a full screen bitmap to keep your game efficient.</p>"},{"location":"Code-Editor/Making-a-game/#teaching-players-how-to-play-your-game-optional","title":"Teaching Players How to Play Your Game (Optional)","text":"<p>Most games start with a tutorial to teach the player basic functions and actions the player can make to both play and (hopefully) win the game. Simple games like Snake, Tetris, or Flappy Birds might need no explanation at all given their popularity, but you will need to make that decision for your own individual game.</p> <p>It's safe to assume a player will understand that the directional d-pad is used to move something in the game. For other functionality, it may be enough explanation to list what action each A/B button triggers in the game, what bad things to avoid in the game, or how to win the game. For example, with a brick breaker game it might suffice to say \"Hit ball &amp; break bricks\".</p>"},{"location":"Code-Editor/Making-a-game/#programming","title":"Programming","text":"<p>Once you know how your game should look, how it might work, and perhaps how to teach others to play - it's time to actually build the game! </p>"},{"location":"Code-Editor/Making-a-game/#list-out-or-think-of-each-component-action","title":"List out, or think of each component &amp; action","text":"<p>A great place to start is listing each Sprite, or viewable component of the game, and then what action each Sprite is capable of, how it interacts with other game Sprites, and what rules each Sprite needs to follow. For the brick breaker game there are three main components that interact with each other:</p> <ul> <li> <p>Ball Paddle </p> <ul> <li>Action: Move when the player uses the left and right buttons of the d-pad</li> <li>Interaction: Bounce Ball when the Sprites meet each other</li> <li>Rule: Should not leave the screen when moving left and right</li> </ul> </li> <li> <p>Ball</p> <ul> <li>Action: Move through game after bouncing off a different object</li> <li>Interaction: Break Bricks that are touched during movement, and bounce off</li> <li>Interaction: Bounce off the Ball Paddle when touched </li> <li>Interaction &amp; Rule: when touching the edges of the screen, should bounce off instead of leaving the screen</li> <li>Rule: Disappear from screen when hitting the bottom</li> </ul> </li> <li> <p>Bricks - there should be many of these on the screen</p> <ul> <li>View / Initialization: Appear on the screen in some pattern that makes sense</li> <li>Action: None, these bricks do not move</li> </ul> </li> <li> <p>Moving bricks, however, could be a great future feature for different levels!</p> <ul> <li>Interaction: Break or disappear from screen when touched by the Ball - this involves collision detection</li> <li>Rule: All bricks are the same size and are 1 pixel away from each other</li> </ul> </li> </ul> <p>These above examples on component interactions &amp; rules are how I think about a brick breaker game, but they are by no means the only possible way to think of the game or its components. Think about your game in whatever way makes sense to you - imagine all the different scenarios, placements, and interactions that are possible. Take notes, draw pictures, or just think about it!</p>"},{"location":"Code-Editor/Making-a-game/#review-thumby-api-and-other-game-examples","title":"Review Thumby API and other Game Examples","text":"<p>The Thumby API includes functions and tools for some of the main building blocks to create a game. Review the documentation here.</p> <p>Luckily, there are also many public Thumby games available to peek through and use as examples when writing your own game. Navigate to the Thumby Arcade menu in the Thumby Code Editor, and open or download the code for any game with similar functionality that might help you write your own game.</p>"},{"location":"Code-Editor/Making-a-game/#create-your-game-in-small-building-steps-and-test-it-along-the-way","title":"Create your game in small building steps and test it along the way!","text":"<p>At this point, you should have an idea of what your Sprites might look like and be able to start programming their actions.</p> <p>To write the code, start with some of the easier components by themselves instead of trying to do everything at once. For example, start by importing the libraries you may use, and moving the Ball Paddle around the screen using the d-pad buttons:</p> <pre><code>import time\nimport thumby\nimport math\n\npadMap = bytearray([1,3,7,7,7,7,7,7,3,1]) # BITMAP: width: 10, height: 3\npadSprite = thumby.Sprite(10, 3, padMap, key=0) # w, h, bitmapData, key\n\n# Initial placement of ball and movable game pad\npadSprite.x = 31\npadSprite.y = 36\n\n# Begin main game loop that runs for the course of the game\nwhile(1):\n    thumby.display.fill(0) # Fill canvas to black\n\n    # MOVE BALL PADDLE\n    if (thumby.buttonL.pressed() == True and padSprite.x &gt; 0 ):\n        padSprite.x -= 1\n    if (thumby.buttonR.pressed() == True and padSprite.x &lt; 62 ): # 72 - width of ball paddle Sprite (10)\n        padSprite.x += 1\n\n    # DISPLAY SPRITES &amp; UPDATE SCREEN\n    thumby.display.drawSprite(padSprite)\n    thumby.display.update()\n</code></pre> <p>What the above program, we now have a movable Ball Paddle:</p>  <p>Then you can add other game elements, like the ability to lose the game, and the Ball's interaction with the Ball Paddle and constraints of the screen. For the direction of the Ball when hitting any of the walls, these are just numbered directions. This diagram might help the code make more sense:</p> <p> Ball direction image key</p> <pre><code>import time\nimport thumby\nimport math\n\n# Bitmaps\nballMap = bytearray([6,15,15,6]) # BITMAP: width: 4, height: 4\npadMap = bytearray([1,3,7,7,7,7,7,7,3,1]) # BITMAP: width: 10, height: 3\n\n# Sprite data\nballSprite = thumby.Sprite(4, 4, ballMap, key=0)\npadSprite = thumby.Sprite(10, 3, padMap, key=0)\nballSprite.x = 33 # Initial placement of ball and movable game pad\nballSprite.y = 31\npadSprite.x = 31\npadSprite.y = 36\n\n# Initial ball direction and movement \nballDir = 2\nballMove = 1\n\n# Game global variables\nlose = False  \ngameScore = 0 # keeps track of the number of bricks collided with\nloopCtr = 0 # used to control the speed of the ball\nthumby.display.setFPS(35) # standardize display speed\n\n# Begin main game loop that runs for the course of the game\nwhile(1):\n    thumby.display.fill(0) # Fill canvas to black\n\n    # MOVE BALL PADDLE\n    if (thumby.buttonL.pressed() == True and padSprite.x &gt; 0 ):\n        padSprite.x -= 1\n    if (thumby.buttonR.pressed() == True and padSprite.x &lt; 62 ): # 72 - width of ball paddle Sprite (10)\n        padSprite.x += 1\n\n    # MOVE BALL W/ MATH-GIC at half speed of game pad\n    loopCtr += 1\n    if(loopCtr % 2 == 0):\n        # Ball movement directions following the pattern:\n        #   3 \\/ 2\n        #   0 /\\ 1\n        if ballDir == 0: \n            ballSprite.x -= ballMove # left-down\n            ballSprite.y += ballMove\n        if ballDir == 1:\n            ballSprite.x += ballMove # right-down\n            ballSprite.y += ballMove\n        if ballDir == 2:\n            ballSprite.x += ballMove # right-up\n            ballSprite.y -= ballMove\n        if ballDir == 3:\n            ballSprite.x -= ballMove # left-up\n            ballSprite.y -= ballMove\n\n    # DETECT BALL COLLISION WITH WALL &amp; REDIRECT BALL\n    if ballSprite.x &lt;= 0 and ballDir == 0: # left side of screen |/ 0-ld, 2-ru\n        ballDir = 1                        #                     |\\ 1-rd, 3-lu\n    elif ballSprite.x &lt;= 0 and ballDir == 3: \n        ballDir = 2\n    elif (ballSprite.x + 4) &gt;= 72 and ballDir == 1: # right side of screen \n        ballDir = 0\n    elif (ballSprite.x + 4) &gt;= 72 and ballDir == 2: \n        ballDir = 3\n    elif ballSprite.y &lt;= 0 and ballDir == 2: # top of screen\n        ballDir = 1\n    elif ballSprite.y &lt;= 0 and ballDir == 3: \n        ballDir = 0\n    elif (ballSprite.y + 4) &gt;= 40 and ballDir == 1:  # bottom of screen \n        ballDir = 2\n    elif (ballSprite.y + 4) &gt;= 40 and ballDir == 0: \n        ballDir = 3\n\n    # DETECT BALL COLLISION WITH MOVING PAD\n    if (((ballSprite.y + 4) == padSprite.y) and ((ballSprite.x&lt;= padSprite.x + 10) and (ballSprite.x + 4 &gt;= padSprite.x))):\n        if ballDir == 0:\n            ballDir = 3\n        if ballDir == 1:\n            ballDir = 2\n\n    # CHECK IF LOST GAME ;/\n    if ballSprite.y &gt;= 38: \n        lose = True\n\n    # GAME OVER SCREEN\n    if lose == True:\n        thumby.display.fill(0)\n        thumby.display.drawText(\"Game Over\", 10, 5,1)\n\n    # DISPLAY SPRITES &amp; UPDATE SCREEN\n    thumby.display.drawSprite(ballSprite)\n    thumby.display.drawSprite(padSprite)\n    thumby.display.update()\n</code></pre> <p>At this point, you have a moving Game Paddle that can bounce the Ball, the Ball can bounce against all the bounds of the game screen except the bottom of the screen which triggers the \"Game Over\" screen.</p> <p>The code is getting pretty long, so let's just add the remaining components separately! You can comfortably fit around 3 rows of 10 bricks on the screen with the brick size 6\u00d73. So we need to display all the bricks and make them able to store the data of being collided or not per each of the 30 bricks. I chose to implement this with a Brick class that holds a collision variable, and a function that will delete, or move the Brick off the screen when collision is detected.</p> <p>With Bricks added to the game, we can keep score of how many are broken to Win the game! We can also add some more functionality to the Game Over menu to restart the game, or take the user back to the main Thumby menu using thumby.reset(). These components:</p> <pre><code>    # NOTE: library imports, ball, and pad variables should be here\n\n    # Bitmaps\n    ballMap = bytearray([6,15,15,6]) # BITMAP: width: 4, height: 4\n    padMap = bytearray([1,3,7,7,7,7,7,7,3,1]) # BITMAP: width: 10, height: 3\n    brickMap  = bytearray([7,7,7,7,7,7]) # BITMAP: width: 6, height: 3\n    brickW = 6\n    brickH = 3\n\n    # Brick class to keep track of placement, collisions and delete (move off screen) state\n    class Brick:\n        def __init__(self, x, y, collisions):\n            self.x = x\n            self.y = y\n            self.collisions = collisions\n\n        def delete(self):\n            self.x = -100\n            self.y = -100\n\n    # Create a list of bricks that covers three rows across the screen\n    listOfBricks = []\n    for i in range (0, 10):\n        listOfBricks.append(Brick(1 + (i*7), 1, 0))\n        listOfBricks.append(Brick(1 + (i*7), 5, 0))\n        listOfBricks.append(Brick(1 + (i*7), 9, 0))\n\n\n    # Begin main game loop\n    while(1):\n        thumby.display.fill(0) # Fill canvas to black\n\n        # NOTE: Ball and Ball Paddle actions should be here\n\n        # DETECT BALL COLLISION WITH BRICK\n        for brick in listOfBricks:    \n            # if ball at ballX * ballY checked against Brick.x + width, Brick y + height\n            if (((ballSprite.x &lt; brick.x + brickH) and (ballSprite.x + 4 &gt; brick.x)) and ((brick.y &lt; ballSprite.y + 4) and (brick.y + brickW &gt; ballSprite.y))):\n                brick.collisions = 1\n                gameScore += 1\n\n                if ballDir == 0: ballDir = 1\n                if ballDir == 1: ballDir = 0\n                if ballDir == 2: ballDir = 1\n                if ballDir == 3: ballDir = 0\n\n            if brick.collisions == 0:\n                # thumby.display.blit(brickMap, brick.x, brick.y, brickW, brickH, 0, 0, 0)\n                brickSprite.x = brick.x\n                brickSprite.y = brick.y\n                thumby.display.drawSprite(brickSprite) \n            else:\n                brick.delete()\n\n        # GAME OVER SCREEN\n        if lose == True or gameScore == 30:\n            thumby.display.fill(0)\n            # CHECK IF WON GAME\n            if gameScore == 30:\n                thumby.display.drawText(\"You won!\", 10, 5, 1) # text, x, y, color\n            elif lose == True: # OR LOST...\n                thumby.display.drawText(\"Game Over\", 10, 5,1)\n\n            thumby.display.drawText(\"Replay?\", 15, 20, 1)\n            thumby.display.drawText(\"A:N B:Y\", 15, 30, 1)\n\n            if time.ticks_ms() % 1000 &lt; 500:\n                thumby.display.drawLine(15, 37, 55, 37, 1) # (x1, y1, x2, y2, color)\n            else:\n                thumby.display.drawLine(15, 37, 55, 37, 0)\n\n            if thumby.buttonA.pressed(): # go back to Thumby main menu\n                machine.reset() \n\n            elif thumby.buttonB.pressed(): # Re-initialize values of variables to play again\n                lose = False  \n                gameScore = 0 \n                loopCtr = 0 \n                ballDir = 2\n                ballMove = 1\n                ballSprite.x = 33\n                ballSprite.y = 31\n                padSprite.x = 31\n                padSprite.y = 36\n\n                # Re-init list of bricks\n                listOfBricks = []\n                for i in range (0, 10):\n                    listOfBricks.append(Brick(1 + (i*7), 1, 0))\n                    listOfBricks.append(Brick(1 + (i*7), 5, 0))\n                    listOfBricks.append(Brick(1 + (i*7), 9, 0))\n\n        else:\n            # NOTE: DISPLAY Ball and Ball Paddle sprites here\n\n        # UPDATE SCREEN\n        thumby.display.update()\n</code></pre> <p>With all the game functionality written, all that's left to add are the game start menu and game instructions so that others can play the game!</p> <pre><code>    # NOTE: library imports and game variable initializations should be here\n\n    # TITLE SCREEN \n    thumby.display.fill(0)\n    thumby.display.drawRectangle(12, 4, 48, 12, 1) # x, y, w, h, color\n    thumby.display.drawText(\"Brick'd\", 16, 6, 1) # string, x, y, color\n    for i in range(0, 5): # bricks across the screen for flare \n        thumby.display.drawFilledRectangle(1 + (i*14), 20, brickW, brickH, 1) # x, y, w, h, color\n        thumby.display.drawFilledRectangle(8 + (i*14), 24, brickW, brickH, 1) \n    thumby.display.update()\n    # Flashing line under Press A/B\n    thumby.display.drawText(\"Press A/B\", 10, 32, 1)\n    while(thumby.buttonA.pressed() == False and thumby.buttonB.pressed() == False):\n        if(time.ticks_ms() % 1000 &lt; 500):\n            thumby.display.drawLine(10, 39, 62, 39, 0)\n        else:\n            thumby.display.drawLine(10, 39, 62, 39, 1)\n\n        thumby.display.update()\n        pass\n    # Game Instructions\n    thumby.display.fill(0)\n    thumby.display.drawText(\"Game Instr:\", 0, 0, 1) # string, x, y, color\n    thumby.display.drawLine(0, 8, 62, 8, 1)\n    thumby.display.drawText(\"Hit Ball &amp;\", 0, 10, 1)\n    thumby.display.drawText(\"Break Bricks\", 0, 19, 1)\n    thumby.display.update()\n    time.sleep(4) # delay game for a few seconds so player can read instructions\n\n    # NOTE: main game loop should be added here\n</code></pre> <p>Put it all together, and you have a playable Brick Breaker game, called Brick'd.</p> <p>At this point, you have a functional game that can be submitted to the Thumby Arcade to share your creation with other game developers and players. Or you can move on to the next step to add sound effects before submitting your game!</p>"},{"location":"Code-Editor/Making-a-game/#adding-audio","title":"Adding Audio","text":"<p>After adding everything else, this is arguably the simplest step, but it adds a lot to the gaming experience! You can choose to compose an entire backtrack song that plays for the course of your game, or you can just add a few key sound effects where interactions happen. </p> <p>Using the Thumby API function thumby.audio.play(freq, duration, duty) you can play a tone at a frequency between 20Hz - 20,000Hz at a duration in milliseconds. You could technically play frequencies up to 125,000,000Hz, but humans can only hear sounds between around 20Hz and 20,000Hz - any higher than that and perhaps a dog or bat will be able to hear the sound effects, but not you! To get an idea on what some Hz values may sound like, you can find many YouTube videos that feature the spectrum of sounds:</p>  <p>The audio you execute will play without blocking any code execution - so if you play an entire song, everything else in your game will continue working while the song plays.</p> <p>For Brick'd, I thought a happy noise when a brick is broken and a sad, continuous losing noise would be sufficient for sound effects.</p> <pre><code># Play a 'happy' sound when brick is deleted, at 440 hz for 300ms \nthumby.audio.play(440, 300) \n</code></pre> <pre><code># Play a losing sound\nthumby.audio.play(260, 250) \n</code></pre> <p>With everything working and added, all that's left to do is play-test to make sure everything's working. Then the game can be submitted to the Thumby Arcade for everyone to play!</p>"},{"location":"Code-Editor/Spritesheet/","title":"Import Spritesheet","text":"<p>Animations are important for gameplay and aesthetic appearance. One of the best ways to animate a Sprite or graphic is to use a spritesheet with all the different frames of animation in one place.</p>  <p>To import a spritesheet, press the 'Import Sprite' button. </p> <p>    Import Sprite window </p> <p>Find or make a spritesheet, and press 'Open Sheet Image' to open it in the Editor window. </p> <p>    Imported Spritesheet </p> <p>To frame the frames you'd like to import, you'll need to edit the number of frames in X and Y and change the 'X frame count' and 'Y frame count' values. </p> <p>    Sprite altered x and y count </p> <p>Then, change the Frame width and height (px) values to match the frames. You can divide the total width of pixels, in this case 250, by 'X frame count' 5 to get the correct 'Frame width (px)', and do the same for the height - 90 / 2 = 45 for the 'Frame height (px)'. If your frames are offset or aren't fitting using this method - use the arrows for the 'X and Y grid offset' or the 'X and Y grid gap' values to get the frame values that work for you.</p> <p>Note: Spritesheets, and therefore sprites that are too big (larger than 72\u00d740) will not fully display on the Thumby screen. Depending on the number and size of frames, you may get a memory error. Resize your image to smaller pixel values to solve this issue.</p> <p>    Sprite frame overlay </p> <p>If the spritesheet you find isn't exactly monochrome, or the colors aren't very dark, it may help to toggle the 'Black/White Threshold' slider to alter what pixels are in the sprites. If it's not coming out the way you would like, try editing the image in a program like Photoshop or Microsoft Paint before coming back to the 'Import Sprite' tool.</p> <p>    Imported butterfly flutter spritesheet </p>"},{"location":"Code-Editor/Spritesheet/#display-bitmap-frames-example","title":"Display Bitmap Frames Example","text":"<p>Once you have frames that you like, it's time to display them on the Thumby! Select 'Export Data -&gt;' and choose the option that works for you:</p> <ul> <li>'To Clipboard' will copy the bitmap data and then you can paste (Ctrl+V) it to your program Editor panel. </li> <li>'To Editor' will create a .raw file containing all the frame information. </li> </ul> <p>Here's an example of a short program displaying the butterfly flutter frames after using the 'To Clipboard' option:</p> <p>    Butterfly Flutter animation on emulated Thumby screen </p> <pre><code>import thumby\n\n# 50x45 for 10 frames\nspriteFrames = bytearray([193,63,243,131,127,255,255,255,255,255,63,7,1,1,1,1,1,1,7,63,127,63,63,63,63,31,31,31,31,31,31,31,31,31,63,63,63,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,249,230,132,131,7,15,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,252,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,252,248,240,224,224,192,128,0,0,0,0,0,0,0,0,0,0,0,0,128,128,192,240,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,252,252,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,255,255,255,227,137,127,195,3,127,255,255,255,255,255,255,31,3,1,0,0,0,1,1,7,63,31,31,31,15,15,15,15,15,15,15,15,31,31,31,63,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,248,243,196,137,131,15,31,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,192,252,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,252,252,248,240,224,192,128,128,0,0,0,0,0,0,0,0,0,0,0,0,128,192,224,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,252,252,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,31,15,31,15,15,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,255,255,255,255,255,255,255,129,27,255,193,63,255,255,255,255,255,255,63,15,3,1,0,0,0,0,1,7,31,31,15,15,7,7,7,7,7,7,7,7,15,15,159,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,249,230,132,131,135,15,15,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,246,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,252,248,240,240,224,192,128,0,0,0,0,0,0,0,0,0,0,0,128,128,192,224,240,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,252,252,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,255,255,255,255,255,255,255,255,255,255,251,129,63,241,139,127,255,255,255,255,255,255,63,31,15,15,7,7,7,15,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,251,230,132,131,7,31,15,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,225,241,251,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,252,248,248,240,224,192,128,128,0,0,0,0,0,0,128,128,128,192,192,224,224,248,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,252,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248,196,31,112,132,63,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,253,243,194,193,3,7,15,31,63,127,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,0,1,1,3,7,15,31,31,63,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,224,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,7,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,252,252,254,254,252,248,224,192,128,0,0,0,192,240,254,255,255,255,255,255,255,255,255,255,255,255,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,135,47,255,7,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,241,231,204,19,7,15,63,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,62,4,0,0,0,0,1,3,7,15,15,31,63,63,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,27,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,248,240,224,224,224,240,240,224,128,0,0,0,0,0,0,0,128,224,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,28,24,16,16,26,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,255,255,255,254,240,207,60,96,143,63,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,249,225,224,1,3,7,7,31,63,63,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,7,0,0,0,0,0,0,0,0,0,0,0,1,3,3,7,15,31,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,1,3,31,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,248,240,248,248,248,252,255,252,240,192,0,0,0,0,0,0,0,0,0,224,240,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,24,16,16,0,0,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,255,255,255,255,255,255,255,225,137,127,225,15,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,243,198,129,131,7,31,31,63,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,14,0,0,0,0,0,0,1,3,7,7,15,31,31,63,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,15,31,63,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,252,252,248,252,255,255,254,252,240,224,192,128,0,0,0,0,0,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,28,24,16,0,4,31,31,31,31,31,31,31,31,31,31,31,31,31,31,255,255,255,255,255,255,255,255,255,255,255,31,255,223,31,255,255,255,255,255,255,63,63,63,63,63,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,241,231,220,51,79,31,63,255,0,0,0,0,0,0,0,0,3,15,31,63,63,63,31,31,31,31,31,31,31,31,63,63,63,127,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,248,240,224,193,192,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,248,248,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,248,240,240,224,224,192,192,224,224,192,224,224,224,224,224,240,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,191,255,63,191,255,255,255,255,255,255,255,63,63,63,63,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248,231,140,48,103,95,63,127,255,15,0,0,0,0,0,0,0,1,15,15,15,15,7,7,7,7,7,7,15,15,15,31,31,63,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,248,240,192,193,192,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,232,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,252,248,240,240,224,224,192,192,192,192,192,192,192,192,192,224,240,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31])\nSpr = thumby.Sprite(50, 45, spriteFrames, 10, 3) \n\n# Increase this to make the flutter animation change frames faster\nthumby.display.setFPS(10) \n\nwhile(True):\n    thumby.display.fill(1) \n\n    thumby.display.drawSprite(Spr)\n    Spr.setFrame(Spr.currentFrame+1)\n    thumby.display.update()\n</code></pre>"},{"location":"Code-Editor/Spritesheet/#display-raw-file-frames-example","title":"Display .raw File Frames Example","text":"<p>To display the frames from a .raw file, the code is very similar and the display is the same as shown in the above gif. The most important thing to remember when emulating is to check the white 'Emulation' box to ensure it's included when emulating, or executing your program. </p> <p>Include the name, and relevant file path of the .raw file when initializing the sprite object.</p> <pre><code>import thumby\n\n# 50x45 for 10 frames\nSpr = thumby.Sprite(50, 45, \"sprite1.raw\", 10, 3)\n\n# Increase this to make the flutter animation change frames faster\nthumby.display.setFPS(10)\n\nwhile(True):\n    thumby.display.fill(1) \n\n    thumby.display.drawSprite(Spr)\n    Spr.setFrame(Spr.currentFrame+1)\n    thumby.display.update()\n</code></pre>"},{"location":"Code-Editor/Submit-Game/","title":"Submitting a Game to the Thumby Arcade","text":"<p>This tutorial will show you how to add a game to the Thumby Arcade in the Thumby Code Editor using GitHub!</p> <p>Consider going through the Getting Started with Thumby tutorial before continuing with this one!</p>"},{"location":"Code-Editor/Submit-Game/#tools-needed","title":"Tools needed","text":"<ul> <li>Your Thumby game</li> <li>A GitHub account</li> <li>Thumby Code Editor - NOTE: Only Google Chrome and Microsoft Edge support running the TinyCircuits Thumby Code Editor webpage</li> </ul>"},{"location":"Code-Editor/Submit-Game/#create-login-to-github-account","title":"Create &amp; Login to GitHub Account","text":"<p>Go to GitHub.com and login or create an account. GitHub is a code hosting platform created to track versions of code and collaborate with others.</p>  <p>Once you have an account, get familiar with GitHub features like creating a code repository, branching, pushing changes to GitHub from your local machine, and making commits and pull requests to public repositories. You can do all of this through GitHub's website, or you can learn how to do it all from the command line.</p> <p>At TinyCircuits, we share all of our software and hardware files through GitHub publicly under the Creative Commons Attribution Share-Alike 3.0 License. Open source contributions lead to greater and faster innovation through sharing and collaboration - you sharing your game on GitHub makes you a part of the amazing open source community!</p> <p>If you are not quite ready to submit your game and want some feedback, or players to test the game, consider sharing it on the Thumby board of the TinyCircuits forum or with the community on our Discord.</p>"},{"location":"Code-Editor/Submit-Game/#create-game-share","title":"Create Game &amp; Share","text":"<p>Once your game is in a state where you are ready to share it with everyone and publish it to the public Thumby Arcade, go through the instructions in the README file available on the repository of the Thumby Games to learn how to name your files, which files to include, and other important details. In short, you will need to submit a folder with 3 (or more) files:</p> <ul> <li>GameName/GameName.py - The main file of your game that references any other files, like a .bin or .raw image you use in the game - include all files needed for your main game file to work!</li> <li>GameName/arcade_description.txt - Include the title of your game, a short description, your name, and the version of your game. Add any instructions important to play your game. This text is displayed when hovering over your game in the Thumby Arcade.</li> <li>GameName/arcade_title_video.webm - A .webm video of gameplay. Use the video camera \ud83c\udfa5 button in the Emulator panel of the Thumby Code Editor Website to record a .webm of gameplay. Zoom in to at least 8\u00d7 to provide a good quality video. The zoom factor displays in the bottom left of the Emulator.</li> </ul>"},{"location":"Code-Editor/Submit-Game/#submit-your-game","title":"Submit Your Game","text":"<p>The following instructions (with pictures!) will guide you through submitting your game to the Thumby Arcade step-by-step all through your web browser - no need to use the command line if you're not comfortable with it. You just need a GitHub account! </p>"},{"location":"Code-Editor/Submit-Game/#fork-repository","title":"Fork Repository","text":"<p>Log in to your GitHub account and navigate to the Thumby Games Repository page. Press the 'Fork' button in the top right of the page to fork your own copy of the repository:</p> <p>    Fork? That's a weird name - what does forking a repository mean? </p>"},{"location":"Code-Editor/Submit-Game/#add-files-to-your-local-forked-repository","title":"Add Files to Your Local, Forked Repository","text":"<p>The game files you put together in a folder of the same main game .py file are what you will want to add here. Make sure the folder name and the .py file have the exact same name - this name is case sensitive!</p> <p>Click the 'Add file' button to access the drop down for the 'Upload files' option.</p> <p>    Zoomed in look at the buttons </p> <p>    The page that appears after selecting 'Upload files' </p> <p>Drag and drop your [GameName] folder to the above window where directed.</p>"},{"location":"Code-Editor/Submit-Game/#commit-game-files","title":"Commit Game Files","text":"<p>Now that you have added the folder of all the files needed to play your game, you will need to 'Commit' them to finalize your selections. Consider adding a description for these changes, such as \"Add a game called [GameName]\". Once you're happy with the description, press the 'Commit changes' button:</p> <p>    Notice the file path says Brickd/Brickd.py - this is how you will want to see your files added, in the right folder! </p>"},{"location":"Code-Editor/Submit-Game/#submit-pull-request","title":"Submit Pull Request","text":"<p>Go back to the main Thumby Games repository and click on the 'Pull Requests' tab. On this page, press the 'New pull request' button:</p> <p>  </p> <p>Select your local, forked repository to compare changes. Once selected, check that you can see all the files you want to submit. If everything looks good, press the 'Create pull request' button:</p> <p>  </p> <p>On the next page, you get the chance to add more information on what exactly is in your pull request. Add some description on the status of your game, and then press the 'Create pull request' button:</p> <p>  </p> <p>That's all! You should see a successful message that your branch has no conflicts with the base branch. </p> <p>  </p> <p>Now that you have submitted a successful pull request, you just need to wait on the TinyCircuits team to accept your game before it's added to the Thumby Arcade. If there are any issues with the PR, a TinyCircuits team member will comment and let you know!</p>"},{"location":"Code-Editor/Widget-panels/","title":"Thumby Code Editor Widgets and Panels","text":"<p>There are a few different widgets, or panels, to assist with programming Thumby. From left to right: </p> <ul> <li>Filesystem - Displays all the files on the Thumby when a Thumby is connected to the Code Editor</li> <li>Bitmap Builder - A bitmap editor for simple, small graphics. Other drawing tools with more features, like GIMP, are recommended for more complex animating. </li> <li>Code Editor - This is where the magic (code) happens!</li> <li>Shell - This terminal will print errors, and other helpful messages as you program and debug with Thumby.</li> <li>Emulator - Emulates the current program 'checked' for emulation in the Code Editor when 'Start' is pressed</li> </ul>"},{"location":"Code-Editor/Widget-panels/#filesystem","title":"Filesystem","text":"<p>Thumby\u2019s Filesystem. Manage all files on Thumby. Left click a file to delete. Right click a file to rename and open it in the editor. See Thumby Filesystem structure to learn more about properly organizing your code files to display correctly on Thumby.</p> <ul> <li>The storage available on the connected Thumby in MB is shown in a green storage bar at the top of the Filesystem.</li> <li>FORMAT: Delete all files on your Thumby and replace with default Thumby files and folders. Reboot your Thumby filesystem to a clean slate. </li> <li>UPDATE: Update the firmware on the connected Thumby to the latest version. Will appear in pink if the firmware version detected on the connected Thumby is out of date.</li> <li>UPLOAD: Upload multiple files from your computer to Thumby fast. Similar to SAVE TO THUMBY and SAVE AS TO THUMBY buttons in the Editor without needing to open files one at a time. </li> <li>\u21bb: Refresh the filesystem.</li> </ul>"},{"location":"Code-Editor/Widget-panels/#thumby-filesystem-structure","title":"Thumby Filesystem Structure","text":"<p>Ensure that you understand Thumby\u2019s filesystem and have the required files in the correct locations for games to run properly. </p> <p>main.py: The first script to be run when Thumby powers on. It sets up the Thumby and runs the main screen. menu.py: Displays the Thumby menu.  thumby.cfg: A file used by main.py and menu.py to store settings. Users typically should not care about this.</p>"},{"location":"Code-Editor/Widget-panels/#lib-folder-directory","title":"lib folder (directory)","text":"<p>Files required for running Thumby and Thumby\u2019s main program. Most users do not need to touch these files: </p> <ul> <li>ssd1306.py: The display driver for the Thumby OLED screen. </li> <li>thumby.py: The Thumby MicroPython library / API users use to render pixels and sprites on the Thumby screen and interact with Thumby buttons.</li> <li>credits.txt: The names and messages of our Special Edition kit supporters who backed our Kickstarter campaign!</li> </ul>"},{"location":"Code-Editor/Widget-panels/#games-folder","title":"Games folder","text":"<p>Where Thumby game files are stored. </p> <p>For every game folder, there should be a main python script to run that is the same name of the folder. </p> <p>To add your game to Thumby, place the game file in /Games/MyNewGame/MyNewGame.py to add it to the playable Thumby 'GAMES' list. Make sure your python file has the exact same name as the game: i.e. if the game is called TinyBlocks, the source file is named TinyBlocks.py. The title is case sensitive, so tinyblocks.py would not work.</p>  <p>For more information, check out this page: Submitting a Game to the Thumby Arcade</p>"},{"location":"Code-Editor/Widget-panels/#bitmap-builder","title":"Bitmap Builder","text":"<p>A simple drawing interface to create and edit code bitmaps. Left click to draw black pixels. Right click to draw white pixels.</p> <ul> <li>SIZE: Change the SIZE (width and height) of the bitmap. Bitmaps and sprites can be as large as the user wants. However, the bitmap builder can only handle images up to 144 \u00d7 80 px. The larger the bitmap, the slower it will be rendered to the Thumby display.</li> <li>+/-: Zoom in/out of the Bitmap Builder using the +/- buttons.</li> <li>EXPORT: Put your mouse cursor at the location in your Code Editor you want to export your drawing data to, then click the EXPORT button. A comment with size dimensions and a bitmap will be printed in the Code Editor.</li> <li>IMPORT: Highlight a bitmap and the exported dimensions comment in your code and click IMPORT to view the drawing in the Bitmap Builder.</li> <li>IMAGE: Import your own IMAGE to be converted into a bitmap. Most image formats will work, but the maximum image size is 2\u00d7 Thumby display dimensions,  144 \u00d7 80 px. An error will appear if the image exceeds maximum size. </li> <li>INVERT: Inverts black and white pixels to white and black pixels, respectively. </li> <li>CLEAR: Clears the bitmap editor to white pixels.</li> </ul>"},{"location":"Code-Editor/Widget-panels/#code-editor","title":"Code Editor","text":"<p>Where code is made and displayed. By default, the editor will have a Thumby sprite animation program preloaded in it. The editor comes in two flavors, MicroPython (the default) for text based coding, and Blockly for visual block programming. If you have several editor tabs open, the little green arrow on the top right of the Editor window will display any hidden editors when clicked.</p> <ul> <li> <p>FILE:</p> <ul> <li>EXPORT TO PC: save your file to your computer.</li> <li>IMPORT FROM PC: open a .py file in the Editor.</li> <li>SAVE TO THUMBY: upload your file to the Thumby filesystem to the current path (set path via SET PATH). </li> <li>SAVE AS TO THUMBY: choose a new path/location on the Thumby filesystem to save the file to, then upload your file to the Thumby filesystem. You can also rename your file this way. </li> <li>SET PATH: User can set desired Thumby filesystem path to save the file to. You can also rename your file this way. </li> <li>NEW TAB: Open a new empty editor tab for MicroPython coding.</li> <li>NEW BLOCKLY TAB: Open a new empty editor tab for Blockly programming.</li> <li>You can also create new Code Editor MicroPython file, using UTILITIES-&gt; MAKE NEW GAME.</li> </ul> </li> <li> <p>VIEW: Change display of Editor. Adjust and reset font size. Toggle live autocomplete (MicroPython only).</p> </li> <li>OPEN PYTHON: Open a new editor tab with the contents of the Blockly program converted to MicroPython (Blockly only).</li> <li>FAST EXECUTE: When pressed, will execute a single file at the root level of a connected Thumby device. </li> <li>EMULATION: Click both the white and red checkbox to test the file in the Emulator. The white box uploads the file (script) to the emulator\u2019s filesystem. The red box designates a script as the main script to run. Because of how Thumby works, only 1 file (main script, red checkbox) can be executed at a time. However, users may want to include other files that are not the main script during emulation (e.g. binary sprite files or other modules). Check the white box for those supplementary files. </li> </ul>"},{"location":"Code-Editor/Widget-panels/#shell","title":"Shell","text":"<p>Terminal that displays output from running MicroPython games. The running code warnings/errors/printouts in the emulator and connected hardware status messages will also display here. Examples of possible output: successful connection of Thumby, successful upload of code to Thumby or emulator.</p>"},{"location":"Code-Editor/Widget-panels/#emulator","title":"Emulator","text":"<p>This panel with a virtual Thumby emulates what your code will look like on the hardware, so you can develop games without a physical Thumby. To play games on the Emulator or interact with your code, click on the virtual Thumby buttons using your mouse, or use the keys 'W' 'A' 'S' 'D' for the directional-pad, and use '.' and ',' for the A and B action buttons.</p> <p>The emulator will not display the main game menu seen on the Thumby hardware, it will only emulate files in the Code Editor that are selected for emulation.</p> <p>To upload a file to the emulator, check the white and red checkboxes in the Code Editor panel with the file you want to emulate. The white box uploads the file (script) to the emulator\u2019s filesystem. The red box designates a script as the main script to run. Because of how Thumby works, only 1 file (main script, red checkbox) can be executed at a time on the device. However, users may want to include other files that are not the main script during emulation (e.g. binary sprite files or other modules). Check the white box for those supplementary files.</p> <ul> <li>STOP: Stop emulation.</li> <li>START: Start emulation of the checked files in the Code Editor. </li> <li>+/-: Zoom in/out using. The circle in the left corner shows how many times the image has been zoomed.</li> <li>\u21bb: Rotate the virtual Thumby </li> <li>MUTE/UNMUTE: Toggle the emulated volume off or on.</li> <li>FILES: see the file(s) being run in the Emulator.</li> <li>\ud83d\udcf7: Captures a snapshot of the emulation screen to your computer. </li> <li>\ud83c\udfa5: Captures a .webm video of the emulation screen to your computer. Press the button to start recording - the button will turn red. Press again to stop. </li> </ul> <p>Speed Note: Your code will run faster on the Thumby hardware than on the Emulator. To standardize game speed, make sure to set the FPS value in your program.</p>"},{"location":"Code-Editor/Widget-panels/#resizing-widgets","title":"Resizing Widgets","text":"<p>Click and drag the left/right edges of the widgets to resize the windows. Click on the tab name and drag to reorganize the layout. Click the top right to minimize/maximize the window. Click x to close the widget. Add a widget to your layout using 'Utilities' -&gt; 'Widgets'. </p>"},{"location":"Code-Editor/Widget-panels/#other-tabs","title":"Other tabs","text":"<ul> <li>Tutorial: Redirects to the Getting Started Thumby Code Editor tutorial.</li> <li>Thumby API: Redirects to the MicroPython API documentation with examples.</li> <li>Add Game To Arcade: Redirects to the relevant tutorial.</li> <li>Other Links:<ul> <li>Thumby Website: Redirects to the Thumby Documentation Website (this website).</li> <li>Report a Bug: Redirected to GitHub issues for reporting any bugs with the Editor.</li> <li>Changelog: The documentation on changes that have been made and features that have been added to the Code Editor.</li> <li>Forums: Redirects to the TinyCircuits forum that includes a </li> <li>Store: Redirects to the TinyCircuits store where Thumby will be purchasable. </li> <li>Contact Us: Redirects to our contact form for customer support. </li> </ul> </li> <li>Version XX.XX.XXXX_X: The last day the Code Editor was updated.</li> </ul>"},{"location":"Education/Bounded-ball/","title":"Ball Bounded by Thumby Screen","text":"<p>This example shows a modified snippet of the Brick Breaker Thumby game called Brick'd. When run, the ball Sprite in the program will bounce against the bounded walls of the Thumby screen. </p> <p>    Bounded Bouncing Ball </p> <pre><code>import thumby\n\n# Bitmaps\nballMap = bytearray([6,15,15,6]) # BITMAP: width: 4, height: 4\n\n# Sprite data\nballSprite = thumby.Sprite(4, 4, ballMap, key=0)\nballSprite.x = 0 # Initial placement of ball and movable game pad\nballSprite.y = 40\n\n# Initial ball direction and movement \nballDir = 2\nballMove = 1\n\nthumby.display.setFPS(45) # set frame rate, between 30-60 is usually best\n\n# Begin main game loop that runs for the course of the game\nwhile(True):\n    thumby.display.fill(0) # Fill canvas to black\n\n    # Ball movement directions following the pattern:\n    #   3 \\/ 2\n    #   0 /\\ 1\n    if ballDir == 0: \n        ballSprite.x -= ballMove # left-down\n        ballSprite.y += ballMove\n    if ballDir == 1:\n        ballSprite.x += ballMove # right-down\n        ballSprite.y += ballMove\n    if ballDir == 2:\n        ballSprite.x += ballMove # right-up\n        ballSprite.y -= ballMove\n    if ballDir == 3:\n        ballSprite.x -= ballMove # left-up\n        ballSprite.y -= ballMove\n\n    # DETECT BALL COLLISION WITH WALL &amp; REDIRECT BALL\n    if ballSprite.x &lt;= 0 and ballDir == 0: # left side of screen |/ 0-ld, 2-ru\n        ballDir = 1                        #                     |\\ 1-rd, 3-lu\n    elif ballSprite.x &lt;= 0 and ballDir == 3: \n        ballDir = 2\n    elif (ballSprite.x + 4) &gt;= 72 and ballDir == 1: # right side of screen \n        ballDir = 0\n    elif (ballSprite.x + 4) &gt;= 72 and ballDir == 2: \n        ballDir = 3\n    elif ballSprite.y &lt;= 0 and ballDir == 2: # top of screen\n        ballDir = 1\n    elif ballSprite.y &lt;= 0 and ballDir == 3: \n        ballDir = 0\n    elif (ballSprite.y + 4) &gt;= 40 and ballDir == 1:  # bottom of screen \n        ballDir = 2\n    elif (ballSprite.y + 4) &gt;= 40 and ballDir == 0: \n        ballDir = 3\n\n    # DISPLAY SPRITES &amp; UPDATE SCREEN\n    thumby.display.drawSprite(ballSprite)\n    thumby.display.update()\n</code></pre>"},{"location":"Education/Bounded-ball/#bounce-ball-with-physics","title":"Bounce ball with physics","text":"<p>Since this implementation uses fractions rather than whole numbers, the ball appears to jiggle as it moves on the screen.</p> <p>    Bounded Bouncing Ball using Velocity </p> <p>This jiggling appearance seen in the above animation can be minimized by increasing the FPS to 60, or above; increased FPS will make movement more smooth.</p> <pre><code>import thumby\n\n# Bitmaps\nballMap = bytearray([6,15,15,6]) # BITMAP: width: 4, height: 4\n\n# Sprite data\nballSprite = thumby.Sprite(4, 4, ballMap, key=0)\n\n# Initial placement of ball\nballSprite.x = 33\nballSprite.y = 17\n\n# Add some velocity attributes\nballSprite.xVel = 0.65\nballSprite.yVel = 0.9\n\n# set frame rate, between 30-60 is usually best\nthumby.display.setFPS(45)\n\n# Begin main game loop that runs for the course of the game\nwhile(1):\n    # Fill canvas to black\n    thumby.display.fill(0)\n\n    ballSprite.x += ballSprite.xVel\n    ballSprite.y += ballSprite.yVel\n\n    if ballSprite.x &lt; 0 or ballSprite.x &gt; thumby.display.width - 3:\n        ballSprite.xVel = -ballSprite.xVel\n\n    if ballSprite.y &lt; 0 or ballSprite.y &gt; thumby.display.height - 3:\n        ballSprite.yVel = -ballSprite.yVel\n\n    # Display sprites and update screen\n    thumby.display.drawSprite(ballSprite)\n    thumby.display.update()\n</code></pre>"},{"location":"Education/Change-Thumby-Start-Logo/","title":"Changing the TinyCircuits and Thumby logo on Thumby startup","text":"<p>To change the start up logos, you will need an image to replace the TinyCircuits logo and/or the Thumby logo in the Thumby filesystem. The images in the Thumby filesystem are saved as .bin files:</p> <ul> <li> <p>TClogo.bin</p> <ul> <li>The TinyCircuits logo flashes momentarily on the screen when turning the Thumby on. There is nothing else on the screen at this point, so you can use the full screen dimensions for a replacement: 72\u00d740 pixels</li> </ul> </li> <li> <p>thumbyLogo.bin</p> <ul> <li>The Thumby logo that is above the start menu can be only 24 pixels tall to avoid crowding out the \"Start\" text and flashing arrow to indicate that the Thumby is fully on and ready to play - taller images will be cut off.</li> </ul> </li> </ul>"},{"location":"Education/Change-Thumby-Start-Logo/#open-image-and-save-as-a-bin","title":"Open image and save as a .bin","text":"<p>The easiest way to replace these logos with your own is to use a picture that already exists, or create your design in whichever image editor works best for you.</p> <p>If you are not already familiar with the sprite sheet tool found under the Import Sprite button on the Thumby Code Editor, consider getting started with the Spritesheet Tutorial before moving on.</p>  <p>Press Import Sprite and then Open Sheet Image to open your image in the Spritesheet editor.</p> <p>Since we just want one image to replace a logo, the X frame count and Y frame count values can be set to 1 in the Sprite editor. The image can be up to 72 pixels wide since that's the width of the Thumby screen, so the Frame width (px) value can be up to 72.</p> <p>The top left corner will show how large your image is with pixel dimensions - if your image is too big, you can resize it with some photo software like MS Paint or GIMP to make the image smaller for the Thumby screen.</p> <p>You may need to use the frame and offset values to move the green Spritesheet overlay to the part of the image you wish to display. Lastly, use the Black/White Threshold slider to change how black and white pixels are applied to your input image.</p> <p>These are the values that worked best to save the eyes of a cat for this tutorial:</p> <p>  </p> <p>This image could be improved by resizing it with photo editing software to maintain more of the image, but this works just fine as an example. It's dimensions are 72px by 40px. Save the image as a .bin file by clicking Export Data and then To Editor.</p> <p>  </p>"},{"location":"Education/Change-Thumby-Start-Logo/#save-bin-image-to-thumby-filesystem","title":"Save .bin Image to Thumby filesystem","text":"<p>For this step, please make sure your Thumby is connected to the Code Editor. If you are not sure what that means, please go through the Getting Started tutorial for the Thumby Code Editor.</p> <p>You will need to save the .bin file you have created to the Thumby filesystem. Press File and then Save as to Thumby.</p> <p>  </p> <p>Save your image file to the lib/ directory and whatever you name it in this step, make sure it ends with .bin:</p> <p>  </p>"},{"location":"Education/Change-Thumby-Start-Logo/#replace-thumby-logo","title":"Replace Thumby Logo","text":"<p>Since the image we made earlier is 72\u00d740 pixels, it will work best as the start up logo, or the TClogo.bin. Rename the TCLogo.bin to something like orig-TCLogo.bin to signify that it is the original logo. Rename the .bin image file you saved in the previous step to TClogo.bin:</p> <p>  </p> <p>After the renamed file is saved, you can disconnect the Thumby and turn it off and back on. You should see the image saved under TClogo.bin flash for a second before the start menu opens. Optionally, you can delete the original orig-TCLogo.bin file.</p> <p>Keep in mind that updates to the Thumby API from the Code Editor may delete and replace any custom images, so make sure to save your image.bin files when you update your Thumby in the future!</p>"},{"location":"Education/Change-Thumby-Start-Logo/#replace-start-menu-logo","title":"Replace Start Menu Logo","text":"<p>For the Start menu logo thumbyLogo.bin, you will follow the same steps as above with a small difference. The image you place here can only be 24 pixels tall to keep space for the Start text. If you place an image with height greater than 24, the image will be cutoff. I cropped a different portion of the cat image used previously:</p> <p>  </p> <p>The final product of the customized logos:</p> <p>  </p>"},{"location":"Education/Get-Started/","title":"Thumby Examples &amp; Education","text":"<p>Welcome to the educational part of the Thumby docs! Here, you will find some great building blocks and examples of standalone game components without needing to detangle these concepts from full games.</p> <p>If you plan on using Thumby in an educational context, such as a high school classroom, please get in touch with us for any questions. Send a message to us here!</p>"},{"location":"Education/Jump/","title":"Jump a Sprite","text":"<p>To make a sprite jump, you need to change the coordinates of where the sprite is moving during a jump action, all while clearing and updating the screen to show the full jump movement. This example sprite has no other movement than jumping up and landing back in its original spot when using the A action button. </p> <p>    Sprite jumping up and falling down on Y plane </p> <pre><code>import thumby\n\n# Stand and Jump bitmaps: width: 13, height: 9\nstandMap = bytearray([16,8,4,60,194,74,66,74,194,60,4,8,16,\n           0,0,0,0,1,0,0,0,1,0,0,0,0])\njumpMap = bytearray([1,2,4,60,194,74,66,74,194,60,4,2,1,\n           0,0,0,0,1,0,0,0,1,0,0,0,0])\n\n# Make a sprite consisting of two frames\njumpSprite = thumby.Sprite(13, 9, standMap+jumpMap, key=0)\n\n# Initial placement - middle, bottom of screen\njumpSprite.x = 29\njumpSprite.y = 30\n\n# Number of pixels sprite will move - increasing this makes movement choppy \njumpNum = 1\n\n# Limit game refresh rate to 30 times a second, max\nthumby.display.setFPS(30) \n\n# Begin main game loop that runs for the course of the game\nwhile(True):\n    thumby.display.fill(0) # Fill canvas to black\n\n    if thumby.buttonA.justPressed() and jumpSprite.y &gt;= 20: # limit the height the Sprite can reach when jumping\n        for i in range (0, 10): # jump up 10 pixels\n            thumby.display.fill(0)\n            jumpSprite.y -= jumpNum \n            jumpSprite.setFrame(1)\n            thumby.display.drawSprite(jumpSprite) # draw jumping sprite while jumping\n            thumby.display.update() # redraw sprite during jump frames\n    else:\n        jumpSprite.setFrame(0)\n        thumby.display.drawSprite(jumpSprite) # draw standing sprite while falling &amp; standing\n        if jumpSprite.y &lt;= 30: \n            jumpSprite.y += jumpNum\n\n    # Update screen\n    thumby.display.update()\n</code></pre>"},{"location":"Education/Jump/#jump-with-velocity","title":"Jump with Velocity","text":"<p>    Sprite jumping Y plane using velocity  </p> <pre><code>import thumby\n\n# Stand and Jump bitmaps: width: 13, height: 9\nstandMap = bytearray([16,8,4,60,194,74,66,74,194,60,4,8,16,\n           0,0,0,0,1,0,0,0,1,0,0,0,0])\njumpMap = bytearray([1,2,4,60,194,74,66,74,194,60,4,2,1,\n           0,0,0,0,1,0,0,0,1,0,0,0,0])\n\n# Make a sprite consisting of two frames\nsprite = thumby.Sprite(13, 9, standMap+jumpMap, key=0)\n\n# Initial placement - middle, bottom of screen\nsprite.x = 29\nsprite.y = 30\n\n# Add some velocity attributes to the sprite\nsprite.xVel = 0\nsprite.yVel = 0\n\n# Limit game refresh rate to 60 times a second, max\nthumby.display.setFPS(60) \n\n# Begin main game loop that runs for the course of the game\nwhile(1):\n    # Fill canvas to black\n    thumby.display.fill(0)\n\n    # When A is pressed and the sprite is on the ground,\n    # jump by setting velocity. Show the sprite's jump frame\n    if thumby.buttonA.pressed() and sprite.yVel == 0:\n        sprite.yVel = 2.5\n        sprite.setFrame(1)\n\n    # Apply y velocity to y position\n    sprite.y -= sprite.yVel\n\n    # Only apply 'gravity' if sprite vertical velocity not zero\n    if sprite.yVel != 0:\n        sprite.yVel -= 0.15\n\n    # Sprite hit the ground, make sure it's on the ground exactly,\n    # velcoity returned to zero, and that it is back to standing\n    if sprite.y &gt;= 30:\n        sprite.y = 30\n        sprite.yVel = 0\n        sprite.setFrame(0)\n\n    # Draw sprite and update screen\n    thumby.display.drawSprite(sprite)\n    thumby.display.update()\n</code></pre>"},{"location":"Education/Jump/#parabolic-jump-with-velocity","title":"Parabolic Jump with Velocity","text":"<p>    Parabolic jumping using X and Y planes  </p> <pre><code>import thumby\n\n# Stand and Jump bitmaps: width: 13, height: 9\nstandMap = bytearray([16,8,4,60,194,74,66,74,194,60,4,8,16,\n           0,0,0,0,1,0,0,0,1,0,0,0,0])\njumpMap = bytearray([1,2,4,60,194,74,66,74,194,60,4,2,1,\n           0,0,0,0,1,0,0,0,1,0,0,0,0])\n\n# Make a sprite consisting of two frames\nsprite = thumby.Sprite(13, 9, standMap+jumpMap, key=0)\n\n# Initial placement - middle, bottom of screen\nsprite.x = 29\nsprite.y = 30\n\n# Add some velocity attributes to the sprite\nsprite.xVel = 0\nsprite.yVel = 0\n\n# Limit game refresh rate to 60 times a second, max\nthumby.display.setFPS(60) \n\n# Begin main game loop that runs for the course of the game\nwhile(1):\n    # Fill canvas to black\n    thumby.display.fill(0)\n\n    # When A is pressed and the sprite is on the ground,\n    # jump by setting velocity. Show the sprite's jump frame\n    if thumby.buttonA.pressed() and sprite.yVel == 0:\n        sprite.yVel = 2.5\n        sprite.setFrame(1)\n\n    if thumby.buttonL.pressed() and sprite.xVel &gt;= -1.95:\n        sprite.xVel -= 0.05\n\n    if thumby.buttonR.pressed() and sprite.xVel &lt;= 1.95:\n        sprite.xVel += 0.05\n\n    sprite.x += sprite.xVel\n    sprite.y -= sprite.yVel\n\n    # Only apply 'gravity' if sprite vertical velocity not zero\n    if sprite.yVel != 0:\n        sprite.yVel -= 0.15\n\n    if sprite.xVel &lt;= -0.05:\n        sprite.xVel += 0.05/2\n    elif sprite.xVel &gt;= 0.05:\n        sprite.xVel -= 0.05/2\n    else:\n        sprite.xVel = 0\n\n    # Sprite hit the ground, make sure it's on the ground exactly,\n    # velcoity returned to zero, and that it is back to standing\n    if sprite.y &gt;= 30:\n        sprite.y = 30\n        sprite.yVel = 0\n        sprite.setFrame(0)\n\n    # Draw sprite and update screen\n    thumby.display.drawSprite(sprite)\n    thumby.display.update()\n</code></pre>"},{"location":"Education/Move-Sprite/","title":"Move a Sprite Using the D-Pad","text":"<p>To create the effect of a moving sprite, one must continuously clear and rewrite the screen with the sprite's new position as it changes. With this in mind, the two lines to clear and update the screen are essential for any moving component in the game:</p> <pre><code>thumby.display.fill(0) # Fill canvas with black pixels to 'clear' the screen \n\nthumby.display.update()\n</code></pre> <p>This next example will show a spaceship sprite that moves around the screen depending on which buttons on the d-pad are pressed, up, down, left, and right. A combination of 2 buttons being pressed will move the sprite between the two directions - so your sprite can move 8 directions using just 4 buttons!</p> <p>Note that the spaceship will move off the screen with this code snippet since there is no bounding logic. Check out the bounded ball page for more information on keeping a sprite within view. </p> <p>    Spaceship moving around using d-pad buttons </p> <pre><code>import thumby\n\n# Spaceship bitmap: width: 13, height: 13\nshipMap = bytearray([128,64,64,48,168,100,36,100,168,48,64,64,128,\n           5,3,2,3,4,4,12,4,4,3,2,3,5])\n\nshipSprite = thumby.Sprite(13, 13, shipMap, key=0)\nshipSprite.x = 29 # Initial placement - middle of screen\nshipSprite.y = 15\n\n# Number of pixels sprite will move - increasing this makes movement choppy \nmoveNum = 1\n\nthumby.display.setFPS(45) # set frame rate, between 30-60 is usually best\n\n# Begin main game loop that runs for the course of the game\nwhile(True):\n    thumby.display.fill(0) # Fill canvas to black\n\n    # Up, down, left, right button movement logic\n    # When pressing 2 buttons at the same time, diagonal movement is possible\n    if thumby.buttonU.pressed():\n        shipSprite.y -= moveNum\n    if thumby.buttonD.pressed():\n        shipSprite.y += moveNum\n    if thumby.buttonL.pressed():\n        shipSprite.x -= moveNum\n    if thumby.buttonR.pressed():\n        shipSprite.x += moveNum\n\n    # Display Sprite &amp; Update screen\n    thumby.display.drawSprite(shipSprite)\n    thumby.display.update()\n</code></pre>"},{"location":"Education/Moving-Walk/","title":"Walk Animation","text":"<p>A walk cycle animation consists of a few or several different frames of the movements involved in walking. For a 2-legged human, there may be 2 frames of the right leg moving forward as the left leg moves further back. With different sprites that may have more legs or none at all, you may have to get creative with a walking animation!</p> <p>Here's an example of a simple cat walking:</p> <p>    Cat Walking Animation </p> <pre><code>import thumby\n\n# catFeetTogether = bytearray([243,133,135,231,231,128,129,248])\ncatFootForward = bytearray([243,133,135,231,231,128,193,184])\ncatFeetForward = bytearray([243,133,199,167,231,128,193,184])\ncatSplit = bytearray([177,199,199,167,231,128,225,152])\ncatFrontSplit =bytearray([179,197,135,231,167,192,193,184])\ncatFeetBack = bytearray([179,197,135,231,167,192,129,248])\ncatBackFootTail = bytearray([179,197,197,167,167,192,129,248])\n\n# Make a sprite object including all the walking cat frames\ncatSpr = thumby.Sprite(8, 8, catFootForward+catFeetForward+catSplit+catFrontSplit+catFeetBack+catBackFootTail, 28, 32)\n\n# Counter that will be used to point to different walking animation frames\ncatSprCtr = 0\n\n# Set the FPS (without this call, the default fps is 30)\nthumby.display.setFPS(8)\n\nwhile(True):\n    thumby.display.fill(1) # Fill canvas to white\n\n    # Display the sprite frames &amp; increase the frame counter\n    catSpr.setFrame(catSprCtr)\n    thumby.display.drawSprite(catSpr)\n    catSprCtr += 1\n    thumby.display.update()\n</code></pre>"},{"location":"Education/Moving-Walk/#moving-background","title":"Moving Background","text":"<p>With just the walking animation, it doesn't look like the cat is actually walking anywhere. With a moving, or scrolling, background we can add more movement to the scene. Here's a scrolling background that uses two full length screen Sprites (Thumby's screen is 72 pixels wide) that are displayed next to each other to look like one long background:</p> <p>    Scrolling nighttime background </p> <pre><code>import thumby\n\n# BITMAP: width: 72, height: 30\nbg = bytearray([0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,64,0,0,\n            0,0,0,0,0,8,20,8,0,0,0,128,128,128,128,128,128,128,128,128,128,128,128,128,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,128,192,224,224,240,240,248,248,252,252,252,252,252,252,252,252,248,248,240,\n            224,240,240,248,248,252,252,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,248,248,240,224,224,224,192,192,192,192,192,192,192,192,192,192,192,224,224,224,240,248,252,252,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n            63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63])\n\nbg2 = bytearray([0,0,0,2,0,0,0,16,64,0,0,0,0,128,64,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,16,40,16,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,64,160,64,2,0,\n            240,224,192,128,128,128,0,8,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,8,0,128,128,128,192,224,240,240,248,248,248,252,252,252,254,254,254,255,255,255,255,255,254,254,254,254,252,252,252,248,248,240,240,225,224,192,192,128,128,0,0,0,0,0,32,0,0,0,\n            255,255,255,255,255,255,255,255,254,254,254,254,252,252,252,252,252,252,252,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,252,248,240,240,224,224,\n            63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63])\n\n# Background sprites &amp; x positions\nbgSpr = thumby.Sprite(72, 30, bg)\nbg2Spr = thumby.Sprite(72, 30, bg2)\nbgSpr.x = 0\nbg2Spr.x = 72\n\n# Set the FPS\nthumby.display.setFPS(60)\n\n# Used to keep track of loops and timing when the backgrounds should scroll\nscrollCtr = 0\n\nwhile(True):\n    thumby.display.fill(1) # Fill canvas to white\n\n    # Scrolling background\n    scrollCtr += 1\n    if(scrollCtr % 8 == 0):\n        bgSpr.x -= 1\n        bg2Spr.x -= 1\n\n    # Re-place the x coordinate of backgrounds when they're unseen\n    if (bg2Spr.x == 0):\n        bgSpr.x = 72\n    if (bg2Spr.x == -72):\n        bg2Spr.x = 72\n\n    thumby.display.drawSprite(bgSpr)\n    thumby.display.drawSprite(bg2Spr)\n    thumby.display.update()\n</code></pre>"},{"location":"Education/Moving-Walk/#walking-animation-on-moving-background","title":"Walking Animation On Moving Background","text":"<p>Together, the walking animation on a scrolling background can achieve the full effect of a sprite moving during gameplay:</p> <p>    Walking cat on a scrolling nighttime background </p> <pre><code># Written by: Laver\u00e9na Wienclaw, Feb 2022\nimport thumby\n\n# Cat bitmaps 8x8\ncatFootForward = bytearray([243,133,135,231,231,128,193,184])\ncatFeetForward = bytearray([243,133,199,167,231,128,193,184])\ncatSplit = bytearray([177,199,199,167,231,128,225,152])\ncatFrontSplit =bytearray([179,197,135,231,167,192,193,184])\ncatFeetBack = bytearray([179,197,135,231,167,192,129,248])\ncatBackFootTail = bytearray([179,197,197,167,167,192,129,248])\n\n\n# BITMAP: width: 72, height: 30\nbg = bytearray([0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,64,0,0,\n            0,0,0,0,0,8,20,8,0,0,0,128,128,128,128,128,128,128,128,128,128,128,128,128,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,128,192,224,224,240,240,248,248,252,252,252,252,252,252,252,252,248,248,240,\n            224,240,240,248,248,252,252,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,248,248,240,224,224,224,192,192,192,192,192,192,192,192,192,192,192,224,224,224,240,248,252,252,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n            63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63])\n\nbg2 = bytearray([0,0,0,2,0,0,0,16,64,0,0,0,0,128,64,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,16,40,16,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,64,160,64,2,0,\n            240,224,192,128,128,128,0,8,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,8,0,128,128,128,192,224,240,240,248,248,248,252,252,252,254,254,254,255,255,255,255,255,254,254,254,254,252,252,252,248,248,240,240,225,224,192,192,128,128,0,0,0,0,0,32,0,0,0,\n            255,255,255,255,255,255,255,255,254,254,254,254,252,252,252,252,252,252,252,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,252,252,248,240,240,224,224,\n            63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63])\n\n\n# Make a sprite object including all the walking cat frames\ncatSpr = thumby.Sprite(8, 8, catFootForward+catFeetForward+catSplit+catFrontSplit+catFeetBack+catBackFootTail, 28, 32)\n\n# Background sprites &amp; initial x positions\nbgSpr = thumby.Sprite(72, 30, bg)\nbg2Spr = thumby.Sprite(72, 30, bg2)\nbgSpr.x = 0\nbg2Spr.x = 72\n\n# Set the FPS (without this call, the default fps is 30)\nthumby.display.setFPS(60)\n\n# You can set the FPS lower, or you can alter the timing of the animations\n# and movement using simple counters and the modulo operator\nscrollCtr = 0\ncatSprCtr = 0\n\nwhile(True):\n    thumby.display.fill(1) # Fill canvas to white\n\n    # Scrolling background\n    scrollCtr += 1\n    if(scrollCtr % 8 == 0): # Move the background every 8 loops\n        bgSpr.x -= 1\n        bg2Spr.x -= 1\n\n        catSprCtr += 1\n        if(catSprCtr &gt;= 5): # There are 6 frames in the list, in the placement 0-5\n            catSprCtr = 0\n\n    # Re-place the x coordinate of backgrounds when they're unseen\n    if (bg2Spr.x == 0):\n        bgSpr.x = 72\n    if (bg2Spr.x == -72):\n        bg2Spr.x = 72\n\n    # Draw sprites and update display\n    thumby.display.drawSprite(bgSpr)\n    thumby.display.drawSprite(bg2Spr)\n    catSpr.setFrame(catSprCtr)\n    thumby.display.drawSprite(catSpr)\n    thumby.display.update()\n</code></pre>"},{"location":"Education/Play-Video/","title":"Editing a Video Animation for Thumby","text":"<p>This tutorial details how to display an animation on Thumby from how to edit the video itself, to the final step of uploading the animation! The animation highlighted in this tutorial was first shared here:</p> <p>  @tinycircuits Coding Permission to Dance on Thumby for Jimin\u2019s birthday. Happy 26th Jimin! #jimin #bts #jiminbirthday #thumby #tinycircuits #fyp \u266c original sound - TinyCircuits   </p> <p>This tutorial will involve some video editing and programming.</p>"},{"location":"Education/Play-Video/#download-shotcut","title":"Download Shotcut","text":"<p>Download the video editing software Shotcut. Once downloaded, open the app and create a project file.</p> <p>  </p> <p>Import the video you want to see on Thumby. If you want to follow along with this tutorial, you can download the video we used.</p>"},{"location":"Education/Play-Video/#edit-video-to-only-black-and-white","title":"Edit video to only black and white","text":"<p>For this, we will need to add some filters to achieve a fully black and white video. Keep in mind that this process will require more steps if your video contains a lot of colors or doesn't have a solid color background.</p> <p>To accomplish this, we will use the Shotcut filter Hue/Lightness/Saturation to adjust the saturation, lightness, and hue values. When edited correctly, the video video should appear so saturated and brightened that you only see two colors.</p> <p>Navigate to the filters list to locate Hue/Lightness/Saturation:</p> <p>   Click Filters</p> <p>   Scroll or search for Hue/Lightness/Saturation filter</p> <p>  </p> <p>   The default Hue/Lightness/Saturation values are on sliders you can toggle</p> <p>For this video, the orange background became a very light yellow so it may be difficult to distinguish that there are two colors after applying the following settings:</p> <ul> <li>Hue: -21</li> <li>Lightness: 200 (max)</li> <li>Saturation: 100</li> </ul> <p>  </p> <p>Now we need to make the video appear as just black and white. To do this, we will first key out the light-yellow background color and then add a black video to replace the background. Search for the Chroma Key: Simple filter. Once open, take the color dropper tool and select the background, in this case the light yellow. Nothing will visually change here until we layer in some black footage. To do this, select the Open Other dropdown in the top left, and press Color:</p> <p>  </p> <p>Select the color black and press OK to add it:</p> <p>  </p> <p>From there, you can move the black track to a separate Output and extend it to match the length of the animation. Move the black footage to Output V1 and the animation to Output V2 so that the animation is layered on top of the black footage:</p> <p>  </p> <p>The last filter to add would be Crop: Source to remove the YouTube watermark and resize the video to better fit the Thumby screen dimensions of 72\u00d740 pixels:</p> <p>  </p>"},{"location":"Education/Play-Video/#rotate-the-video-and-scale-it","title":"Rotate the video and scale it","text":"<p>The Thumby screen is a typical wide rectangle, so to make this tall phone-style video fit onto the screen better, we will need to rotate and scale it before exporting it. Click on View and select Export:</p> <p>  </p> <p>Once the settings are open, change the Aspect ratio values to 72 and 40 and set the Rotation to 90. Click on Convert and then press OK on the window that opens to export the modified video:</p> <p>  </p> <p>Name the edited video DancingAnimation-edited.mp4 so that it will be compatible with the program used in the next step.</p>"},{"location":"Education/Play-Video/#convert-mp4-to-bitmap","title":"Convert MP4 to Bitmap","text":"<p>To make the animation compatible with Thumby, we will want the video in terms of bitmaps. Use the following program ConvertMP4ToMPBitmaps.py to generate the video.raw file that will be used in the next, final step to get the video onto Thumby.</p> <p>To use this program, you will need python installed on your computer. Download the python file to your computer, put the DancingAnimation-edited.mp4 file in the same folder as the python file. Once the python file and DancingAnimation-edited.mp4 are in the same folder, you should be able to double click the python file and it will run the following script to convert the DancingAnimation-edited.mp4 file to video.raw:</p> <pre><code>import cv2\n\nprint(\"Started\")\n\nvideo = cv2.VideoCapture('DancingAnimation-edited.mp4')\nsuccess, image = video.read()\nframeCount = 0\n\nEXPECTED_WIDTH = 72\nEXPECTED_HEIGHT = 40\nWHITE_THRESHOLD = 200\n\nfile = open(\"video.raw\", 'wb')\n\nwhile success:\n    height, width, channels = image.shape\n    frameBytes = []\n\n    for y in range(0, EXPECTED_HEIGHT, 8):\n        for x in range(0, EXPECTED_WIDTH, 1):\n            byte = 0b00000000\n            for i in range(0, 8, 1):\n                if image[y+i, x, 0] &gt; WHITE_THRESHOLD or image[y+i, x, 1] &gt; WHITE_THRESHOLD or image[y+i, x, 2] &gt; WHITE_THRESHOLD:\n                    byte = byte | (1 &lt;&lt; i)\n                else:\n                    byte = byte &amp; ~(1 &lt;&lt; i)\n            frameBytes.append(byte)\n\n    file.write(bytes(bytearray(frameBytes)))\n\n    success, image = video.read()\n    frameCount += 1\n    print('Read a new frame: ', frameCount)\n\nfile.close()\n\nprint(\"\")\nprint(\"Ended:\")\nprint(\"   Frame count: \", frameCount)\nprint(\"   Total frame bytes (kB): \", (frameCount * 360)/1000)\n\nprint(\"\")\nprint(\"############################################\")\nprint(\"\")\nprint(\"Data output to: video.raw\")\nprint(\"\")\n</code></pre> <p>If the python file doesn't produce a video.raw file, you may need to download the python module cv2 - to do this, first download pip and then open a command prompt and type one of the following install commands that will work for your python version and machine:</p> <pre><code># \ud83d\udc47\ufe0f in a virtual environment or using Python 2\npip install opencv-python\n\n# \ud83d\udc47\ufe0f for python 3 (could also be pip3.10 depending on your version)\npip3 install opencv-python\n\n# \ud83d\udc47\ufe0f if you get permissions error\nsudo pip3 install opencv-python\n\n# \ud83d\udc47\ufe0f if you don't have pip in your PATH environment variable\npython -m pip install opencv-python\n\n# \ud83d\udc47\ufe0f for python 3 (could also be pip3.10 depending on your version)\npython3 -m pip install opencv-python\n\n# \ud83d\udc47\ufe0f for Anaconda\nconda install -c conda-forge opencv\n\n# Above install options sourced from: https://bobbyhadz.com/blog/python-no-module-named-cv2\n</code></pre>"},{"location":"Education/Play-Video/#upload-the-raw-video-to-thumby","title":"Upload the .raw video to Thumby","text":"<p>Use the following program in the Thumby Code Editor to play the video.raw animation. If you're unfamiliar with the Thumby Code Editor, it may help to go through the Getting Started tutorial.</p> <p>Copy the below code and paste it into the Editor section of the site:</p> <pre><code>import time\nimport thumby\nimport math\nimport time\n\n# video = open(\"/Games/VideoPlayer/video.raw\", 'rb')\nvideo = open(\"/video.raw\", 'rb')\n\nwhile(1):\n    for frameIndex in range(0, 310, 1):\n        frame = video.read(360)\n        thumby.display.fill(0)\n        thumby.display.blit(bytearray(frame), 0, 0, 72, 40, 0, 0, 0)\n        thumby.display.update()\n        time.sleep_ms(17)\n    video.seek(0)\n</code></pre> <p>  </p> <p>Then select File and Import from PC to import the video.raw file:</p> <p>  </p> <p>Make sure the file path on line 6 or 7 is pointing to the correct location, whether you have the video.raw file just in the emulator, or if you later add it to a folder on the Thumby hardware.</p> <p>That's everything! You can emulate the animation directly in the Code Editor, or you can download it to your Thumby.</p>"},{"location":"Education/Shoot-Target-Keep-Score/","title":"Shoot and Hit Target","text":"<p>Some games involve the need to remove objects blocking a path forward, and what better way to do that than with a laser? </p> <p>Whether it be a harmless obstacle, or an opponent that needs some laser-ing, keeping track of the score for game points or knowing when an opponent is defeated can be an important to gameplay. This example shows a simple way to shoot a laser beam at a meteor from a spaceship, and how to keep track of the number of times a laser beam has hit the meteor.</p> <p>    Spaceship laser beam hitting a meteor </p> <pre><code>import thumby\n\n# BITMAP: width: 8, height: 8\nshipMap = bytearray([195,231,189,219,102,36,60,24])\nmeteorMap = bytearray([28,122,126,223,175,223,118,60])\nbeamMap = bytearray([1,1])\n\n# Make a sprite object \nshipSpr = thumby.Sprite(8, 8, shipMap, 5, 20)\nmeteorSpr = thumby.Sprite(8, 8, meteorMap, 60,20)\nbeamSpr = thumby.Sprite(2, 1, beamMap)\nbeamSpr.x = 11 # place beam so it's hidden at the tip of the ship\nbeamSpr.y = 24\n\n# Set the FPS (without this call, the default fps is 30)\nthumby.display.setFPS(30)\n\n# Game state variables\nscore = 0\nshootBeam = False\n\nwhile(True):\n    # Fill canvas to black\n    thumby.display.fill(0)\n\n    if thumby.buttonA.justPressed():\n        shootBeam = True\n    if shootBeam == True:\n        thumby.display.fill(0)\n        beamSpr.x += 1\n\n        # Check if beam has collided with meteor\n        if(beamSpr.x &gt;= meteorSpr.x):\n            beamSpr.x = 11 # Reload beam after hitting meteor\n            score += 1     # Increase score and change game state\n            shootBeam = False\n\n    # Draw the score and sprites\n    thumby.display.drawText(\"Score: \", 15, 3, 1)\n    thumby.display.drawText(str(score), 55, 3, 1)\n    thumby.display.drawSprite(shipSpr)\n    thumby.display.drawSprite(meteorSpr)\n    thumby.display.drawSprite(beamSpr)\n    thumby.display.update()\n</code></pre>"}]}